name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  release:
    types: [published]

env:
  PYTHON_VERSION: "3.11"
  UV_CACHE_DIR: ~/.cache/uv
  
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 🔍 Code Quality & Security
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    outputs:
      python-cache-key: ${{ steps.cache-key.outputs.python-cache-key }}
    
    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: 🐍 Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: 📦 Install dependencies
      run: |
        uv sync --group lint --group dev
        echo "VIRTUAL_ENV=$(uv venv --python ${{ env.PYTHON_VERSION }} --seed)" >> $GITHUB_ENV

    - name: 🧹 Run ruff (lint)
      run: uv run ruff check . --output-format=github

    - name: 🎨 Run ruff (format check)
      run: uv run ruff format --check . --diff

    - name: 🔍 Run mypy type checking
      run: uv run mypy src/ --ignore-missing-imports --show-error-codes

    - name: 🔒 Run bandit security linter
      run: |
        uv add --dev bandit[toml]
        uv run bandit -r src/ -f json -o bandit-report.json -ll
      continue-on-error: true

    - name: 📊 Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-bandit-report
        path: bandit-report.json

    - name: 🔐 Run safety check
      run: |
        uv add --dev safety
        uv run safety check --json --output safety-report.json
      continue-on-error: true

    - name: 📊 Upload safety report  
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-safety-report
        path: safety-report.json

  # 🧪 Comprehensive Testing
  test:
    name: 🧪 Tests (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: quality
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.11", "3.12"]
        include:
          - os: macos-latest
            python-version: "3.11"

    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: 📦 Install dependencies
      run: uv sync --group test --group mcp --group agents

    - name: 🧪 Run pytest with coverage
      run: |
        uv run pytest tests/ -v \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junitxml=pytest-results.xml \
          --maxfail=3
      env:
        PYTHONPATH: src

    - name: 📊 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          pytest-results.xml
          htmlcov/
          coverage.xml

    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  # 🔌 MCP Server Testing
  test-mcp:
    name: 🔌 MCP Server Tests
    runs-on: ubuntu-latest
    needs: quality
    
    services:
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Install uv  
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: 🐍 Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: 📦 Install MCP dependencies
      run: uv sync --group mcp --group test

    - name: 🔌 Test MCP servers
      run: |
        uv run python -m pytest tests/mcp/ -v \
          --cov=mcp \
          --cov-report=xml \
          --junitxml=mcp-test-results.xml
      env:
        QDRANT_URL: http://localhost:6333
        PYTHONPATH: src

    - name: 📊 Upload MCP test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mcp-test-results
        path: |
          mcp-test-results.xml
          coverage.xml

  # 🏗️ Build & Package
  build:
    name: 🏗️ Build Package  
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'release'

    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: 🐍 Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: 📦 Install dependencies
      run: uv sync

    - name: 🏗️ Build package
      run: uv build

    - name: 📦 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-package
        path: dist/
        retention-days: 30

    - name: 🐳 Build Docker images (if Dockerfile exists)
      if: hashFiles('Dockerfile') != ''
      run: |
        docker build -t nyra-app:${{ github.sha }} .
        docker tag nyra-app:${{ github.sha }} nyra-app:latest

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, test-mcp]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-package
        path: dist/

    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "📦 Package files:"
        ls -la dist/
        # Add your staging deployment commands here
        # Examples:
        # - Deploy to staging server via SSH
        # - Update staging Docker containers  
        # - Deploy to cloud staging environment
      env:
        STAGING_API_KEY: ${{ secrets.STAGING_API_KEY }}
        STAGING_URL: ${{ secrets.STAGING_URL }}

  # 🌟 Deploy to Production  
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test-mcp]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production

    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-package  
        path: dist/

    - name: 🌟 Deploy to production
      run: |
        echo "🌟 Deploying to production environment..."
        echo "📦 Package files:"
        ls -la dist/
        # Add your production deployment commands here
        # Examples:
        # - Deploy to production servers
        # - Update production containers
        # - Deploy to cloud production environment
      env:
        PRODUCTION_API_KEY: ${{ secrets.PRODUCTION_API_KEY }}
        PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}

  # 📝 Generate Reports
  report:
    name: 📝 Generate Reports
    runs-on: ubuntu-latest
    needs: [test, test-mcp]
    if: always()

    steps:
    - name: 📊 Download all artifacts
      uses: actions/download-artifact@v4

    - name: 📝 Generate workflow summary
      run: |
        echo "# 📊 Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔍 Quality Checks" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Code linting and formatting" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Type checking with mypy" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Security scanning" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- Multi-platform testing completed" >> $GITHUB_STEP_SUMMARY
        echo "- MCP server testing completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📦 Build & Deploy" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "- 🚀 Staging deployment triggered" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ github.event_name }}" == "release" ]]; then
          echo "- 🌟 Production deployment triggered" >> $GITHUB_STEP_SUMMARY  
        else
          echo "- 🏗️ Build completed (no deployment)" >> $GITHUB_STEP_SUMMARY
        fi

    - name: 📊 Comment PR with results (if PR)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.login === 'github-actions[bot]' && 
            comment.body.includes('🤖 NYRA CI/CD Results')
          );
          
          const body = `## 🤖 NYRA CI/CD Results
          
          ### ✅ Quality & Security Checks
          - Code linting and formatting ✅
          - Type checking with mypy ✅  
          - Security scanning completed ✅
          
          ### 🧪 Test Results  
          - Multi-platform tests ✅
          - MCP server tests ✅
          - Coverage reports generated ✅
          
          ### 📦 Build Status
          - Package build successful ✅
          
          _Last updated: ${new Date().toISOString()}_`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }