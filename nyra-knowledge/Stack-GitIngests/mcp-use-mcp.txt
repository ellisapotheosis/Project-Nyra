Directory structure:
└── mcp-use-mcp-use/
    ├── README.md
    ├── CHANGELOG.md
    ├── CLAUDE.md
    ├── CODE_OF_CONDUCT.md
    ├── CONTRIBUTING.md
    ├── LICENSE
    ├── pyproject.toml
    ├── pytest.ini
    ├── ruff.toml
    ├── .env.example
    ├── .pre-commit-config.yaml
    ├── docs/
    │   ├── README.md
    │   ├── changelog.mdx
    │   ├── development.mdx
    │   ├── docs.json
    │   ├── fonts.css
    │   ├── advanced/
    │   │   ├── building-custom-agents.mdx
    │   │   ├── logging.mdx
    │   │   ├── multi-server-setup.mdx
    │   │   └── security.mdx
    │   ├── agent/
    │   │   ├── agent-configuration.mdx
    │   │   ├── interactive-chat-patterns.mdx
    │   │   ├── llm-integration.mdx
    │   │   ├── server-manager.mdx
    │   │   ├── streaming.mdx
    │   │   └── structured-output.mdx
    │   ├── api-reference/
    │   │   ├── adapters.mdx
    │   │   ├── introduction.mdx
    │   │   ├── mcpagent.mdx
    │   │   └── mcpclient.mdx
    │   ├── client/
    │   │   ├── client-configuration.mdx
    │   │   ├── connection-types.mdx
    │   │   ├── direct-tool-calls.mdx
    │   │   ├── elicitation.mdx
    │   │   ├── logging.mdx
    │   │   ├── notifications.mdx
    │   │   ├── prompts.mdx
    │   │   ├── resources.mdx
    │   │   ├── sampling.mdx
    │   │   ├── sandbox.mdx
    │   │   └── tools.mdx
    │   ├── community/
    │   │   └── showcase.mdx
    │   ├── development/
    │   │   ├── observability.mdx
    │   │   └── telemetry.mdx
    │   ├── getting-started/
    │   │   ├── configuration.mdx
    │   │   ├── index.mdx
    │   │   ├── installation.mdx
    │   │   └── quickstart.mdx
    │   ├── snippets/
    │   │   ├── snippet-intro.mdx
    │   │   └── youtube-embed.mdx
    │   └── troubleshooting/
    │       ├── common-issues.mdx
    │       ├── connection-errors.mdx
    │       └── performance.mdx
    ├── examples/
    │   ├── airbnb_mcp.json
    │   ├── airbnb_use.py
    │   ├── blender_use.py
    │   ├── browser_use.py
    │   ├── chat_example.py
    │   ├── direct_tool_call.py
    │   ├── filesystem_use.py
    │   ├── http_example.py
    │   ├── mcp_everything.py
    │   ├── multi_server_example.py
    │   ├── sandbox_everything.py
    │   ├── simple_server_manager_use.py
    │   ├── stream_example.py
    │   └── structured_output.py
    ├── mcp_use/
    │   ├── __init__.py
    │   ├── cli.py
    │   ├── client.py
    │   ├── config.py
    │   ├── logging.py
    │   ├── session.py
    │   ├── utils.py
    │   ├── adapters/
    │   │   ├── __init__.py
    │   │   ├── base.py
    │   │   └── langchain_adapter.py
    │   ├── agents/
    │   │   ├── __init__.py
    │   │   ├── base.py
    │   │   ├── mcpagent.py
    │   │   ├── remote.py
    │   │   └── prompts/
    │   │       ├── system_prompt_builder.py
    │   │       └── templates.py
    │   ├── connectors/
    │   │   ├── __init__.py
    │   │   ├── base.py
    │   │   ├── http.py
    │   │   ├── sandbox.py
    │   │   ├── stdio.py
    │   │   ├── utils.py
    │   │   └── websocket.py
    │   ├── errors/
    │   │   ├── __init__.py
    │   │   └── error_formatting.py
    │   ├── managers/
    │   │   ├── __init__.py
    │   │   ├── base.py
    │   │   ├── server_manager.py
    │   │   └── tools/
    │   │       ├── __init__.py
    │   │       ├── base_tool.py
    │   │       ├── connect_server.py
    │   │       ├── disconnect_server.py
    │   │       ├── get_active_server.py
    │   │       ├── list_servers_tool.py
    │   │       └── search_tools.py
    │   ├── observability/
    │   │   ├── __init__.py
    │   │   ├── callbacks_manager.py
    │   │   ├── laminar.py
    │   │   └── langfuse.py
    │   ├── task_managers/
    │   │   ├── __init__.py
    │   │   ├── base.py
    │   │   ├── sse.py
    │   │   ├── stdio.py
    │   │   ├── streamable_http.py
    │   │   └── websocket.py
    │   ├── telemetry/
    │   │   ├── __init__.py
    │   │   ├── events.py
    │   │   ├── telemetry.py
    │   │   └── utils.py
    │   └── types/
    │       └── sandbox.py
    ├── tests/
    │   ├── conftest.py
    │   ├── integration/
    │   │   ├── __init__.py
    │   │   ├── conftest.py
    │   │   ├── others/
    │   │   │   └── test_custom_streaming_integration.py
    │   │   ├── primitives/
    │   │   │   ├── test_discovery.py
    │   │   │   ├── test_elicitation.py
    │   │   │   ├── test_logging.py
    │   │   │   ├── test_notifications.py
    │   │   │   ├── test_prompts.py
    │   │   │   ├── test_resources.py
    │   │   │   ├── test_sampling.py
    │   │   │   └── test_tools.py
    │   │   ├── servers_for_testing/
    │   │   │   ├── __init__.py
    │   │   │   ├── custom_streaming_server.py
    │   │   │   ├── primitive_server.py
    │   │   │   ├── simple_server.py
    │   │   │   └── timeout_test_server.py
    │   │   └── transports/
    │   │       ├── test_sse.py
    │   │       ├── test_stdio.py
    │   │       └── test_streamable_http.py
    │   └── unit/
    │       ├── test_client.py
    │       ├── test_config.py
    │       ├── test_http_connector.py
    │       ├── test_logging.py
    │       ├── test_sandbox_connector.py
    │       ├── test_search_tools_issue_138.py
    │       ├── test_session.py
    │       ├── test_stdio_connector.py
    │       └── test_websocket_connection_manager.py
    └── .github/
        ├── pull_request_template.md
        ├── release-drafter.yml
        ├── ISSUE_TEMPLATE/
        │   └── bug_report.md
        └── workflows/
            ├── changelog.yml
            ├── publish.yml
            ├── release-drafter.yml
            ├── stale.yml
            ├── tests.yml
            └── update-readme.yml

================================================
FILE: README.md
================================================
<div align="center">
<div align="center" style="margin: 0 auto; max-width: 80%;">
  <picture>
    <source media="(prefers-color-scheme: dark)" srcset="static/logo-gh.jpg">
    <source media="(prefers-color-scheme: light)" srcset="static/logo-gh.jpg">
    <img alt="mcp use logo" src="./static/logo-gh.jpg" width="80%" style="margin: 20px auto;">
  </picture>
</div>

<div align="center">
  <h2>🎉 <strong>We're LIVE on Product Hunt!</strong> 🎉</h2>
  <p><strong>Support us today and help us reach #1!</strong></p>
  <a href="https://www.producthunt.com/products/mcp-use?embed=true&utm_source=badge-featured&utm_medium=badge&utm_source=badge-mcp&#0045;use" target="_blank"><img src="https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=1002629&theme=neutral&t=1754609432704" alt="mcp&#0045;use - Open&#0032;source&#0032;SDK&#0032;and&#0032;infra&#0032;for&#0032;MCP&#0032;servers&#0032;&#0038;&#0032;agents | Product Hunt" style="width: 220px; height: 54px;" width="250" height="54" /></a>
  <p>👆 <em>Click to upvote and leave a comment!</em></p>
</div>

<h1 align="center">🚀 Create MCP Clients and Agents</h1>
<p align="center">
    <a href="https://github.com/pietrozullo/mcp-use/stargazers" alt="GitHub stars">
        <img src="https://img.shields.io/github/stars/pietrozullo/mcp-use?style=social" /></a>
    <a href="https://pypi.org/project/mcp_use/" alt="PyPI Downloads">
        <img src="https://static.pepy.tech/badge/mcp-use" /></a>
    <a href="https://pypi.org/project/mcp_use/" alt="PyPI Version">
        <img src="https://img.shields.io/pypi/v/mcp_use.svg"/></a>
    <a href="https://github.com/mcp-use/mcp-use-ts" alt="TypeScript">
      <img src="https://img.shields.io/badge/TypeScript-mcp--use-3178C6?logo=typescript&logoColor=white" /></a>
    <a href="https://github.com/pietrozullo/mcp-use/blob/main/LICENSE" alt="License">
        <img src="https://img.shields.io/github/license/pietrozullo/mcp-use" /></a>
    <a href="https://docs.mcp-use.com" alt="Documentation">
        <img src="https://img.shields.io/badge/docs-mcp--use.com-blue" /></a>
    <a href="https://mcp-use.com" alt="Website">
        <img src="https://img.shields.io/badge/website-mcp--use.com-blue" /></a>
    </p>
    <p align="center">
    <a href="https://x.com/pietrozullo" alt="Twitter Follow - Pietro">
        <img src="https://img.shields.io/twitter/follow/Pietro?style=social" /></a>
    <a href="https://x.com/pederzh" alt="Twitter Follow - Luigi">
        <img src="https://img.shields.io/twitter/follow/Luigi?style=social" /></a>
    <a href="https://discord.gg/XkNkSkMz3V" alt="Discord">
        <img src="https://dcbadge.limes.pink/api/server/XkNkSkMz3V?style=flat" /></a>
</p>
</div>

🌐 MCP-Use is the open source way to connect **any LLM to any MCP server** and build custom MCP agents that have tool access, without using closed source or application clients.

💡 Let developers easily connect any LLM to tools like web browsing, file operations, and more.

- If you want to get started quickly check out [mcp-use.com website](https://mcp-use.com/) to build and deploy agents with your favorite MCP servers.
- Visit the [mcp-use docs](https://docs.mcp-use.com/) to get started with mcp-use library
- For the TypeScript version, visit [mcp-use-ts](https://github.com/mcp-use/mcp-use-ts)

| Supports       ||
| :------------- ||
| **Primitives** | [![Tools](https://img.shields.io/github/actions/workflow/status/pietrozullo/mcp-use/tests.yml?job=primitive-tools&label=Tools&style=flat)](https://github.com/pietrozullo/mcp-use/actions/workflows/tests.yml) [![Resources](https://img.shields.io/github/actions/workflow/status/pietrozullo/mcp-use/tests.yml?job=primitive-resources&label=Resources&style=flat)](https://github.com/pietrozullo/mcp-use/actions/workflows/tests.yml) [![Prompts](https://img.shields.io/github/actions/workflow/status/pietrozullo/mcp-use/tests.yml?job=primitive-prompts&label=Prompts&style=flat)](https://github.com/pietrozullo/mcp-use/actions/workflows/tests.yml) [![Sampling](https://img.shields.io/github/actions/workflow/status/pietrozullo/mcp-use/tests.yml?job=primitive-sampling&label=Sampling&style=flat)](https://github.com/pietrozullo/mcp-use/actions/workflows/tests.yml) [![Elicitation](https://img.shields.io/github/actions/workflow/status/pietrozullo/mcp-use/tests.yml?job=primitive-elicitation&label=Elicitation&style=flat)](https://github.com/pietrozullo/mcp-use/actions/workflows/tests.yml) |
| **Transports** | [![Stdio](https://img.shields.io/github/actions/workflow/status/pietrozullo/mcp-use/tests.yml?job=transport-stdio&label=Stdio&style=flat)](https://github.com/pietrozullo/mcp-use/actions/workflows/tests.yml) [![SSE](https://img.shields.io/github/actions/workflow/status/pietrozullo/mcp-use/tests.yml?job=transport-sse&label=SSE&style=flat)](https://github.com/pietrozullo/mcp-use/actions/workflows/tests.yml) [![Streamable HTTP](https://img.shields.io/github/actions/workflow/status/pietrozullo/mcp-use/tests.yml?job=transport-streamableHttp&label=Streamable%20HTTP&style=flat)](https://github.com/pietrozullo/mcp-use/actions/workflows/tests.yml)                                                                                                                                                                                                                                                                                                                                                                                                                                                   |

## Features

<table>
  <tr>
    <th width="400">Feature</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>🔄 <a href="#quick-start"><strong>Ease of use</strong></a></td>
    <td>Create your first MCP capable agent you need only 6 lines of code</td>
  </tr>
  <tr>
    <td>🤖 <a href="#installing-langchain-providers"><strong>LLM Flexibility</strong></a></td>
    <td>Works with any langchain supported LLM that supports tool calling (OpenAI, Anthropic, Groq, LLama etc.)</td>
  </tr>
  <tr>
    <td>🌐 <a href="https://mcp-use.com/builder"><strong>Code Builder</strong></a></td>
    <td>Explore MCP capabilities and generate starter code with the interactive <a href="https://mcp-use.com/builder">code builder</a>.</td>
  </tr>
  <tr>
    <td>🔗 <a href="#http-connection-example"><strong>HTTP Support</strong></a></td>
    <td>Direct connection to MCP servers running on specific HTTP ports</td>
  </tr>
  <tr>
    <td>⚙️ <a href="#dynamic-server-selection-server-manager"><strong>Dynamic Server Selection</strong></a></td>
    <td>Agents can dynamically choose the most appropriate MCP server for a given task from the available pool</td>
  </tr>
  <tr>
    <td>🧩 <a href="#multi-server-support"><strong>Multi-Server Support</strong></a></td>
    <td>Use multiple MCP servers simultaneously in a single agent</td>
  </tr>
  <tr>
    <td>🛡️ <a href="#tool-access-control"><strong>Tool Restrictions</strong></a></td>
    <td>Restrict potentially dangerous tools like file system or network access</td>
  </tr>
  <tr>
    <td>🔧 <a href="#build-a-custom-agent"><strong>Custom Agents</strong></a></td>
    <td>Build your own agents with any framework using the LangChain adapter or create new adapters</td>
  </tr>
  <tr>
    <td>❓ <a href="https://mcp-use.com/what-should-we-build-next"><strong>What should we build next</strong></a></td>
    <td>Let us know what you'd like us to build next</td>
  </tr>
</table>

# Quick start

With pip:

```bash
pip install mcp-use
```

Or install from source:

```bash
git clone https://github.com/mcp-use/mcp-use.git
cd mcp-use
pip install -e .
```

### Installing LangChain Providers

mcp_use works with various LLM providers through LangChain. You'll need to install the appropriate LangChain provider package for your chosen LLM. For example:

```bash
# For OpenAI
pip install langchain-openai

# For Anthropic
pip install langchain-anthropic
```

For other providers, check the [LangChain chat models documentation](https://python.langchain.com/docs/integrations/chat/) and add your API keys for the provider you want to use to your `.env` file.

```bash
OPENAI_API_KEY=
ANTHROPIC_API_KEY=
```

> **Important**: Only models with tool calling capabilities can be used with mcp_use. Make sure your chosen model supports function calling or tool use.

### Spin up your agent:

```python
import asyncio
import os
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from mcp_use import MCPAgent, MCPClient

async def main():
    # Load environment variables
    load_dotenv()

    # Create configuration dictionary
    config = {
      "mcpServers": {
        "playwright": {
          "command": "npx",
          "args": ["@playwright/mcp@latest"],
          "env": {
            "DISPLAY": ":1"
          }
        }
      }
    }

    # Create MCPClient from configuration dictionary
    client = MCPClient.from_dict(config)

    # Create LLM
    llm = ChatOpenAI(model="gpt-4o")

    # Create agent with the client
    agent = MCPAgent(llm=llm, client=client, max_steps=30)

    # Run the query
    result = await agent.run(
        "Find the best restaurant in San Francisco",
    )
    print(f"\nResult: {result}")

if __name__ == "__main__":
    asyncio.run(main())
```

You can also add the servers configuration from a config file like this:

```python
client = MCPClient.from_config_file(
        os.path.join("browser_mcp.json")
    )
```

Example configuration file (`browser_mcp.json`):

```json
{
  "mcpServers": {
    "playwright": {
      "command": "npx",
      "args": ["@playwright/mcp@latest"],
      "env": {
        "DISPLAY": ":1"
      }
    }
  }
}
```

For other settings, models, and more, check out the documentation.

## Streaming Agent Output

MCP-Use supports asynchronous streaming of agent output using the `astream` method on `MCPAgent`. This allows you to receive incremental results, tool actions, and intermediate steps as they are generated by the agent, enabling real-time feedback and progress reporting.

### How to use

Call `agent.astream(query)` and iterate over the results asynchronously:

```python
async for chunk in agent.astream("Find the best restaurant in San Francisco"):
    print(chunk["messages"], end="", flush=True)
```

Each chunk is a dictionary containing keys such as `actions`, `steps`, `messages`, and (on the last chunk) `output`. This enables you to build responsive UIs or log agent progress in real time.

#### Example: Streaming in Practice

```python
import asyncio
import os
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from mcp_use import MCPAgent, MCPClient

async def main():
    load_dotenv()
    client = MCPClient.from_config_file("browser_mcp.json")
    llm = ChatOpenAI(model="gpt-4o")
    agent = MCPAgent(llm=llm, client=client, max_steps=30)
    async for chunk in agent.astream("Look for job at nvidia for machine learning engineer."):
        print(chunk["messages"], end="", flush=True)

if __name__ == "__main__":
    asyncio.run(main())
```

This streaming interface is ideal for applications that require real-time updates, such as chatbots, dashboards, or interactive notebooks.

# Example Use Cases

## Web Browsing with Playwright

```python
import asyncio
import os
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from mcp_use import MCPAgent, MCPClient

async def main():
    # Load environment variables
    load_dotenv()

    # Create MCPClient from config file
    client = MCPClient.from_config_file(
        os.path.join(os.path.dirname(__file__), "browser_mcp.json")
    )

    # Create LLM
    llm = ChatOpenAI(model="gpt-4o")
    # Alternative models:
    # llm = ChatAnthropic(model="claude-3-5-sonnet-20240620")
    # llm = ChatGroq(model="llama3-8b-8192")

    # Create agent with the client
    agent = MCPAgent(llm=llm, client=client, max_steps=30)

    # Run the query
    result = await agent.run(
        "Find the best restaurant in San Francisco USING GOOGLE SEARCH",
        max_steps=30,
    )
    print(f"\nResult: {result}")

if __name__ == "__main__":
    asyncio.run(main())
```

## Airbnb Search

```python
import asyncio
import os
from dotenv import load_dotenv
from langchain_anthropic import ChatAnthropic
from mcp_use import MCPAgent, MCPClient

async def run_airbnb_example():
    # Load environment variables
    load_dotenv()

    # Create MCPClient with Airbnb configuration
    client = MCPClient.from_config_file(
        os.path.join(os.path.dirname(__file__), "airbnb_mcp.json")
    )

    # Create LLM - you can choose between different models
    llm = ChatAnthropic(model="claude-3-5-sonnet-20240620")

    # Create agent with the client
    agent = MCPAgent(llm=llm, client=client, max_steps=30)

    try:
        # Run a query to search for accommodations
        result = await agent.run(
            "Find me a nice place to stay in Barcelona for 2 adults "
            "for a week in August. I prefer places with a pool and "
            "good reviews. Show me the top 3 options.",
            max_steps=30,
        )
        print(f"\nResult: {result}")
    finally:
        # Ensure we clean up resources properly
        if client.sessions:
            await client.close_all_sessions()

if __name__ == "__main__":
    asyncio.run(run_airbnb_example())
```

Example configuration file (`airbnb_mcp.json`):

```json
{
  "mcpServers": {
    "airbnb": {
      "command": "npx",
      "args": ["-y", "@openbnb/mcp-server-airbnb"]
    }
  }
}
```

## Blender 3D Creation

```python
import asyncio
from dotenv import load_dotenv
from langchain_anthropic import ChatAnthropic
from mcp_use import MCPAgent, MCPClient

async def run_blender_example():
    # Load environment variables
    load_dotenv()

    # Create MCPClient with Blender MCP configuration
    config = {"mcpServers": {"blender": {"command": "uvx", "args": ["blender-mcp"]}}}
    client = MCPClient.from_dict(config)

    # Create LLM
    llm = ChatAnthropic(model="claude-3-5-sonnet-20240620")

    # Create agent with the client
    agent = MCPAgent(llm=llm, client=client, max_steps=30)

    try:
        # Run the query
        result = await agent.run(
            "Create an inflatable cube with soft material and a plane as ground.",
            max_steps=30,
        )
        print(f"\nResult: {result}")
    finally:
        # Ensure we clean up resources properly
        if client.sessions:
            await client.close_all_sessions()

if __name__ == "__main__":
    asyncio.run(run_blender_example())
```

# Configuration Support

## HTTP Connection Example

MCP-Use supports HTTP connections, allowing you to connect to MCP servers running on specific HTTP ports. This feature is particularly useful for integrating with web-based MCP servers.

Here's an example of how to use the HTTP connection feature:

```python
import asyncio
import os
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from mcp_use import MCPAgent, MCPClient

async def main():
    """Run the example using a configuration file."""
    # Load environment variables
    load_dotenv()

    config = {
        "mcpServers": {
            "http": {
                "url": "http://localhost:8931/sse"
            }
        }
    }

    # Create MCPClient from config file
    client = MCPClient.from_dict(config)

    # Create LLM
    llm = ChatOpenAI(model="gpt-4o")

    # Create agent with the client
    agent = MCPAgent(llm=llm, client=client, max_steps=30)

    # Run the query
    result = await agent.run(
        "Find the best restaurant in San Francisco USING GOOGLE SEARCH",
        max_steps=30,
    )
    print(f"\nResult: {result}")

if __name__ == "__main__":
    # Run the appropriate example
    asyncio.run(main())
```

This example demonstrates how to connect to an MCP server running on a specific HTTP port. Make sure to start your MCP server before running this example.

# Multi-Server Support

MCP-Use allows configuring and connecting to multiple MCP servers simultaneously using the `MCPClient`. This enables complex workflows that require tools from different servers, such as web browsing combined with file operations or 3D modeling.

## Configuration

You can configure multiple servers in your configuration file:

```json
{
  "mcpServers": {
    "airbnb": {
      "command": "npx",
      "args": ["-y", "@openbnb/mcp-server-airbnb", "--ignore-robots-txt"]
    },
    "playwright": {
      "command": "npx",
      "args": ["@playwright/mcp@latest"],
      "env": {
        "DISPLAY": ":1"
      }
    }
  }
}
```

## Usage

The `MCPClient` class provides methods for managing connections to multiple servers. When creating an `MCPAgent`, you can provide an `MCPClient` configured with multiple servers.

By default, the agent will have access to tools from all configured servers. If you need to target a specific server for a particular task, you can specify the `server_name` when calling the `agent.run()` method.

```python
# Example: Manually selecting a server for a specific task
result = await agent.run(
    "Search for Airbnb listings in Barcelona",
    server_name="airbnb" # Explicitly use the airbnb server
)

result_google = await agent.run(
    "Find restaurants near the first result using Google Search",
    server_name="playwright" # Explicitly use the playwright server
)
```

## Dynamic Server Selection (Server Manager)

For enhanced efficiency and to reduce potential agent confusion when dealing with many tools from different servers, you can enable the Server Manager by setting `use_server_manager=True` during `MCPAgent` initialization.

When enabled, the agent intelligently selects the correct MCP server based on the tool chosen by the LLM for a specific step. This minimizes unnecessary connections and ensures the agent uses the appropriate tools for the task.

```python
import asyncio
from mcp_use import MCPClient, MCPAgent
from langchain_anthropic import ChatAnthropic

async def main():
    # Create client with multiple servers
    client = MCPClient.from_config_file("multi_server_config.json")

    # Create agent with the client
    agent = MCPAgent(
        llm=ChatAnthropic(model="claude-3-5-sonnet-20240620"),
        client=client,
        use_server_manager=True  # Enable the Server Manager
    )

    try:
        # Run a query that uses tools from multiple servers
        result = await agent.run(
            "Search for a nice place to stay in Barcelona on Airbnb, "
            "then use Google to find nearby restaurants and attractions."
        )
        print(result)
    finally:
        # Clean up all sessions
        await client.close_all_sessions()

if __name__ == "__main__":
    asyncio.run(main())
```

# Tool Access Control

MCP-Use allows you to restrict which tools are available to the agent, providing better security and control over agent capabilities:

```python
import asyncio
from mcp_use import MCPAgent, MCPClient
from langchain_openai import ChatOpenAI

async def main():
    # Create client
    client = MCPClient.from_config_file("config.json")

    # Create agent with restricted tools
    agent = MCPAgent(
        llm=ChatOpenAI(model="gpt-4"),
        client=client,
        disallowed_tools=["file_system", "network"]  # Restrict potentially dangerous tools
    )

    # Run a query with restricted tool access
    result = await agent.run(
        "Find the best restaurant in San Francisco"
    )
    print(result)

    # Clean up
    await client.close_all_sessions()

if __name__ == "__main__":
    asyncio.run(main())
```

# Sandboxed Execution

MCP-Use supports running MCP servers in a sandboxed environment using E2B's cloud infrastructure. This allows you to run MCP servers without having to install dependencies locally, making it easier to use tools that might have complex setups or system requirements.

## Installation

To use sandboxed execution, you need to install the E2B dependency:

```bash
# Install mcp-use with E2B support
pip install "mcp-use[e2b]"

# Or install the dependency directly
pip install e2b-code-interpreter
```

You'll also need an E2B API key. You can sign up at [e2b.dev](https://e2b.dev) to get your API key.

## Configuration

To enable sandboxed execution, use the sandbox parameter when creating your `MCPClient`:

```python
import asyncio
import os
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from mcp_use import MCPAgent, MCPClient
from mcp_use.types.sandbox import SandboxOptions

async def main():
    # Load environment variables (needs E2B_API_KEY)
    load_dotenv()

    # Define MCP server configuration
    server_config = {
        "mcpServers": {
            "everything": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-everything"],
            }
        }
    }

    # Define sandbox options
    sandbox_options: SandboxOptions = {
        "api_key": os.getenv("E2B_API_KEY"),  # API key can also be provided directly
        "sandbox_template_id": "base",  # Use base template
    }

    # Create client with sandboxed mode enabled
    client = MCPClient(
        config=server_config,
        sandbox=True,
        sandbox_options=sandbox_options,

    )

    # Create agent with the sandboxed client
    llm = ChatOpenAI(model="gpt-4o")
    agent = MCPAgent(llm=llm, client=client)

    # Run your agent
    result = await agent.run("Use the command line tools to help me add 1+1")
    print(result)

    # Clean up
    await client.close_all_sessions()

if __name__ == "__main__":
    asyncio.run(main())
```

## Sandbox Options

The `SandboxOptions` type provides configuration for the sandbox environment:

| Option                 | Description                                                                              | Default               |
| ---------------------- | ---------------------------------------------------------------------------------------- | --------------------- |
| `api_key`              | E2B API key. Required - can be provided directly or via E2B_API_KEY environment variable | None                  |
| `sandbox_template_id`  | Template ID for the sandbox environment                                                  | "base"                |
| `supergateway_command` | Command to run supergateway                                                              | "npx -y supergateway" |

## Benefits of Sandboxed Execution

- **No local dependencies**: Run MCP servers without installing dependencies locally
- **Isolation**: Execute code in a secure, isolated environment
- **Consistent environment**: Ensure consistent behavior across different systems
- **Resource efficiency**: Offload resource-intensive tasks to cloud infrastructure

# Direct Tool Calls (Without LLM)

You can call MCP server tools directly without an LLM when you need programmatic control:

```python
import asyncio
from mcp_use import MCPClient

async def call_tool_example():
    config = {
        "mcpServers": {
            "everything": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-everything"],
            }
        }
    }

    client = MCPClient.from_dict(config)

    try:
        await client.create_all_sessions()
        session = client.get_session("everything")

        # Call tool directly
        result = await session.call_tool(
            name="add",
            arguments={"a": 1, "b": 2}
        )

        print(f"Result: {result.content[0].text}")  # Output: 3

    finally:
        await client.close_all_sessions()

if __name__ == "__main__":
    asyncio.run(call_tool_example())
```

See the complete example: [examples/direct_tool_call.py](examples/direct_tool_call.py)

# Build a Custom Agent:

You can also build your own custom agent using the LangChain adapter:

```python
import asyncio
from langchain_openai import ChatOpenAI
from mcp_use.client import MCPClient
from mcp_use.adapters.langchain_adapter import LangChainAdapter
from dotenv import load_dotenv

load_dotenv()


async def main():
    # Initialize MCP client
    client = MCPClient.from_config_file("examples/browser_mcp.json")
    llm = ChatOpenAI(model="gpt-4o")

    # Create adapter instance
    adapter = LangChainAdapter()
    # Get LangChain tools with a single line
    tools = await adapter.create_tools(client)

    # Create a custom LangChain agent
    llm_with_tools = llm.bind_tools(tools)
    result = await llm_with_tools.ainvoke("What tools do you have available ? ")
    print(result)


if __name__ == "__main__":
    asyncio.run(main())


```

# Debugging

MCP-Use provides a built-in debug mode that increases log verbosity and helps diagnose issues in your agent implementation.

## Enabling Debug Mode

There are two primary ways to enable debug mode:

### 1. Environment Variable (Recommended for One-off Runs)

Run your script with the `DEBUG` environment variable set to the desired level:

```bash
# Level 1: Show INFO level messages
DEBUG=1 python3.11 examples/browser_use.py

# Level 2: Show DEBUG level messages (full verbose output)
DEBUG=2 python3.11 examples/browser_use.py
```

This sets the debug level only for the duration of that specific Python process.

Alternatively you can set the following environment variable to the desired logging level:

```bash
export MCP_USE_DEBUG=1 # or 2
```

### 2. Setting the Debug Flag Programmatically

You can set the global debug flag directly in your code:

```python
import mcp_use

mcp_use.set_debug(1)  # INFO level
# or
mcp_use.set_debug(2)  # DEBUG level (full verbose output)
```

### 3. Agent-Specific Verbosity

If you only want to see debug information from the agent without enabling full debug logging, you can set the `verbose` parameter when creating an MCPAgent:

```python
# Create agent with increased verbosity
agent = MCPAgent(
    llm=your_llm,
    client=your_client,
    verbose=True  # Only shows debug messages from the agent
)
```

This is useful when you only need to see the agent's steps and decision-making process without all the low-level debug information from other components.

## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=pietrozullo/mcp-use&type=Date)](https://www.star-history.com/#pietrozullo/mcp-use&Date)

# Contributing

We love contributions! Feel free to open issues for bugs or feature requests. Look at [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines.

## Contributors

Thanks to all our amazing contributors!

<a href="https://github.com/mcp-use/mcp-use/graphs/contributors">
  <img src="https://contrib.rocks/image?repo=mcp-use/mcp-use" />
</a>

## Top Starred Dependents

<!-- gh-dependents-info-used-by-start -->

<table>
  <tr>
    <th width="400">Repository</th>
    <th>Stars</th>
  </tr>
  <tr>
    <td><img src="https://avatars.githubusercontent.com/u/38653995?s=40&v=4" width="20" height="20" style="vertical-align: middle; margin-right: 8px;"> <a href="https://github.com/patchy631/ai-engineering-hub"><strong>patchy631/ai-engineering-hub</strong></a></td>
    <td>⭐ 17384</td>
  </tr>
  <tr>
    <td><img src="https://avatars.githubusercontent.com/u/170207473?s=40&v=4" width="20" height="20" style="vertical-align: middle; margin-right: 8px;"> <a href="https://github.com/tavily-ai/meeting-prep-agent"><strong>tavily-ai/meeting-prep-agent</strong></a></td>
    <td>⭐ 131</td>
  </tr>
  <tr>
    <td><img src="https://avatars.githubusercontent.com/u/164294848?s=40&v=4" width="20" height="20" style="vertical-align: middle; margin-right: 8px;"> <a href="https://github.com/buildfastwithai/gen-ai-experiments"><strong>buildfastwithai/gen-ai-experiments</strong></a></td>
    <td>⭐ 100</td>
  </tr>
  <tr>
    <td><img src="https://avatars.githubusercontent.com/u/187057607?s=40&v=4" width="20" height="20" style="vertical-align: middle; margin-right: 8px;"> <a href="https://github.com/hud-evals/hud-python"><strong>hud-evals/hud-python</strong></a></td>
    <td>⭐ 78</td>
  </tr>
  <tr>
    <td><img src="https://avatars.githubusercontent.com/u/20041231?s=40&v=4" width="20" height="20" style="vertical-align: middle; margin-right: 8px;"> <a href="https://github.com/krishnaik06/MCP-CRASH-Course"><strong>krishnaik06/MCP-CRASH-Course</strong></a></td>
    <td>⭐ 64</td>
  </tr>
  <tr>
    <td><img src="https://avatars.githubusercontent.com/u/54944174?s=40&v=4" width="20" height="20" style="vertical-align: middle; margin-right: 8px;"> <a href="https://github.com/larksuite/lark-samples"><strong>larksuite/lark-samples</strong></a></td>
    <td>⭐ 35</td>
  </tr>
  <tr>
    <td><img src="https://avatars.githubusercontent.com/u/892404?s=40&v=4" width="20" height="20" style="vertical-align: middle; margin-right: 8px;"> <a href="https://github.com/truemagic-coder/solana-agent-app"><strong>truemagic-coder/solana-agent-app</strong></a></td>
    <td>⭐ 30</td>
  </tr>
  <tr>
    <td><img src="https://avatars.githubusercontent.com/u/8344498?s=40&v=4" width="20" height="20" style="vertical-align: middle; margin-right: 8px;"> <a href="https://github.com/schogini/techietalksai"><strong>schogini/techietalksai</strong></a></td>
    <td>⭐ 24</td>
  </tr>
  <tr>
    <td><img src="https://avatars.githubusercontent.com/u/201161342?s=40&v=4" width="20" height="20" style="vertical-align: middle; margin-right: 8px;"> <a href="https://github.com/autometa-dev/whatsapp-mcp-voice-agent"><strong>autometa-dev/whatsapp-mcp-voice-agent</strong></a></td>
    <td>⭐ 23</td>
  </tr>
  <tr>
    <td><img src="https://avatars.githubusercontent.com/u/100749943?s=40&v=4" width="20" height="20" style="vertical-align: middle; margin-right: 8px;"> <a href="https://github.com/Deniscartin/mcp-cli"><strong>Deniscartin/mcp-cli</strong></a></td>
    <td>⭐ 19</td>
  </tr>
</table>

<!-- gh-dependents-info-used-by-end -->

# Requirements

- Python 3.11+
- MCP implementation (like Playwright MCP)
- LangChain and appropriate model libraries (OpenAI, Anthropic, etc.)

# License

MIT

# Citation

If you use MCP-Use in your research or project, please cite:

```bibtex
@software{mcp_use2025,
  author = {Zullo, Pietro},
  title = {MCP-Use: MCP Library for Python},
  year = {2025},
  publisher = {GitHub},
  url = {https://github.com/pietrozullo/mcp-use}
}
```

<img referrerpolicy="no-referrer-when-downgrade" src="https://static.scarf.sh/a.png?x-pxid=732589b6-6850-4b8c-aa25-906c0979e426&page=README.md" />



================================================
FILE: CHANGELOG.md
================================================
[Empty file]


================================================
FILE: CLAUDE.md
================================================
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview

**mcp-use** is a unified MCP (Model Context Protocol) client library that enables any LLM to connect to MCP servers and build custom agents with tool access. The library provides a high-level Python interface for connecting LangChain-compatible LLMs to MCP tools like web browsing, file operations, and more.

## Development Commands

### Setup

```bash
# Activate virtual environment (if it exists)
source env/bin/activate

# Create virtual environment if it doesn't exist
# python -m venv env && source env/bin/activate

# Install for development
pip install -e ".[dev,search]"

# Install with optional dependencies
pip install -e ".[dev,anthropic,openai,e2b,search]"
```

### Code Quality

```bash
# Run linting and formatting
ruff check --fix
ruff format

# Run type checking
mypy mcp_use/

# Run pre-commit hooks
pre-commit run --all-files
```

### Testing

```bash
# Run all tests
pytest

# Run specific test types
pytest tests/unit/          # Unit tests only
pytest tests/integration/   # Integration tests only

# Run with coverage
pytest --cov=mcp_use --cov-report=html

# Run specific test file
pytest tests/unit/test_client.py

# Run with debug output
DEBUG=2 pytest tests/unit/test_client.py -v -s
```

### Local Development

```bash
# Debug mode environment variable
export DEBUG=1  # INFO level
export DEBUG=2  # DEBUG level (full verbose)

# Or set MCP_USE_DEBUG
export MCP_USE_DEBUG=2
```

## Architecture Overview

### Core Components

**MCPClient** (`mcp_use/client.py`)

- Main entry point for MCP server management
- Handles configuration loading from files or dictionaries
- Manages multiple MCP server sessions
- Supports sandboxed execution via E2B

**MCPAgent** (`mcp_use/agents/mcpagent.py`)

- High-level agent interface using LangChain's agent framework
- Integrates LLMs with MCP tools
- Supports streaming responses and conversation memory
- Can use ServerManager for dynamic server selection

**MCPSession** (`mcp_use/session.py`)

- Manages individual MCP server connections
- Handles tool discovery and resource management
- Maintains connection state and lifecycle

**Connectors** (`mcp_use/connectors/`)

- Abstraction layer for different MCP transport protocols
- `StdioConnector`: Process-based MCP servers
- `HttpConnector`: HTTP-based MCP servers
- `WebSocketConnector`: WebSocket-based MCP servers
- `SandboxConnector`: E2B sandboxed execution

**ServerManager** (`mcp_use/managers/server_manager.py`)

- Provides dynamic server selection capabilities
- Allows agents to choose appropriate servers for tasks
- Manages server tool discovery and activation

### Key Patterns

**Configuration-Driven Design**: Servers are configured via JSON files or dictionaries with `mcpServers` key containing server definitions.

**Async/Await**: All I/O operations are asynchronous using asyncio patterns.

**LangChain Integration**: Tools are converted to LangChain format via adapters, enabling use with any LangChain-compatible LLM.

**Multi-Transport Support**: Supports stdio, HTTP, WebSocket, and sandboxed connections to MCP servers.

**Telemetry**: Built-in telemetry using PostHog and Scarf.sh for usage analytics (can be disabled).

## Configuration Examples

### Basic Server Configuration

```json
{
  "mcpServers": {
    "playwright": {
      "command": "npx",
      "args": ["@playwright/mcp@latest"],
      "env": { "DISPLAY": ":1" }
    }
  }
}
```

### HTTP Server Configuration

```json
{
  "mcpServers": {
    "http_server": {
      "url": "http://localhost:8931/sse"
    }
  }
}
```

### Multi-Server Configuration

```json
{
  "mcpServers": {
    "playwright": {
      "command": "npx",
      "args": ["@playwright/mcp@latest"]
    },
    "airbnb": {
      "command": "npx",
      "args": ["-y", "@openbnb/mcp-server-airbnb"]
    }
  }
}
```

## Code Style and Standards

- **Line Length**: 200 characters (configured in ruff.toml)
- **Python Version**: 3.11+ required
- **Formatting**: Use Ruff for formatting and linting
- **Type Hints**: All public APIs should have type hints
- **Async Patterns**: Use async/await consistently for I/O operations
- **Error Handling**: Proper exception handling with logging
- **Documentation**: Docstrings follow Google style

## Testing Strategy

### Unit Tests (`tests/unit/`)

- Test individual components in isolation
- Mock external dependencies
- Focus on business logic and edge cases

### Integration Tests (`tests/integration/`)

- Test component interactions
- Include real MCP server integrations
- Organized by transport type (stdio, sse, websocket, etc.)
- Custom test servers in `tests/integration/servers_for_testing/`

### Test Configuration

- Uses pytest with asyncio mode
- Fixtures defined in `conftest.py`
- Test servers provide controlled MCP environments

## Important Development Notes

- **Environment Setup**: Requires Python 3.11+ and appropriate LangChain provider packages
- **MCP Protocol**: Built on Model Context Protocol specification
- **LangChain Compatibility**: Only models with tool calling capabilities are supported
- **Resource Management**: Always properly close sessions to avoid resource leaks
- **Debugging**: Use DEBUG environment variable or `mcp_use.set_debug()` for verbose logging
- **Memory Management**: MCPAgent supports conversation memory for context retention
- **Security**: Tool access can be restricted via `disallowed_tools` parameter

## Common Development Tasks

### Adding a New Connector

1. Extend `BaseConnector` in `mcp_use/connectors/`
2. Implement required async methods
3. Add connector to factory in `config.py`
4. Write integration tests

### Adding New Agent Features

1. Modify `MCPAgent` class in `mcp_use/agents/mcpagent.py`
2. Update system prompt templates if needed
3. Add comprehensive tests
4. Update documentation

### Testing with Custom MCP Servers

1. Create test server in `tests/integration/servers_for_testing/`
2. Add integration test in appropriate transport directory
3. Use custom servers for controlled testing scenarios



================================================
FILE: CODE_OF_CONDUCT.md
================================================
# Contributor Covenant Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, religion, or sexual identity
and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.

## Our Standards

Examples of behavior that contributes to a positive environment for our
community include:

* Demonstrating empathy and kindness toward other people
* Being respectful of differing opinions, viewpoints, and experiences
* Giving and gracefully accepting constructive feedback
* Accepting responsibility and apologizing to those affected by our mistakes,
  and learning from the experience
* Focusing on what is best not just for us as individuals, but for the
  overall community

Examples of unacceptable behavior include:

* The use of sexualized language or imagery, and sexual attention or
  advances of any kind
* Trolling, insulting or derogatory comments, and personal or political attacks
* Public or private harassment
* Publishing others' private information, such as a physical or email
  address, without their explicit permission
* Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Enforcement Responsibilities

Community leaders are responsible for clarifying and enforcing our standards of
acceptable behavior and will take appropriate and fair corrective action in
response to any behavior that they deem inappropriate, threatening, offensive,
or harmful.

Community leaders have the right and responsibility to remove, edit, or reject
comments, commits, code, wiki edits, issues, and other contributions that are
not aligned to this Code of Conduct, and will communicate reasons for moderation
decisions when appropriate.

## Scope

This Code of Conduct applies within all community spaces, and also applies when
an individual is officially representing the community in public spaces.
Examples of representing our community include using an official e-mail address,
posting via an official social media account, or acting as an appointed
representative at an online or offline event.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported to the community leaders responsible for enforcement at
dev@mcp-use.com.
All complaints will be reviewed and investigated promptly and fairly.

All community leaders are obligated to respect the privacy and security of the
reporter of any incident.

## Enforcement Guidelines

Community leaders will follow these Community Impact Guidelines in determining
the consequences for any action they deem in violation of this Code of Conduct:

### 1. Correction

**Community Impact**: Use of inappropriate language or other behavior deemed
unprofessional or unwelcome in the community.

**Consequence**: A private, written warning from community leaders, providing
clarity around the nature of the violation and an explanation of why the
behavior was inappropriate. A public apology may be requested.

### 2. Warning

**Community Impact**: A violation through a single incident or series
of actions.

**Consequence**: A warning with consequences for continued behavior. No
interaction with the people involved, including unsolicited interaction with
those enforcing the Code of Conduct, for a specified period of time. This
includes avoiding interactions in community spaces as well as external channels
like social media. Violating these terms may lead to a temporary or
permanent ban.

### 3. Temporary Ban

**Community Impact**: A serious violation of community standards, including
sustained inappropriate behavior.

**Consequence**: A temporary ban from any sort of interaction or public
communication with the community for a specified period of time. No public or
private interaction with the people involved, including unsolicited interaction
with those enforcing the Code of Conduct, is allowed during this period.
Violating these terms may lead to a permanent ban.

### 4. Permanent Ban

**Community Impact**: Demonstrating a pattern of violation of community
standards, including sustained inappropriate behavior,  harassment of an
individual, or aggression toward or disparagement of classes of individuals.

**Consequence**: A permanent ban from any sort of public interaction within
the community.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage],
version 2.0, available at
https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.

Community Impact Guidelines were inspired by [Mozilla's code of conduct
enforcement ladder](https://github.com/mozilla/diversity).

[homepage]: https://www.contributor-covenant.org

For answers to common questions about this code of conduct, see the FAQ at
https://www.contributor-covenant.org/faq. Translations are available at
https://www.contributor-covenant.org/translations.



================================================
FILE: CONTRIBUTING.md
================================================
# Contributing to MCP-Use

Thank you for your interest in contributing to MCP-Use! This document provides guidelines and instructions for contributing to this project.

## Table of Contents

- [Getting Started](#getting-started)
  - [Development Environment](#development-environment)
  - [Installation from Source](#installation-from-source)
- [Development Workflow](#development-workflow)
  - [Branching Strategy](#branching-strategy)
  - [Commit Messages](#commit-messages)
  - [Code Style](#code-style)
  - [Pre-commit Hooks](#pre-commit-hooks)
- [Testing](#testing)
  - [Running Tests](#running-tests)
  - [Adding Tests](#adding-tests)
- [Pull Requests](#pull-requests)
  - [Creating a Pull Request](#creating-a-pull-request)
  - [Pull Request Template](#pull-request-template)
- [Documentation](#documentation)
- [Release Process](#release-process)
- [Getting Help](#getting-help)

## Getting Started

### Development Environment

MCP-Use requires:
- Python 3.11 or later

### Installation from Source

1. Fork the repository on GitHub.
2. Clone your fork locally:
   ```bash
   git clone https://github.com/YOUR_USERNAME/mcp-use.git
   cd mcp-use
   ```
3. Install the package in development mode:
   ```bash
   pip install -e ".[dev,search,e2b]"
   ```
4. Set up pre-commit hooks:
   ```bash
   pip install pre-commit
   pre-commit install
   ```

## Development Workflow

### Branching Strategy

- `main` branch contains the latest stable code
- Create feature branches from `main` named according to the feature you're implementing: `feature/your-feature-name`
- For bug fixes, use: `fix/bug-description`

### Commit Messages

For now no commit style is enforced, try to keep your commit messages informational.
### Code Style

We use [Ruff](https://github.com/astral-sh/ruff) for code formatting and linting. The configuration is in `ruff.toml`.

Key style guidelines:
- Line length: 100 characters
- Use double quotes for strings
- Follow PEP 8 naming conventions
- Add type hints to function signatures

### Pre-commit Hooks

We use pre-commit hooks to ensure code quality before committing. The configuration is in `.pre-commit-config.yaml`.

The hooks will:
- Format code using Ruff
- Run linting checks
- Check for trailing whitespace and fix it
- Ensure files end with a newline
- Validate YAML files
- Check for large files
- Remove debug statements

## Testing

### Running Tests

Run the test suite with pytest:

```bash
pytest
```

To run specific test categories:

```bash
pytest tests/
```

### Adding Tests

- Add unit tests for new functionality in `tests/unit/`
- For slow or network-dependent tests, mark them with `@pytest.mark.slow` or `@pytest.mark.integration`
- Aim for high test coverage of new code

## Pull Requests

### Creating a Pull Request

1. Ensure your code passes all tests and pre-commit hooks
2. Push your changes to your fork
3. Submit a pull request to the main repository
4. Follow the pull request template

## Documentation

- Update docstrings for new or modified functions, classes, and methods
- Use Google-style docstrings:
  ```python
  def function_name(param1: type, param2: type) -> return_type:
      """Short description.

      Longer description if needed.

      Args:
          param1: Description of param1
          param2: Description of param2

      Returns:
          Description of return value

      Raises:
          ExceptionType: When and why this exception is raised
      """
  ```
- Update README.md for user-facing changes

## Getting Help

If you need help with your contribution:

- Open an issue for discussion
- Reach out to the maintainers
- Check existing code for examples

Thank you for contributing to MCP-Use!



================================================
FILE: LICENSE
================================================
MIT License

Copyright (c) 2025 pietrozullo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: pyproject.toml
================================================
[project]
name = "mcp-use"
version = "1.3.10"
description = "MCP Library for LLMs"
authors = [
    {name = "Pietro Zullo", email = "pietro.zullo@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "mcp>=1.10.0",
    "langchain>=0.1.0",
    "websockets>=12.0",
    "aiohttp>=3.9.0",
    "pydantic>=2.0.0",
    "jsonschema-pydantic>=0.1.0",
    "python-dotenv>=1.0.0",
    "posthog>=4.8.0",
    "scarf-sdk>=0.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
    "fastmcp==2.10.5",
    "fastapi",
]
anthropic = [
    "langchain_anthropic",
]
openai = [
    "langchain_openai",
]
search = [
    "fastembed>=0.0.1",
]
e2b = [
    "e2b-code-interpreter>=1.5.0",
]

[project.scripts]
mcp-use = "mcp_use.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"



================================================
FILE: pytest.ini
================================================
[pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
asyncio_mode = auto



================================================
FILE: ruff.toml
================================================
line-length = 120
target-version = "py311"

[lint]
select = [
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "W",  # pycodestyle warnings
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]

[lint.per-file-ignores]
"__init__.py" = ["F401"]  # Unused imports
"tests/**/*.py" = ["F811", "F401", "B017"]  # Redefinition in test files
"mcp_use/connectors/websocket.py" = ["C901"]  # Function too complex

[lint.isort]
known-first-party = ["mcp_use"]

[format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"



================================================
FILE: .env.example
================================================
# =============================================================================
# MCP-Use Environment Configuration
# =============================================================================
# Copy this file to .env and fill in your actual values
# The .env file is already in .gitignore and won't be committed

# =============================================================================
# Observability - Optional but recommended for debugging and monitoring
# =============================================================================

# Langfuse Configuration (https://langfuse.com)
# Sign up at https://cloud.langfuse.com or self-host
LANGFUSE_PUBLIC_KEY=pk-lf-your-public-key-here
LANGFUSE_SECRET_KEY=sk-lf-your-secret-key-here
# LANGFUSE_HOST=https://cloud.langfuse.com  # Default, uncomment for self-hosted

# Laminar Configuration (https://www.lmnr.ai)
# Sign up at https://www.lmnr.ai and get your project API key
LAMINAR_PROJECT_API_KEY=your-laminar-project-api-key-here

# =============================================================================
# LLM Provider API Keys
# =============================================================================

# OpenAI
OPENAI_API_KEY=sk-your-openai-api-key-here

# Anthropic
ANTHROPIC_API_KEY=sk-ant-your-anthropic-api-key-here

# Google (for Gemini)
GOOGLE_API_KEY=your-google-api-key-here

# Azure OpenAI
AZURE_OPENAI_API_KEY=your-azure-openai-key-here
AZURE_OPENAI_ENDPOINT=https://your-resource-name.openai.azure.com/

# =============================================================================
# Debug and Development
# =============================================================================

# MCP-Use Debug Level (1=INFO, 2=DEBUG)
DEBUG=1
# Alternative debug variable
MCP_USE_DEBUG=1

# Disable specific features (set to 'false' to disable)
# MCP_USE_LANGFUSE=false
# MCP_USE_LAMINAR=false
# MCP_USE_TELEMETRY=false

# =============================================================================
# MCP Server Specific Configuration
# =============================================================================

# E2B Sandbox (for sandboxed execution)
E2B_API_KEY=your-e2b-api-key-here

# Custom MCP server endpoints (if using HTTP/WebSocket servers)
# MCP_SERVER_URL=http://localhost:8080
# MCP_WEBSOCKET_URL=ws://localhost:8081



================================================
FILE: .pre-commit-config.yaml
================================================
repos:
-   repo: https://github.com/astral-sh/ruff-pre-commit
    # Ruff version.
    rev: v0.3.2
    hooks:
    -   id: ruff
        args: [--fix, --exit-non-zero-on-fix, --config=ruff.toml]
        types: [python]
    -   id: ruff-format
        args: [--config=ruff.toml]
        types: [python]

-   repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
    -   id: trailing-whitespace
    -   id: end-of-file-fixer
    -   id: check-yaml
    -   id: check-added-large-files
    -   id: debug-statements

# Define configuration for the Python checks
default_language_version:
    python: python3.11



================================================
FILE: docs/README.md
================================================
# Mintlify Starter Kit

Click on `Use this template` to copy the Mintlify starter kit. The starter kit contains examples including

- Guide pages
- Navigation
- Customizations
- API Reference pages
- Use of popular components

### Development

Install the [Mintlify CLI](https://www.npmjs.com/package/mintlify) to preview the documentation changes locally. To install, use the following command

```
npm i -g mintlify
```

Run the following command at the root of your documentation (where docs.json is)

```
mintlify dev
```

### Publishing Changes

Install our Github App to auto propagate changes from your repo to your deployment. Changes will be deployed to production automatically after pushing to the default branch. Find the link to install on your dashboard.

#### Troubleshooting

- Mintlify dev isn't running - Run `mintlify install` it'll re-install dependencies.
- Page loads as a 404 - Make sure you are running in a folder with `docs.json`



================================================
FILE: docs/changelog.mdx
================================================
---
title: "Library Updates"
description: "New updates and improvements"
mode: "center"
---

<Update label="2025‑06‑19">
  ## v1.3.3
  - Set default logging level to info
  - Fix: prevent double async cleanup and event loop errors in astream
  - Fix: Raise import error for fastembed, server manager does not silently fail
  - Fix: search tools tuple unpacking error
</Update>

<Update label="2025‑06‑10">
  ## v1.3.1
  - Remove client options for easier usage
  - Add streamable HTTP support
  - Fix websocket error positional arguments (headers were missing)
  - Fix connection state tracking after SSE disconnection
  - Add CLAUDE.md for development guidance
</Update>

<Update label="2025‑05‑27">
  ## v1.3.0
  - Added optional E2B sandbox execution so MCP servers can run in secure cloud sandboxes.
  - `MCPAgent.astream()` now lets you stream results **and** automatically log full conversation history.
</Update>


<Update label="2025‑05‑19">
  ## v1.2.13
  - Alpha support for **Resources** & **Prompts** exposed by remote servers.
  - Routine version bump and stability tweaks across task / connection managers.
</Update>

<Update label="2025‑05‑11">
  ## v1.2.10
  - Hot‑fix: patched **FastEmbed** import failure that could break vector search.
</Update>

<Update label="2025‑04‑11">
  ## v1.1.5
  - Maintenance release – internal refactors, doc clean‑ups, and incremental API polish.
</Update>

<Update label="2025‑04‑07">
  ## v1.0.1
  - Introduced HTTP transport layer and dynamic multi‑server selection.
</Update>

<Update label="2025‑04‑03">
  ## v1.0.0
  - First stable release of the unified Python client after the 0.0.x preview series.
</Update>

<Update label="2025‑04‑02">
  ## v0.0.6
  - Initial public preview published to PyPI; automated publish workflow enabled.
</Update>



================================================
FILE: docs/development.mdx
================================================
---
title: Development
description: "Contributing to mcp_use"
icon: "code"
---

# Development Guide

This guide will help you set up your development environment and contribute to mcp_use.

## Prerequisites

- Python 3.11 or higher
- Git
- Node.js and npm (for MCP server dependencies)

## Setting Up Development Environment

1. Clone the repository:

```bash
git clone https://github.com/mcp-use/mcp-use.git
cd mcp-use
```

2. Install development dependencies:

```bash
pip install -e ".[dev]"
```

3. Install pre-commit hooks:

```bash
pre-commit install
```

## Code Style

mcp_use uses Ruff for code formatting and linting. The project follows these style guidelines:

- Use type hints for all function parameters and return values
- Follow PEP 8 style guide
- Use docstrings for all public functions and classes
- Keep functions focused and single-purpose

## Running Tests

The project uses pytest for testing. To run the test suite:

```bash
pytest
```

For more specific test runs:

```bash
# Run tests with coverage
pytest --cov=mcp_use

# Run specific test file
pytest tests/test_client.py

# Run tests with verbose output
pytest -v
```

## Documentation

Documentation is written in MDX format and uses Mintlify for rendering. To preview documentation changes:

1. Install Mintlify CLI:

```bash
npm i -g mintlify
```

2. Run the development server:

```bash
mintlify dev
```

## Contributing

1. Create a new branch for your feature:

```bash
git checkout -b feature/your-feature-name
```

2. Make your changes and commit them:

```bash
git add .
git commit -m "Description of your changes"
```

3. Push your changes and create a pull request:

```bash
git push origin feature/your-feature-name
```

## Project Structure

```
mcp-use/
├── mcp_use/           # Main package code
├── tests/             # Test files
├── examples/          # Example usage
├── docs/             # Documentation
├── static/           # Static assets
└── pyproject.toml    # Project configuration
```



================================================
FILE: docs/docs.json
================================================
{
  "$schema": "https://mintlify.com/docs.json",
  "theme": "maple",
  "name": "mcp_use",
  "colors": {
    "primary": "#000000",
    "light": "#ffffff",
    "dark": "#000000"
  },
  "favicon": "/favicon.svg",
  "contextual": {
    "options": [
      "copy",
      "view",
      "chatgpt",
      "claude"
    ]
  },
  "icons": {
    "library": "lucide"
  },
  "navigation": {
    "global": {
      "anchors": [
        {
          "anchor": "Website",
          "href": "https://mcp-use.com",
          "icon": "globe"
        },
        {
          "anchor": "Forum",
          "href": "https://discord.gg/XkNkSkMz3V",
          "icon": "discord"
        }
      ]
    },
    "tabs": [
      {
        "tab": "Documentation",
        "icon": "book",
        "groups": [
          {
            "group": "Getting Started",
            "pages": [
              "getting-started/index",
              "getting-started/quickstart",
              "getting-started/installation",
              "getting-started/configuration"
            ]
          },
          {
            "group": "Client Configuration",
            "pages": [
              {
                "group": "Overview",
                "icon": "globe",
                "pages": [
                  "client/client-configuration",
                  "client/connection-types",
                  "client/sandbox",
                  "client/direct-tool-calls"
                ]
              },
              {
                "group": "Core Features",
                "icon": "list-plus",
                "pages": [
                  "client/tools",
                  "client/resources",
                  "client/prompts"
                ]
              },
              {
                "group": "Advanced Features",
                "icon": "sparkle",
                "pages": [
                  "client/sampling",
                  "client/elicitation",
                  "client/notifications",
                  "client/logging"
                ]
              }
            ]
          },
          {
            "group": "Agent Configuration",
            "pages": [
              "agent/agent-configuration",
              "agent/llm-integration",
              "agent/server-manager",
              "agent/streaming",
              "agent/structured-output",
              "agent/interactive-chat-patterns"
            ]
          },
          {
            "group": "Advanced Usage",
            "pages": [
              "advanced/building-custom-agents",
              "advanced/logging",
              "advanced/multi-server-setup",
              "advanced/security"
            ]
          },
          {
            "group": "Development",
            "pages": [
              "development",
              "development/telemetry",
              "development/observability"
            ]
          },
          {
            "group": "Troubleshooting",
            "pages": [
              "troubleshooting/common-issues",
              "troubleshooting/performance",
              "troubleshooting/connection-errors"
            ]
          }
        ]
      },
      {
        "tab": "API Reference",
        "icon": "terminal",
        "groups": [
          {
            "group": "API Reference",
            "pages": [
              "api-reference/introduction",
              "api-reference/mcpagent",
              "api-reference/mcpclient",
              "api-reference/adapters"
            ]
          }
        ]
      },
      {
        "tab": "Community",
        "icon": "users",
        "groups": [
          {
            "group": "Community",
            "pages": [
              "community/showcase"
            ]
          }
        ]
      },
      {
        "tab": "Changelog",
        "icon": "history",
        "groups": [
          {
            "group": "Changelog",
            "pages": [
              "changelog"
            ]
          }
        ]
      }
    ]
  },
  "logo": {
    "light": "/logo/light.svg",
    "dark": "/logo/dark.svg"
  },
  "navbar": {
    "links": [
      {
        "label": "Community",
        "href": "https://github.com/mcp-use/mcp-use/discussions"
      },
      {
        "label": "Examples",
        "href": "https://github.com/mcp-use/mcp-use/tree/main/examples"
      }
    ],
    "primary": {
      "type": "button",
      "label": "Get Started",
      "href": "https://github.com/mcp-use/mcp-use"
    }
  },
  "footer": {
    "socials": {
      "x": "https://x.com/mcp_use",
      "linkedin": "https://www.linkedin.com/company/mcp-use",
      "github": "https://github.com/mcp-use",
      "discord": "https://discord.gg/XkNkSkMz3V"
    },
    "links": [
      {
        "header": "Linktree",
        "items": [
          {
            "label": "Website",
            "href": "https://mcp-use.com"
          },
          {
            "label": "Cloud Chat",
            "href": "https://chat.mcp-use.com"
          },
          {
            "label": "GitHub",
            "href": "https://github.com/mcp-use"
          }
        ]
      },
      {
        "header": "Resources",
        "items": [
          {
            "label": "Examples",
            "href": "https://github.com/mcp-use/mcp-use/tree/main/examples"
          },
          {
            "label": "MCP Servers",
            "href": "https://github.com/punkpeye/awesome-mcp-servers"
          },
          {
            "label": "LangChain Docs",
            "href": "https://python.langchain.com/"
          }
        ]
      },
      {
        "header": "Community",
        "items": [
          {
            "label": "GitHub Discussions",
            "href": "https://github.com/mcp-use/mcp-use/discussions"
          },
          {
            "label": "Issues",
            "href": "https://github.com/mcp-use/mcp-use/issues"
          },
          {
            "label": "Contribute",
            "href": "https://github.com/mcp-use/mcp-use/blob/main/CONTRIBUTING.md"
          },
          {
            "label": "Discord",
            "href": "https://discord.gg/XkNkSkMz3V"
          }
        ]
      }
    ]
  },
  "seo": {
    "metatags": {
      "charset": "UTF-8",
      "viewport": "width=device-width, initial-scale=1.0",
      "description": "mcp_use is an open source library that enables developers to connect any LLM to any MCP server, allowing the creation of custom agents with tool access without relying on closed-source clients.",
      "keywords": "MCP, Model Context Protocol, LLM, AI agents, open source, API integration, Claude, ChatGPT, artificial intelligence, custom agents, tool access",
      "author": "mcp-use Team",
      "robots": "index, follow",
      "googlebot": "index, follow",
      "google": "notranslate",
      "google-site-verification": "verification_token_here",
      "generator": "mcp-use",
      "theme-color": "#1a1a1a",
      "color-scheme": "light dark",
      "format-detection": "telephone=no",
      "referrer": "origin",
      "language": "en",
      "copyright": "Copyright 2025 mcp-use",
      "reply-to": "dev@mcp-use.com",
      "distribution": "global",
      "coverage": "Worldwide",
      "category": "Technology",
      "target": "developers",
      "HandheldFriendly": "True",
      "MobileOptimized": "320",
      "apple-mobile-web-app-capable": "yes",
      "apple-mobile-web-app-status-bar-style": "black-translucent",
      "apple-mobile-web-app-title": "mcp-use",
      "application-name": "mcp-use",
      "msapplication-TileColor": "#1a1a1a",
      "msapplication-TileImage": "/images/mstile-144x144.png",
      "msapplication-config": "/browserconfig.xml",
      "og:title": "mcp-use - Connect Any LLM to Any MCP Server",
      "og:type": "website",
      "og:url": "https://mcp-use.com",
      "og:image": "https://repository-images.githubusercontent.com/956472076/d2b369ee-1bf9-466c-9ecc-e96c2f95b81a",
      "og:description": "Open source library enabling developers to connect any LLM to any MCP server. Build custom AI agents with tool access without vendor lock-in.",
      "og:site_name": "mcp-use",
      "og:locale": "en_US",
      "twitter:card": "summary_large_image",
      "twitter:site": "@mcpuse",
      "twitter:creator": "@mcpuse",
      "twitter:title": "mcp-use - Connect Any LLM to Any MCP Server",
      "twitter:description": "Open source library enabling developers to connect any LLM to any MCP server. Build custom AI agents with tool access without vendor lock-in.",
      "twitter:image": "https://repository-images.githubusercontent.com/956472076/d2b369ee-1bf9-466c-9ecc-e96c2f95b81a",
      "twitter:image:alt": "mcp-use logo and interface showing LLM to MCP server connections",
      "article:published_time": "2024-12-01T00:00:00+00:00",
      "article:modified_time": "2025-06-16T00:00:00+00:00",
      "article:author": "mcp-use Team",
      "article:section": "Technology",
      "article:tag": "MCP, LLM, AI, open source, developers, API"
    }
  }
}



================================================
FILE: docs/fonts.css
================================================
/*
 * Adding Inter Variable from Adobe Fonts
 * © 2009-2025 Adobe Systems Incorporated. All Rights Reserved.
 */

@import url('https://p.typekit.net/p.css?s=1&k=zmy3zmk&ht=tk&f=55314&a=164646275&app=typekit&e=css');

@font-face {
  font-family: 'inter-variable';
  src: url('https://use.typekit.net/af/250efc/00000000000000007750957d/31/l?primer=7cdcb44be4a7db8877ffa5c0007b8dd865b3bbc383831fe2ea177f62257a9191&fvd=n4&v=3')
      format('woff2'),
    url('https://use.typekit.net/af/250efc/00000000000000007750957d/31/d?primer=7cdcb44be4a7db8877ffa5c0007b8dd865b3bbc383831fe2ea177f62257a9191&fvd=n4&v=3')
      format('woff'),
    url('https://use.typekit.net/af/250efc/00000000000000007750957d/31/a?primer=7cdcb44be4a7db8877ffa5c0007b8dd865b3bbc383831fe2ea177f62257a9191&fvd=n4&v=3')
      format('opentype');
  font-display: auto;
  font-style: normal;
  font-weight: 100 900;
  font-stretch: normal;
}

body {
  font-family: 'inter-variable', sans-serif;
}



================================================
FILE: docs/advanced/building-custom-agents.mdx
================================================
---
title: Building Custom Agents
description: Learn how to build custom agents using MCPClient and integrate tools with different agent frameworks
icon: "paintbrush"
---

# Building Custom Agents

MCP-Use provides flexible options for building custom agents that can utilize MCP tools. This guide will show you how to create your own agents by leveraging the existing adapters, particularly focusing on the LangChain adapter.

<Info>
**Why Build Custom Agents?** While MCP-Use provides a built-in `MCPAgent` class, custom agents give you maximum flexibility to integrate with existing systems, implement specialized behavior, or use different agent frameworks.
</Info>

## Overview

MCP-Use allows you to:

<CardGroup cols={3}>
  <Card title="Access Tools" icon="plug">
    Connect to powerful MCP tools through flexible connectors
  </Card>
  <Card title="Convert & Adapt" icon="arrows-rotate">
    Transform MCP tools to work with any agent framework via adapters
  </Card>
  <Card title="Build Agents" icon="robot">
    Create specialized agents tailored to your specific use cases
  </Card>
</CardGroup>

## Using the LangChain Adapter

The `LangChainAdapter` is a powerful component that converts MCP tools to LangChain tools, enabling you to use MCP tools with any LangChain-compatible agent.

<Note>
**Simplified API**: The LangChain adapter provides a streamlined API that handles all the complexity of session management, connector initialization, and tool conversion automatically.
</Note>

### Basic Example

Here's a simple example of creating a custom agent using the LangChain adapter:

```python
import asyncio
from langchain_openai import ChatOpenAI
from langchain.agents import AgentExecutor, create_tool_calling_agent
from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder

from mcp_use.client import MCPClient
from mcp_use.adapters import LangChainAdapter

async def main():
    # Initialize the MCP client
    client = MCPClient.from_config_file("path/to/config.json")

    # Create adapter instance
    adapter = LangChainAdapter()

    # Get LangChain tools directly from the client with a single line
    tools = await adapter.create_tools(client)

    # Initialize your language model
    llm = ChatOpenAI(model="gpt-4o")

    # Create a prompt template
    prompt = ChatPromptTemplate.from_messages([
        ("system", "You are a helpful assistant with access to powerful tools."),
        MessagesPlaceholder(variable_name="chat_history"),
        ("human", "{input}"),
        MessagesPlaceholder(variable_name="agent_scratchpad"),
    ])

    # Create the agent
    agent = create_tool_calling_agent(llm=llm, tools=tools, prompt=prompt)

    # Create the agent executor
    agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)

    # Run the agent
    result = await agent_executor.ainvoke({"input": "What can you do?"})
    print(result["output"])

if __name__ == "__main__":
    asyncio.run(main())
```

<Tip>
**One-Line Tool Creation**: The API simplifies tool creation - all you need is to create an adapter instance and call its `create_tools` method:

```python
adapter = LangChainAdapter()
tools = await adapter.create_tools(client)
```

You don't need to worry about sessions, connectors, or initialization. The adapter handles everything for you.
</Tip>

## Contributing New Adapters

<Info>
MCP-Use welcomes contributions for integrating with different agent frameworks! The adapter architecture is designed to make this process straightforward and requires minimal implementation effort.
</Info>

### Adapter Architecture

MCP-Use provides a `BaseAdapter` abstract class that handles most of the common functionality:

<CardGroup cols={2}>
  <Card title="Automatic Handling" icon="magic">
    - Tool caching management
    - Connector initialization
    - Multi-connector iteration
  </Card>
  <Card title="Simple Implementation" icon="code">
    Only implement `_convert_tool` method to convert MCP tools to your framework's format
  </Card>
</CardGroup>

<Warning>
**Single Required Method**: To create an adapter for a new framework, you only need to implement one method: `_convert_tool` to convert a single MCP tool to your framework's tool format.
</Warning>

### Creating a New Adapter

Here's a simple template for creating a new adapter:

```python
from typing import Any

from mcp_use.adapters.base import BaseAdapter
from mcp_use.connectors.base import BaseConnector
from your_framework import YourFrameworkTool  # Import your framework's tool class

class YourFrameworkAdapter(BaseAdapter):
    """Adapter for converting MCP tools to YourFramework tools."""

    def _convert_tool(self, mcp_tool: dict[str, Any], connector: BaseConnector) -> YourFrameworkTool:
        """Convert an MCP tool to your framework's tool format.

        Args:
            mcp_tool: The MCP tool to convert.
            connector: The connector that provides this tool.

        Returns:
            A tool in your framework's format, or None if conversion failed.
        """
        try:
            # Implement your framework-specific conversion logic
            converted_tool = YourFrameworkTool(
                name=mcp_tool.name,
                description=mcp_tool.description,
                # Map the MCP tool properties to your framework's tool properties
                # You might need custom handling for argument schemas, function execution, etc.
            )

            return converted_tool
        except Exception as e:
            self.logger.error(f"Error converting tool {mcp_tool.name}: {e}")
            return None
```

### Using Your Custom Adapter

Once you've implemented your adapter, you can use it with the simplified API:

```python
from your_module import YourFrameworkAdapter
from mcp_use.client import MCPClient

# Initialize the client
client = MCPClient.from_config_file("config.json")

# Create an adapter instance
adapter = YourFrameworkAdapter()

# Get tools with a single line
tools = await adapter.create_tools(client)

# Use the tools with your framework
agent = your_framework.create_agent(tools=tools)
```

### Tips for Implementing an Adapter

<Accordion title="Implementation Guidelines">
  <AccordionItem title="Schema Conversion">
    Most frameworks have their own way of handling argument schemas. You'll need to convert the MCP tool's JSON Schema to your framework's format.

    <Tip>
    Look at the LangChain adapter implementation as a reference for handling schema conversion patterns.
    </Tip>
  </AccordionItem>

  <AccordionItem title="Tool Execution">
    When a tool is called in your framework, you'll need to pass the call to the connector's `call_tool` method and handle the result.

    <Warning>
    Always ensure proper async/await handling when calling MCP tools, as they are inherently asynchronous.
    </Warning>
  </AccordionItem>

  <AccordionItem title="Result Parsing">
    MCP tools return structured data with types like text, images, or embedded resources. Your adapter should parse these into a format your framework understands.
  </AccordionItem>

  <AccordionItem title="Error Handling">
    Ensure your adapter handles errors gracefully, both during tool conversion and execution.

    <Note>
    The base adapter provides logging utilities to help with error reporting and debugging.
    </Note>
  </AccordionItem>
</Accordion>


## Conclusion

<CardGroup cols={2}>
  <Card title="Maximum Flexibility" icon="expand">
    Build specialized agents tailored to your specific tasks or integrate MCP capabilities into existing systems
  </Card>
  <Card title="Simple Architecture" icon="puzzle-piece">
    Easy extension with minimal implementation - just one `_convert_tool` method needed
  </Card>
</CardGroup>

<Info>
**Key Benefits:**
- **Simplified API**: Create tools directly from MCPClient with a single method call
- **Automatic Management**: Session and connector complexity is handled automatically
- **Flexible Integration**: Works with any agent framework that has a LangChain-style interface
</Info>

<Tip>
**Contributing Back**: We welcome contributions to expand the adapter ecosystem! If you develop an adapter for a new framework, please consider contributing it back to the project to help the community.
</Tip>



================================================
FILE: docs/advanced/logging.mdx
================================================
---
title: "Logging"
description: "Learn how to debug and log in mcp-use"
icon: "bug"
---

# Logging MCP-Use

<Info>
MCP-Use provides built-in logging functionality that helps diagnose issues in your agent implementation.
</Info>

## Enabling Debug Mode

<Note>
Choose the debug method that best fits your workflow - environment variables for one-off debugging or programmatic control for conditional debugging.
</Note>

There are two primary ways to enable debug mode:

### 1. Environment Variable (Recommended for One-off Runs)

<Tabs>
  <Tab title="Inline (Temporary)">
    Run your script with the `DEBUG` environment variable:

    ```bash
    # Level 1: Show INFO level messages
    DEBUG=1 python3.11 examples/browser_use.py

    # Level 2: Show DEBUG level messages (full verbose output)
    DEBUG=2 python3.11 examples/browser_use.py
    ```

    <Tip>
    This sets the debug level only for that specific Python process - perfect for quick troubleshooting.
    </Tip>
  </Tab>

  <Tab title="Persistent">
    Set the environment variable in your shell:

    ```bash
    export MCP_USE_DEBUG=1  # or 2
    ```

    Or add it to your `.env` file:
    ```bash .env
    MCP_USE_DEBUG=2
    ```
  </Tab>
</Tabs>

### 2. Setting the Debug Flag Programmatically

<Note>
Programmatic control is useful for debugging specific parts of your application or conditionally enabling debug mode based on your application state.
</Note>

```python
import mcp_use

# Different debug levels
mcp_use.set_debug(1)  # INFO level
mcp_use.set_debug(2)  # DEBUG level (full verbose output)
mcp_use.set_debug(0)  # Turn off debug (WARNING level)
```

<Tip>
You can conditionally enable debugging based on environment or configuration:

```python
import os
import mcp_use

if os.getenv("ENVIRONMENT") == "development":
    mcp_use.set_debug(2)
```
</Tip>

## Debug Levels

<CardGroup cols={3}>
  <Card title="Level 0 - Normal" icon="volume-off">
    **Minimal Output**

    Only WARNING and above messages are shown

    `set_debug(0)`
  </Card>

  <Card title="Level 1 - Info" icon="volume-low">
    **Default Operation**

    Shows INFO level messages and tool calls - useful for basic operational information

    `DEBUG=1` or `set_debug(1)` (default)
  </Card>

  <Card title="Level 2 - Full Debug" icon="volume-high">
    **Maximum Verbosity**

    Shows all detailed debugging information including internal operations

    `DEBUG=2` or `set_debug(2)`
  </Card>
</CardGroup>

## Agent-Specific Verbosity

If you only want to increase verbosity for the agent component without enabling full debug mode for the entire package, you can use the `verbose` parameter when creating an MCPAgent:

```python
from mcp_use import MCPAgent

# Create agent with increased verbosity
agent = MCPAgent(
    llm=your_llm,
    client=your_client,
    verbose=True  # Only shows debug messages from the agent
)
```

This option is useful when you want to see the agent's steps and decision-making process without all the low-level debug information from other components.

## Debug Information

When debug mode is enabled, you'll see more detailed information about:

- Server initialization and connection details
- Tool registration and resolution
- Agent steps and decision-making
- Request and response formats
- Communication with MCP servers
- Error details and stack traces

This can be extremely helpful when diagnosing issues with custom MCP servers or understanding why an agent might be behaving unexpectedly.


## Troubleshooting Common Issues

### Server Connection Problems

If you're having issues connecting to MCP servers, enabling debug mode will show detailed information about the connection attempts, server initialization, and any errors encountered.

### Agent Not Using Expected Tools

When debug mode is enabled, you'll see each tool registration and the exact prompts being sent to the LLM, which can help diagnose why certain tools might not be used as expected.

### Performance Issues

Debug logs can help identify potential bottlenecks in your implementation by showing timing information for various operations.



================================================
FILE: docs/advanced/multi-server-setup.mdx
================================================
---
title: "Multi-Server Setup"
description: "Configure and manage multiple MCP servers for complex workflows"
icon: "server"
---

This guide shows you how to configure and use multiple MCP servers simultaneously with mcp_use, enabling complex workflows that span different domains.

## Overview

Using multiple MCP servers allows your agent to access a diverse set of tools from different sources. For example, you might want to:

- **Web scraping** with Playwright + **File operations** with filesystem server
- **Database queries** with SQLite + **API calls** with HTTP server
- **Code execution** with Python server + **Git operations** with GitHub server

<Info>
The `MCPClient` can manage multiple servers, and the optional `ServerManager` can dynamically select the appropriate server for each task.
</Info>

## Basic Multi-Server Configuration

Create a configuration file that defines multiple servers:

```json multi_server_config.json
{
  "mcpServers": {
    "playwright": {
      "command": "npx",
      "args": ["@playwright/mcp@latest"],
      "env": {
        "DISPLAY": ":1",
        "PLAYWRIGHT_HEADLESS": "true"
      }
    },
    "filesystem": {
      "command": "mcp-server-filesystem",
      "args": ["/safe/workspace/directory"],
      "env": {
        "FILESYSTEM_READONLY": "false"
      }
    },
    "sqlite": {
      "command": "mcp-server-sqlite",
      "args": ["--db", "/path/to/database.db"],
      "env": {
        "SQLITE_READONLY": "false"
      }
    },
    "github": {
      "command": "mcp-server-github",
      "args": ["--token", "${GITHUB_TOKEN}"],
      "env": {
        "GITHUB_TOKEN": "${GITHUB_TOKEN}"
      }
    }
  }
}
```

## Using Multiple Servers

### Basic Approach (Manual Server Selection)

```python
import asyncio
from langchain_openai import ChatOpenAI
from mcp_use import MCPAgent, MCPClient

async def main():
    # Load multi-server configuration
    client = MCPClient.from_config_file("multi_server_config.json")

    # Create agent (all servers will be connected)
    llm = ChatOpenAI(model="gpt-4")
    agent = MCPAgent(llm=llm, client=client)

    # Agent has access to tools from all servers
    result = await agent.run(
        "Search for Python tutorials online, save the best ones to a file, "
        "then create a database table to track my learning progress"
    )
    print(result)

if __name__ == "__main__":
    asyncio.run(main())
```

### Advanced Approach (Server Manager)

Enable the server manager for more efficient resource usage:

```python
import asyncio
from langchain_openai import ChatOpenAI
from mcp_use import MCPAgent, MCPClient

async def main():
    client = MCPClient.from_config_file("multi_server_config.json")

    # Enable server manager for dynamic server selection
    agent = MCPAgent(
        llm=llm,
        client=client,
        use_server_manager=True,  # Only connects to servers as needed
        max_steps=30
    )

    # The agent will automatically choose appropriate servers
    result = await agent.run(
        "Research the latest AI papers, summarize them in a markdown file, "
        "and commit the file to my research repository on GitHub"
    )
    print(result)

if __name__ == "__main__":
    asyncio.run(main())
```

## Configuration Patterns

### Web Scraping + Data Processing

```json
{
  "mcpServers": {
    "playwright": {
      "command": "npx",
      "args": ["@playwright/mcp@latest"],
      "env": {
        "PLAYWRIGHT_HEADLESS": "true"
      }
    },
    "pandas": {
      "command": "mcp-server-pandas",
      "args": ["--allow-file-access"],
      "env": {
        "PANDAS_SAFE_MODE": "true"
      }
    },
    "filesystem": {
      "command": "mcp-server-filesystem",
      "args": ["/data/workspace"]
    }
  }
}
```

Usage example:
```python
result = await agent.run(
    "Scrape product data from example-store.com, "
    "clean and analyze it with pandas, "
    "then save the results as CSV and Excel files"
)
```

### Development Workflow

```json
{
  "mcpServers": {
    "filesystem": {
      "command": "mcp-server-filesystem",
      "args": ["/home/user/projects"]
    },
    "github": {
      "command": "mcp-server-github",
      "args": ["--token", "${GITHUB_TOKEN}"]
    },
    "python": {
      "command": "mcp-server-python",
      "args": ["--safe-mode"]
    },
    "git": {
      "command": "mcp-server-git",
      "args": ["--repo-path", "/home/user/projects"]
    }
  }
}
```

Usage example:
```python
result = await agent.run(
    "Create a new Python function to calculate fibonacci numbers, "
    "write unit tests for it, run the tests, "
    "and if they pass, commit the changes to the current git branch"
)
```

### Research and Documentation

```json
{
  "mcpServers": {
    "playwright": {
      "command": "npx",
      "args": ["@playwright/mcp@latest"]
    },
    "arxiv": {
      "command": "mcp-server-arxiv",
      "args": ["--max-results", "10"]
    },
    "wikipedia": {
      "command": "mcp-server-wikipedia",
      "args": ["--language", "en"]
    },
    "filesystem": {
      "command": "mcp-server-filesystem",
      "args": ["/research/notes"]
    }
  }
}
```

## Managing Server Dependencies

### Environment Variables

Use environment variables for sensitive information:

```bash .env
GITHUB_TOKEN=ghp_...
DATABASE_URL=postgresql://user:pass@localhost/db
API_KEY=sk-...
WORKSPACE_PATH=/safe/workspace
```

Reference them in your configuration:

```json
{
  "mcpServers": {
    "github": {
      "command": "mcp-server-github",
      "env": {
        "GITHUB_TOKEN": "${GITHUB_TOKEN}"
      }
    },
    "filesystem": {
      "command": "mcp-server-filesystem",
      "args": ["${WORKSPACE_PATH}"]
    }
  }
}
```

### Conditional Server Loading

You can conditionally include servers based on availability:

```python
import os
import asyncio
from mcp_use import MCPClient, MCPAgent

async def create_agent_with_available_servers():
    config = {"mcpServers": {}}

    # Always include filesystem
    config["mcpServers"]["filesystem"] = {
        "command": "mcp-server-filesystem",
        "args": ["/workspace"]
    }

    # Include GitHub server if token is available
    if os.getenv("GITHUB_TOKEN"):
        config["mcpServers"]["github"] = {
            "command": "mcp-server-github",
            "env": {"GITHUB_TOKEN": os.getenv("GITHUB_TOKEN")}
        }

    # Include database server if URL is available
    if os.getenv("DATABASE_URL"):
        config["mcpServers"]["postgres"] = {
            "command": "mcp-server-postgres",
            "env": {"DATABASE_URL": os.getenv("DATABASE_URL")}
        }

    client = MCPClient.from_dict(config)
    return MCPAgent(llm=ChatOpenAI(model="gpt-4"), client=client)
```

## Performance Optimization

### Server Manager Benefits

The server manager provides several performance benefits:

<Tabs>
  <Tab title="Lazy Loading">
    ```python
    # Without server manager - all servers start immediately
    agent = MCPAgent(llm=llm, client=client, use_server_manager=False)
    # Result: All 5 servers start, consuming resources

    # With server manager - servers start only when needed
    agent = MCPAgent(llm=llm, client=client, use_server_manager=True)
    # Result: Only the required servers start for each task
    ```
  </Tab>
  <Tab title="Resource Management">
    ```python
    # Server manager automatically manages connections
    agent = MCPAgent(
        llm=llm,
        client=client,
        use_server_manager=True,
        max_concurrent_servers=3  # Limit concurrent connections
    )
    ```
  </Tab>
  <Tab title="Error Isolation">
    ```python
    # If one server fails, others continue working
    agent = MCPAgent(
        llm=llm,
        client=client,
        use_server_manager=True,
        ignore_server_errors=True  # Continue on server failures
    )
    ```
  </Tab>
</Tabs>

### Tool Filtering

Control which tools are available to prevent confusion:

```python
# Restrict to specific tool types
agent = MCPAgent(
    llm=llm,
    client=client,
    allowed_tools=["file_read", "file_write", "web_search"],
    disallowed_tools=["system_exec", "network_request"]
)

# Or filter by server
agent = MCPAgent(
    llm=llm,
    client=client,
    allowed_servers=["filesystem", "playwright"],
    use_server_manager=True
)
```

## Troubleshooting Multi-Server Setups

### Common Issues

<AccordionGroup>
  <Accordion title="Server startup failures">
    Check server logs and ensure all dependencies are installed:
    ```python
    import logging
    logging.basicConfig(level=logging.DEBUG)

    # Enable detailed logging
    client = MCPClient.from_config_file("config.json", debug=True)
    ```
  </Accordion>

  <Accordion title="Tool name conflicts">
    Different servers might provide tools with the same name:
    ```python
    # Use server prefixes to avoid conflicts
    agent = MCPAgent(
        llm=llm,
        client=client,
        use_tool_prefixes=True  # Tools become "server_name.tool_name"
    )
    ```
  </Accordion>

  <Accordion title="Performance issues">
    Too many servers can slow down the agent:
    ```python
    # Limit concurrent servers
    agent = MCPAgent(
        llm=llm,
        client=client,
        use_server_manager=True,
        max_concurrent_servers=3
    )
    ```
  </Accordion>
</AccordionGroup>

### Debug Configuration

Enable comprehensive debugging:

```python
import logging
from mcp_use import MCPAgent, MCPClient

# Enable debug logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# Create client with debug mode
client = MCPClient.from_config_file(
    "multi_server_config.json",
    debug=True,
    timeout=30  # Increase timeout for debugging
)

# Create agent with verbose output
agent = MCPAgent(
    llm=llm,
    client=client,
    use_server_manager=True,
    debug=True,
    verbose=True
)
```

## Best Practices

<CardGroup cols={2}>
  <Card title="Start Simple" icon="seedling">
    Begin with 2-3 servers and add more as needed. Too many servers can overwhelm the LLM.
  </Card>
  <Card title="Use Server Manager" icon="gear">
    Enable `use_server_manager=True` for better performance and resource management.
  </Card>
  <Card title="Environment Variables" icon="lock">
    Store sensitive configuration like API keys in environment variables, not config files.
  </Card>
  <Card title="Error Handling" icon="shield">
    Implement graceful degradation when servers are unavailable or fail.
  </Card>
</CardGroup>

## Next Steps

<CardGroup cols={3}>
  <Card title="Server Manager" icon="server" href="/agent/server-manager">
    Learn more about dynamic server selection and management
  </Card>
  <Card title="Security Guide" icon="shield" href="/advanced/security">
    Best practices for secure multi-server configurations
  </Card>
  <Card title="Performance" icon="zap" href="/troubleshooting/performance">
    Optimize your multi-server setup for better performance
  </Card>
</CardGroup>



================================================
FILE: docs/advanced/security.mdx
================================================
---
title: "Security Best Practices"
description: "Secure your mcp_use implementations and protect sensitive data"
icon: "shield"
---

Security is crucial when working with MCP servers and LLM agents. This guide covers best practices for protecting your applications, data, and infrastructure.

<Warning>
**Important**: MCP servers can have powerful capabilities including file system access, network requests, and code execution. Always follow security best practices to protect your systems.
</Warning>

## API Key Management

### Environment Variables

Never hardcode API keys in your source code. Use environment variables:

```python secure_config.py
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Access API keys securely
openai_key = os.getenv("OPENAI_API_KEY")
anthropic_key = os.getenv("ANTHROPIC_API_KEY")

if not openai_key:
    raise ValueError("OPENAI_API_KEY environment variable is required")
```

### .env File Security

Create a secure `.env` file:

```bash .env
# LLM Provider Keys
OPENAI_API_KEY=sk-...
ANTHROPIC_API_KEY=sk-ant-...
GROQ_API_KEY=gsk_...

# MCP Server Configuration
FILESYSTEM_ROOT=/safe/workspace
DATABASE_URL=postgresql://user:pass@localhost/db

# Optional: Security settings
MCP_TIMEOUT=30
MAX_TOOL_CALLS=10
ALLOWED_DOMAINS=example.com,api.service.com
```

<Warning>
**Never commit .env files**: Add `.env` to your `.gitignore` file to prevent accidentally committing API keys to version control.
</Warning>

### Secrets Management

For production environments, use proper secrets management:

<Tabs>
  <Tab title="AWS Secrets Manager">
    ```python
    import boto3
    from botocore.exceptions import ClientError

    def get_secret(secret_name, region_name="us-east-1"):
        session = boto3.session.Session()
        client = session.client('secretsmanager', region_name=region_name)

        try:
            response = client.get_secret_value(SecretId=secret_name)
            return response['SecretString']
        except ClientError as e:
            raise e

    # Usage
    openai_key = get_secret("prod/mcp-use/openai-key")
    ```
  </Tab>
  <Tab title="Azure Key Vault">
    ```python
    from azure.keyvault.secrets import SecretClient
    from azure.identity import DefaultAzureCredential

    credential = DefaultAzureCredential()
    client = SecretClient(
        vault_url="https://vault-name.vault.azure.net/",
        credential=credential
    )

    # Usage
    openai_key = client.get_secret("openai-api-key").value
    ```
  </Tab>
  <Tab title="HashiCorp Vault">
    ```python
    import hvac

    client = hvac.Client(url='https://vault.example.com')
    client.token = os.getenv('VAULT_TOKEN')

    # Read secret
    response = client.secrets.kv.v2.read_secret_version(
        path='mcp-use/api-keys'
    )
    openai_key = response['data']['data']['openai_key']
    ```
  </Tab>
</Tabs>

## MCP Server Security

### Filesystem Server Security

When using filesystem servers, restrict access to safe directories:

```json secure_filesystem_config.json
{
  "mcpServers": {
    "filesystem": {
      "command": "mcp-server-filesystem",
      "args": [
        "/workspace/safe-directory",
        "--readonly",
        "--max-file-size", "10MB",
        "--allowed-extensions", ".txt,.md,.json,.py"
      ],
      "env": {
        "FILESYSTEM_READONLY": "true",
        "MAX_FILE_SIZE": "10485760"
      }
    }
  }
}
```

### Network Access Restrictions

Limit network access for web-based MCP servers:

```json secure_network_config.json
{
  "mcpServers": {
    "playwright": {
      "command": "npx",
      "args": ["@playwright/mcp@latest"],
      "env": {
        "PLAYWRIGHT_HEADLESS": "true",
        "ALLOWED_DOMAINS": "example.com,api.trusted-service.com",
        "BLOCK_PRIVATE_IPS": "true",
        "DISABLE_JAVASCRIPT": "false",
        "TIMEOUT": "30000"
      }
    }
  }
}
```

### Database Security

Secure database connections with proper credentials and restrictions:

```json secure_database_config.json
{
  "mcpServers": {
    "postgres": {
      "command": "mcp-server-postgres",
      "env": {
        "DATABASE_URL": "${DATABASE_URL}",
        "CONNECTION_TIMEOUT": "30",
        "MAX_CONNECTIONS": "5",
        "READONLY_MODE": "true",
        "ALLOWED_SCHEMAS": "public,reporting",
        "BLOCKED_TABLES": "users,passwords,secrets"
      }
    }
  }
}
```

## Agent Security Configuration

### Restrict Tool Access

Limit which tools the agent can use:

```python secure_agent.py
from mcp_use import MCPAgent, MCPClient
from langchain_openai import ChatOpenAI

# Define allowed and disallowed tools
ALLOWED_TOOLS = [
    "file_read",
    "file_write",
    "web_search",
    "web_scrape"
]

DISALLOWED_TOOLS = [
    "system_execute",
    "network_request",
    "database_write",
    "file_delete"
]

async def create_secure_agent():
    client = MCPClient.from_config_file("secure_config.json")
    llm = ChatOpenAI(model="gpt-4")

    agent = MCPAgent(
        llm=llm,
        client=client,
        allowed_tools=ALLOWED_TOOLS,
        disallowed_tools=DISALLOWED_TOOLS,
        max_steps=20,  # Limit execution steps
        timeout=300,   # 5-minute timeout
        use_server_manager=True
    )

    return agent
```

### Input Validation

Validate user inputs before processing:

```python input_validation.py
import re
from typing import List, Optional

class InputValidator:
    def __init__(self):
        self.max_length = 1000
        self.blocked_patterns = [
            r'rm\s+-rf',          # Dangerous commands
            r'sudo',              # Privilege escalation
            r'chmod\s+777',       # Permission changes
            r'\.\./',             # Path traversal
            r'<script',           # XSS attempts
            r'DROP\s+TABLE',      # SQL injection
        ]

    def validate_query(self, query: str) -> tuple[bool, Optional[str]]:
        """Validate user query for security issues"""

        # Check length
        if len(query) > self.max_length:
            return False, f"Query too long (max {self.max_length} characters)"

        # Check for blocked patterns
        for pattern in self.blocked_patterns:
            if re.search(pattern, query, re.IGNORECASE):
                return False, f"Query contains blocked pattern: {pattern}"

        # Check for suspicious characters
        suspicious_chars = ['&', '|', ';', '`', '$']
        if any(char in query for char in suspicious_chars):
            return False, "Query contains potentially dangerous characters"

        return True, None

# Usage
validator = InputValidator()

async def secure_query_handler(user_query: str):
    is_valid, error = validator.validate_query(user_query)

    if not is_valid:
        raise ValueError(f"Invalid query: {error}")

    agent = await create_secure_agent()
    return await agent.run(user_query)
```

### Rate Limiting

Implement rate limiting to prevent abuse:

```python rate_limiting.py
import time
from collections import defaultdict
from typing import Dict, Tuple

class RateLimiter:
    def __init__(self, max_requests: int = 10, window_seconds: int = 60):
        self.max_requests = max_requests
        self.window_seconds = window_seconds
        self.requests: Dict[str, List[float]] = defaultdict(list)

    def is_allowed(self, user_id: str) -> Tuple[bool, str]:
        """Check if user is within rate limits"""
        now = time.time()
        window_start = now - self.window_seconds

        # Clean old requests
        self.requests[user_id] = [
            req_time for req_time in self.requests[user_id]
            if req_time > window_start
        ]

        # Check if under limit
        if len(self.requests[user_id]) >= self.max_requests:
            return False, f"Rate limit exceeded: {self.max_requests} requests per {self.window_seconds} seconds"

        # Record this request
        self.requests[user_id].append(now)
        return True, ""

# Usage
rate_limiter = RateLimiter(max_requests=5, window_seconds=60)

async def rate_limited_query(user_id: str, query: str):
    allowed, message = rate_limiter.is_allowed(user_id)

    if not allowed:
        raise ValueError(message)

    agent = await create_secure_agent()
    return await agent.run(query)
```

## Logging and Monitoring

### Security Logging

Implement comprehensive security logging:

```python security_logging.py
import logging
import json
from datetime import datetime
from typing import Any, Dict

class SecurityLogger:
    def __init__(self, log_file: str = "security.log"):
        self.logger = logging.getLogger("mcp_security")
        handler = logging.FileHandler(log_file)
        formatter = logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s'
        )
        handler.setFormatter(formatter)
        self.logger.addHandler(handler)
        self.logger.setLevel(logging.INFO)

    def log_agent_start(self, user_id: str, query: str):
        """Log when an agent starts processing"""
        self.logger.info(f"Agent started - User: {user_id}, Query: {query[:100]}...")

    def log_tool_usage(self, user_id: str, tool_name: str, success: bool):
        """Log tool usage attempts"""
        status = "SUCCESS" if success else "FAILED"
        self.logger.info(f"Tool used - User: {user_id}, Tool: {tool_name}, Status: {status}")

    def log_security_violation(self, user_id: str, violation_type: str, details: str):
        """Log security violations"""
        self.logger.warning(f"SECURITY VIOLATION - User: {user_id}, Type: {violation_type}, Details: {details}")

    def log_error(self, user_id: str, error: str):
        """Log errors"""
        self.logger.error(f"Error - User: {user_id}, Error: {error}")

# Usage
security_logger = SecurityLogger()

async def monitored_agent_run(user_id: str, query: str):
    security_logger.log_agent_start(user_id, query)

    try:
        agent = await create_secure_agent()
        result = await agent.run(query)
        security_logger.log_tool_usage(user_id, "agent_complete", True)
        return result
    except Exception as e:
        security_logger.log_error(user_id, str(e))
        raise
```

### Monitoring Dashboard

Create monitoring for security events:

```python monitoring.py
from prometheus_client import Counter, Histogram, start_http_server
import time

# Metrics
REQUEST_COUNT = Counter('mcp_requests_total', 'Total requests', ['user_id', 'status'])
REQUEST_DURATION = Histogram('mcp_request_duration_seconds', 'Request duration')
SECURITY_VIOLATIONS = Counter('mcp_security_violations_total', 'Security violations', ['type'])

async def monitored_agent_execution(user_id: str, query: str):
    start_time = time.time()

    try:
        # Your existing security checks
        is_valid, error = validator.validate_query(query)
        if not is_valid:
            SECURITY_VIOLATIONS.labels(type='invalid_query').inc()
            raise ValueError(error)

        allowed, message = rate_limiter.is_allowed(user_id)
        if not allowed:
            SECURITY_VIOLATIONS.labels(type='rate_limit').inc()
            raise ValueError(message)

        # Execute agent
        agent = await create_secure_agent()
        result = await agent.run(query)

        REQUEST_COUNT.labels(user_id=user_id, status='success').inc()
        return result

    except Exception as e:
        REQUEST_COUNT.labels(user_id=user_id, status='error').inc()
        raise
    finally:
        REQUEST_DURATION.observe(time.time() - start_time)

# Start metrics server
start_http_server(8000)
```

## Production Deployment Security

### Container Security

Use secure container configurations:

```dockerfile Dockerfile
FROM python:3.9-slim

# Create non-root user
RUN groupadd -r mcpuser && useradd -r -g mcpuser mcpuser

# Install security updates
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
    ca-certificates && \
    rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements and install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Set ownership and permissions
RUN chown -R mcpuser:mcpuser /app
USER mcpuser

# Expose port
EXPOSE 8000

# Run application
CMD ["python", "main.py"]
```

### Network Security

Configure network policies and firewalls:

```yaml kubernetes_network_policy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mcp-use-policy
spec:
  podSelector:
    matchLabels:
      app: mcp-use
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: frontend
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS only
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432
```

## Security Checklist

<AccordionGroup>
  <Accordion title="API Key Security">
    - [ ] API keys stored in environment variables or secrets manager
    - [ ] No hardcoded credentials in source code
    - [ ] .env files added to .gitignore
    - [ ] Regular API key rotation implemented
    - [ ] Least privilege access for API keys
  </Accordion>

  <Accordion title="MCP Server Security">
    - [ ] Filesystem access restricted to safe directories
    - [ ] Network access limited to necessary domains
    - [ ] Database connections use read-only accounts where possible
    - [ ] Input validation on all server parameters
    - [ ] Resource limits configured (timeouts, file sizes, etc.)
  </Accordion>

  <Accordion title="Agent Configuration">
    - [ ] Tool access restricted using allowed/disallowed lists
    - [ ] Maximum execution steps limited
    - [ ] Timeouts configured for agent operations
    - [ ] Input validation implemented
    - [ ] Rate limiting in place
  </Accordion>

  <Accordion title="Monitoring & Logging">
    - [ ] Security events logged
    - [ ] Monitoring dashboard configured
    - [ ] Alerting set up for security violations
    - [ ] Log retention policies in place
    - [ ] Regular security audits scheduled
  </Accordion>
</AccordionGroup>

## Common Security Vulnerabilities

### Path Traversal Prevention

```python
import os
from pathlib import Path

def secure_file_path(base_dir: str, user_path: str) -> str:
    """Safely resolve user-provided file paths"""
    base = Path(base_dir).resolve()
    target = (base / user_path).resolve()

    # Ensure the target is within the base directory
    if not str(target).startswith(str(base)):
        raise ValueError("Path traversal attempt detected")

    return str(target)

# Usage in MCP server configuration
safe_workspace = secure_file_path("/workspace", user_provided_path)
```

### Command Injection Prevention

```python
import shlex

def secure_command_args(command: str, args: List[str]) -> List[str]:
    """Safely construct command arguments"""
    # Whitelist allowed commands
    allowed_commands = ["node", "python", "npm", "pip"]

    if command not in allowed_commands:
        raise ValueError(f"Command '{command}' not allowed")

    # Escape arguments
    safe_args = [shlex.quote(arg) for arg in args]

    return [command] + safe_args
```

## Next Steps

<CardGroup cols={3}>
  <Card title="Configuration Guide" icon="gear" href="/getting-started/configuration">
    Learn secure configuration practices for MCP servers
  </Card>
  <Card title="Deployment Guide" icon="rocket" href="/development">
    Best practices for secure production deployment
  </Card>
  <Card title="Troubleshooting" icon="warning" href="/troubleshooting/common-issues">
    Debug security-related issues and errors
  </Card>
</CardGroup>

<Tip>
Security is an ongoing process. Regularly review and update your security practices, monitor for new vulnerabilities, and keep all dependencies up to date.
</Tip>



================================================
FILE: docs/agent/agent-configuration.mdx
================================================
---
title: "Agent Configuration"
description: "Configure MCPAgent behavior and LLM integration"
icon: "brain"
---

# Agent Configuration

<Info>
This guide covers MCPAgent configuration options for customizing agent behavior and LLM integration. For client configuration, see the [Client Configuration](/client/client-configuration) guide.
</Info>

## API Keys

<Warning>
Never hardcode API keys in your source code. Always use environment variables for security.
</Warning>

Since agents use LLM providers that require API keys, you need to configure them properly:

<Tabs>
  <Tab title=".env File (Recommended)">
    Create a `.env` file in your project root:

    ```bash .env
    # OpenAI
    OPENAI_API_KEY=your_api_key_here
    # Anthropic
    ANTHROPIC_API_KEY=your_api_key_here
    # Groq
    GROQ_API_KEY=your_api_key_here
    # Google
    GOOGLE_API_KEY=your_api_key_here
    ```

    Load it in Python:
    ```python
    from dotenv import load_dotenv
    load_dotenv()
    ```

    <Tip>
    This method keeps your keys organized and makes them available to your Python runtime.
    </Tip>
  </Tab>

  <Tab title="Environment Variables">
    Set environment variables directly in your terminal:

    ```bash
    export OPENAI_API_KEY="your_api_key_here"
    export ANTHROPIC_API_KEY="your_api_key_here"
    ```

    Access them in Python:
    ```python
    import os
    api_key = os.getenv("OPENAI_API_KEY", "")
    ```
  </Tab>

  <Tab title="System Configuration">
    For production environments, consider using:
    - Docker secrets
    - Kubernetes secrets
    - Cloud provider secret managers (AWS Secrets Manager, etc.)
    - System environment configuration
  </Tab>
</Tabs>

## Agent Parameters

When creating an MCPAgent, you can configure several parameters to customize its behavior:

```python
from mcp_use import MCPAgent, MCPClient
from langchain_openai import ChatOpenAI

# Basic configuration
agent = MCPAgent(
    llm=ChatOpenAI(model="gpt-4o", temperature=0.7),
    client=MCPClient.from_config_file("config.json"),
    max_steps=30
)

# Advanced configuration
agent = MCPAgent(
    llm=ChatOpenAI(model="gpt-4o", temperature=0.7),
    client=MCPClient.from_config_file("config.json"),
    max_steps=30,
    server_name=None,
    auto_initialize=True,
    memory_enabled=True,
    system_prompt="Custom instructions for the agent",
    additional_instructions="Additional guidelines for specific tasks",
    disallowed_tools=["file_system", "network", "shell"]  # Restrict potentially dangerous tools
)
```

### Available Parameters

- `llm`: Any LangChain-compatible language model (required)
- `client`: The MCPClient instance (optional if connectors are provided)
- `connectors`: List of connectors if not using client (optional)
- `server_name`: Name of the server to use (optional)
- `max_steps`: Maximum number of steps the agent can take (default: 5)
- `auto_initialize`: Whether to initialize automatically (default: False)
- `memory_enabled`: Whether to enable memory (default: True)
- `system_prompt`: Custom system prompt (optional)
- `system_prompt_template`: Custom system prompt template (optional)
- `additional_instructions`: Additional instructions for the agent (optional)
- `disallowed_tools`: List of tool names that should not be available to the agent (optional)
- `use_server_manager`: Enable dynamic server selection (default: False)

## Tool Access Control

You can restrict which tools are available to the agent for security or to limit its capabilities. Here's a complete example showing how to set up an agent with restricted tool access:

```python
import asyncio
import os
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from mcp_use import MCPAgent, MCPClient

async def main():
    # Load environment variables
    load_dotenv()

    # Create configuration dictionary
    config = {
      "mcpServers": {
        "playwright": {
          "command": "npx",
          "args": ["@playwright/mcp@latest"],
          "env": {
            "DISPLAY": ":1"
          }
        }
      }
    }

    # Create MCPClient from configuration dictionary
    client = MCPClient.from_dict(config)

    # Create LLM
    llm = ChatOpenAI(model="gpt-4o")

    # Create agent with restricted tools
    agent = MCPAgent(
        llm=llm,
        client=client,
        max_steps=30,
        disallowed_tools=["file_system", "network"]  # Restrict potentially dangerous tools
    )

    # Run the query
    result = await agent.run(
        "Find the best restaurant in San Francisco USING GOOGLE SEARCH",
    )
    print(f"\nResult: {result}")

if __name__ == "__main__":
    asyncio.run(main())
```

You can also manage tool restrictions dynamically:

```python
# Update restrictions after initialization
agent.set_disallowed_tools(["file_system", "network", "shell", "database"])
await agent.initialize()  # Reinitialize to apply changes

# Check current restrictions
restricted_tools = agent.get_disallowed_tools()
print(f"Restricted tools: {restricted_tools}")
```

This feature is useful for:

- Restricting access to sensitive operations
- Limiting agent capabilities for specific tasks
- Preventing the agent from using potentially dangerous tools
- Focusing the agent on specific functionality

## Working with Adapters Directly

If you want more control over how tools are created, you can work with the adapters directly. The `BaseAdapter` class provides a unified interface for converting MCP tools to various framework formats, with `LangChainAdapter` being the most commonly used implementation.

```python
import asyncio
from langchain_openai import ChatOpenAI
from langchain.agents import AgentExecutor, create_tool_calling_agent
from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder

from mcp_use.client import MCPClient
from mcp_use.adapters import LangChainAdapter

async def main():
    # Initialize client
    client = MCPClient.from_config_file("browser_mcp.json")

    # Create an adapter instance
    adapter = LangChainAdapter()

    # Get tools directly from the client
    tools = await adapter.create_tools(client)

    # Use the tools with any LangChain agent
    llm = ChatOpenAI(model="gpt-4o")
    prompt = ChatPromptTemplate.from_messages([
        ("system", "You are a helpful assistant with access to powerful tools."),
        MessagesPlaceholder(variable_name="chat_history"),
        ("human", "{input}"),
        MessagesPlaceholder(variable_name="agent_scratchpad"),
    ])

    agent = create_tool_calling_agent(llm=llm, tools=tools, prompt=prompt)
    agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)

    result = await agent_executor.ainvoke({"input": "Search for information about climate change"})
    print(result["output"])

if __name__ == "__main__":
    asyncio.run(main())
```

The adapter pattern makes it easy to:

1. Create tools directly from an MCPClient
2. Filter or customize which tools are available
3. Integrate with different agent frameworks

**Benefits of Direct Adapter Usage:**
- **Flexibility**: More control over tool creation and management
- **Custom Integration**: Easier to integrate with existing LangChain workflows
- **Advanced Filtering**: Apply custom logic to tool selection and configuration
- **Framework Agnostic**: Potential for future adapters to other frameworks

## Server Manager

The Server Manager is an agent-level feature that enables dynamic server selection for improved performance with multi-server setups.

### Enabling Server Manager

To improve efficiency and potentially reduce agent confusion when many tools are available, you can enable the Server Manager by setting `use_server_manager=True` when creating the `MCPAgent`.

```python
# Enable server manager for automatic server selection
agent = MCPAgent(
    llm=llm,
    client=client,
    use_server_manager=True  # Enable dynamic server selection
)
```

### How It Works

When enabled, the agent will automatically select the appropriate server based on the tool chosen by the LLM for each step. This avoids connecting to unnecessary servers and can improve performance with large numbers of available servers.

```python
# Multi-server setup with server manager
client = MCPClient.from_config_file("multi_server_config.json")
agent = MCPAgent(
    llm=llm,
    client=client,
    use_server_manager=True
)

# The agent automatically selects servers based on tool usage
result = await agent.run(
    "Search for a place in Barcelona on Airbnb, then Google nearby restaurants."
)
```

### Benefits

- **Performance**: Only connects to servers when their tools are actually needed
- **Reduced Confusion**: Agents work better with focused tool sets rather than many tools at once
- **Resource Efficiency**: Saves memory and connection overhead
- **Automatic Selection**: No need to manually specify `server_name` for most use cases
- **Scalability**: Better performance with large numbers of servers

### When to Use

- **Multi-server environments**: Essential for setups with 3+ servers
- **Resource-constrained environments**: When memory or connection limits are a concern
- **Complex workflows**: When agents need to dynamically choose between different tool categories
- **Production deployments**: For better resource management and performance

For more details on server manager implementation, see the [Server Manager](./server-manager) guide.

## Memory Configuration

MCPAgent supports conversation memory to maintain context across interactions:

```python
# Enable memory (default)
agent = MCPAgent(
    llm=llm,
    client=client,
    memory_enabled=True
)

# Disable memory for stateless interactions
agent = MCPAgent(
    llm=llm,
    client=client,
    memory_enabled=False
)
```

## System Prompt Customization

You can customize the agent's behavior through system prompts:

### Custom System Prompt

```python
custom_prompt = """
You are a helpful assistant specialized in data analysis.
Always provide detailed explanations for your reasoning.
When working with data, prioritize accuracy over speed.
"""

agent = MCPAgent(
    llm=llm,
    client=client,
    system_prompt=custom_prompt
)
```

### Additional Instructions

Add task-specific instructions without replacing the base system prompt:

```python
agent = MCPAgent(
    llm=llm,
    client=client,
    additional_instructions="Focus on finding recent information from the last 6 months."
)
```

### System Prompt Templates

For more advanced customization, you can provide a custom system prompt template:

```python
from langchain.prompts import ChatPromptTemplate

custom_template = ChatPromptTemplate.from_messages([
    ("system", "You are an expert {domain} assistant. {instructions}"),
    ("human", "{input}"),
    # ... other message templates
])

agent = MCPAgent(
    llm=llm,
    client=client,
    system_prompt_template=custom_template
)
```

## Performance Configuration

Configure agent performance characteristics:

```python
# Limit execution steps
agent = MCPAgent(
    llm=llm,
    client=client,
    max_steps=10  # Prevent runaway execution
)

# Enable server manager for better performance with multiple servers
agent = MCPAgent(
    llm=llm,
    client=client,
    use_server_manager=True  # Only connects servers when needed
)

# Limit concurrent servers (if not using server manager)
agent = MCPAgent(
    llm=llm,
    client=client,
    max_concurrent_servers=3
)
```

## Debugging Configuration

Enable debugging features during development:

```python
# Enable verbose logging
agent = MCPAgent(
    llm=llm,
    client=client,
    verbose=True,
    debug=True
)

# Set debug level programmatically
import mcp_use
mcp_use.set_debug(2)  # Full verbose logging
```

## Agent Initialization

Control when and how the agent initializes:

```python
# Auto-initialize on creation
agent = MCPAgent(
    llm=llm,
    client=client,
    auto_initialize=True
)

# Manual initialization for more control
agent = MCPAgent(
    llm=llm,
    client=client,
    auto_initialize=False
)

# Initialize manually when ready
await agent.initialize()
```

## Error Handling

Configure how the agent handles errors:

```python
# Set timeout for agent operations
agent = MCPAgent(
    llm=llm,
    client=client,
    timeout=60  # 60 seconds timeout
)

# Configure retry behavior (if supported by LLM)
llm = ChatOpenAI(
    model="gpt-4o",
    max_retries=3,
    retry_delay=2
)

agent = MCPAgent(llm=llm, client=client)
```

## Best Practices

1. **LLM Selection**: Use models with tool calling capabilities
2. **Step Limits**: Set reasonable `max_steps` to prevent runaway execution
3. **Tool Restrictions**: Use `disallowed_tools` for security
4. **Memory Management**: Disable memory for stateless use cases
5. **Server Manager**: Enable for multi-server setups
6. **System Prompts**: Customize for domain-specific tasks
7. **Error Handling**: Implement proper timeout and retry logic
8. **Testing**: Test agent configurations in development environments

## Common Issues

1. **No Tools Available**: Check client configuration and server connections
2. **Tool Execution Failures**: Enable verbose logging and check tool arguments
3. **Memory Issues**: Disable memory or limit concurrent servers
4. **Timeout Errors**: Increase `max_steps` or agent timeout values

For detailed troubleshooting, see the [Common Issues](../troubleshooting/common-issues) guide.



================================================
FILE: docs/agent/interactive-chat-patterns.mdx
================================================
---
title: "Interactive Chat Patterns"
description: "Create interactive chat interfaces with persistent conversation memory"
icon: "message-circle"
---

## Building a chat loop

With mcp-use you can build interactive interface where users can have conversations with
your `MCPAgent`, maintaining context and memory across multiple queries.

## Basic chat loop
Here's a basic chat-loop with conversation memory enabled:
```python chat_loop.py
import asyncio
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from mcp_use import MCPAgent, MCPClient

async def basic_chat_loop():
    """Simple console chat loop with MCPAgent"""
    # Load environment variables
    load_dotenv()

    # MCP server configuration
    config = {
        "mcpServers": {
            "playwright": {
                "command": "npx",
                "args": ["@playwright/mcp@latest"],
                "env": {"DISPLAY": ":1"}
            },
            "filesystem": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-filesystem", "/tmp"]
            }
        }
    }

    # Create client and agent
    client = MCPClient.from_dict(config)
    llm = ChatOpenAI(model="gpt-4o")

    agent = MCPAgent(llm=llm,
        client=client,
        memory_enabled=True, # Enable memory to track conversation history
        max_steps=20)

    # Some initial messages
    print("🤖 MCP Agent Chat")
    print("Type 'quit/exit' to exit the chat.")
    print("Type 'clear' to clear conversation history")

    try:
        while True:
            user_input = input("\nYou: ")

            if user_input.lower() in ['quit', 'exit']:
                print("👋 Goodbye!")
                break
            
            if user_input.lower() == 'clear':
                agent.clear_conversation_history()
                print("🧹 Conversation history cleared.")
                continue

            # Skip empty messages
            if not user_input:
                continue
            
            try:
                print("\n🤖 Assistant: ", end="", flush=True)
                response = await agent.run(user_input)
                print(response)
            except KeyboardInterrupt: # Handle keyboard interrupt
                print("\n\n⏸️ Interrupted by user")
                break
            except Exception as e:
                print(f"\n❌ Error: {e}")
                print("Please try again or type 'exit' to quit.")
    finally:
        await client.close_all_sessions()

if __name__ == "__main__":
    asyncio.run(basic_chat_loop())
```

## Streaming Chat Loop

Here's a chat loop with streaming responses enabled:

```python chat_loop_streaming.py
import asyncio
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from mcp_use import MCPAgent, MCPClient

async def streaming_chat_loop():
    """Chat loop with streaming responses with MCPAgent"""
    # Load environment variables
    load_dotenv()

    # MCP server configuration
    config = {
        "mcpServers": {
            "playwright": {
                "command": "npx",
                "args": ["@playwright/mcp@latest"],
                "env": {"DISPLAY": ":1"}
            }
        }
    }

    # Create client and agent
    client = MCPClient.from_dict(config)
    llm = ChatOpenAI(model="gpt-4o")

    agent = MCPAgent(llm=llm,
        client=client,
        memory_enabled=True, # Enable memory to track conversation history
        max_steps=20)
    
    # Some initial messages
    print("🤖 MCP Agent Chat (Streaming)")
    print("Type 'quit/exit' to exit the chat.")
    print("Type 'clear' to clear conversation history")

    try:
        while True:
            user_input = input("\nYou: ")

            if user_input.lower() in ['quit', 'exit']:
                print("👋 Goodbye!")
                break
            
            if user_input.lower() == 'clear':
                agent.clear_conversation_history()
                print("🧹 Conversation history cleared.")
                continue

            if not user_input: # Skip empty messages
                continue
            
            try:
                print("\n🤖 Assistant: ", end="", flush=True)

                # Stream the response
                async for chunk in agent.stream(user_input):
                    print(chunk, end="", flush=True)
                print()
            except KeyboardInterrupt: # Handle keyboard interrupt
                print("\n\n⏸️ Interrupted by user")
                break
            except Exception as e:
                print(f"\n❌ Error: {e}")
                print("Please try again or type 'exit' to quit.")
    finally:
        await client.close_all_sessions()

if __name__ == "__main__":
    asyncio.run(streaming_chat_loop())
```

## Chat Loop with Structured I/O

It's possible to create a chat loop that can handle both natural language and structured inputs, allowing users to request specific tasks or analyses in a structured format. Here's an example of how to implement this:

```python
import asyncio
from dotenv import load_dotenv
from pydantic import BaseModel, Field
from langchain_openai import ChatOpenAI
from mcp_use import MCPAgent, MCPClient
from typing import Optional

class TaskRequest(BaseModel):
    task_type: Optional[str] = Field(description="The type of task to perform")
    description: Optional[str] = Field(description="Detailed description of the task")
    priority: Optional[str] = Field(description="Priority level: low, medium, high")

async def structured_chat_loop():
    """Chat loop that can handle both natural language and structured inputs."""
    # Load environment variables
    load_dotenv()

    # MCP server configuration
    config = {
        "mcpServers": {
            "playwright": {
                "command": "npx",
                "args": ["@playwright/mcp@latest"],
                "env": {"DISPLAY": ":1"}
            }
        }
    }

    # Create client and agent
    client = MCPClient.from_dict(config)
    llm = ChatOpenAI(model="gpt-4o")

    agent = MCPAgent(
        llm=llm,
        client=client,
        memory_enabled=True, # Enable memory to track conversation history
        max_steps=20
    )

    # Initial messages
    print("🤖 MCP Agent Chat (Structured)")
    print("You can chat naturally or request structured task analysis")
    print("Type 'task' to create a structured task request")

    try:
        while True:
            user_input = input("\nYou: ")
            if user_input.lower() in ['exit', 'quit']:
                print("👋 Goodbye!")
                break

            try:
                if user_input.lower() == 'task':
                    print("\n📋 Creating structured task...")
                    task_description = input("Describe your task: ")

                    task: TaskRequest = await agent.run(
                        f"Analyze a task with the following description: {task_description}",
                        output_schema=TaskRequest
                    )

                    # Print task analysis
                    print(f"\n✅ Task Analysis:")
                    print(f"• Type: {task.task_type}")
                    print(f"• Description: {task.description}")
                    print(f"• Priority: {task.priority or 'low'}")

                    proceed = input("\nDo you want to proceed with this task? (y/n)")
                    if proceed.lower() == 'y':
                        response = await agent.run(
                            f"Execute the following task: {task.description}"
                        )
                        print(f"\n🤖 Assistant: {response}")
                else:
                    # Regular conversation
                    response = await agent.run(user_input)
                    print(f"\n🤖 Assistant: {response}")
            except KeyboardInterrupt:
                print("\n👋 Goodbye!")
                break
            except Exception as e:
                print(f"❌ Error: {e}")
                print("Please try again or type 'exit' to quit.")

    finally:
        await client.close_all_sessions()

if __name__ == "__main__":
    asyncio.run(structured_chat_loop())
```

## Next Steps

<CardGroup cols={3}>
  <Card title="Agent Configuration" icon="cloud" href="/agent/agent-configuration">
    Learn more about configuring agents for optimal streaming performance
  </Card>
  <Card title="Multi-Server Setup" icon="server" href="/advanced/multi-server-setup">
    Stream output from agents using multiple MCP servers
  </Card>
  <Card title="Security Best Practices" icon="shield" href="/advanced/security">
    Learn how to secure your MCP deployments
  </Card>
</CardGroup>



================================================
FILE: docs/agent/llm-integration.mdx
================================================
---
title: "LLM Integration"
description: "Integrate any LLM with mcp_use through LangChain"
icon: "brain"
---

# LLM Integration Guide

mcp_use supports integration with **any** Language Learning Model (LLM) that is compatible with LangChain. This guide covers how to use different LLM providers with mcp_use and emphasizes the flexibility to use any LangChain-supported model.

<Note>
**Key Requirement**: Your chosen LLM must support **tool calling** (also known as function calling) to work with MCP tools. Most modern LLMs support this feature.
</Note>

## Universal LLM Support

mcp_use leverages LangChain's architecture to support any LLM that implements the LangChain interface. This means you can use virtually any model from any provider, including:

<CardGroup cols={2}>
  <Card title="OpenAI" icon="robot">
    GPT-4, GPT-4o, GPT-3.5 Turbo
  </Card>
  <Card title="Anthropic" icon="anthropic">
    Claude 3.5 Sonnet, Claude 3 Opus, Claude 3 Haiku
  </Card>
  <Card title="Google" icon="google">
    Gemini Pro, Gemini Flash, PaLM
  </Card>
  <Card title="Open Source" icon="code">
    Llama, Mistral, CodeLlama via various providers
  </Card>
</CardGroup>

## Popular Provider Examples

### OpenAI

```python
from langchain_openai import ChatOpenAI
from mcp_use import MCPAgent, MCPClient

# Initialize OpenAI model
llm = ChatOpenAI(
    model="gpt-4o",
    temperature=0.7,
    api_key="your-api-key"  # Or set OPENAI_API_KEY env var
)

# Create agent
agent = MCPAgent(llm=llm, client=client)
```

### Anthropic Claude

```python
from langchain_anthropic import ChatAnthropic
from mcp_use import MCPAgent, MCPClient

# Initialize Claude model
llm = ChatAnthropic(
    model="claude-3-5-sonnet-20241022",
    temperature=0.7,
    api_key="your-api-key"  # Or set ANTHROPIC_API_KEY env var
)

# Create agent
agent = MCPAgent(llm=llm, client=client)
```

### Google Gemini

```python
from langchain_google_genai import ChatGoogleGenerativeAI
from mcp_use import MCPAgent, MCPClient

# Initialize Gemini model
llm = ChatGoogleGenerativeAI(
    model="gemini-pro",
    temperature=0.7,
    google_api_key="your-api-key"  # Or set GOOGLE_API_KEY env var
)

# Create agent
agent = MCPAgent(llm=llm, client=client)
```

### Groq (Fast Inference)

```python
from langchain_groq import ChatGroq
from mcp_use import MCPAgent, MCPClient

# Initialize Groq model
llm = ChatGroq(
    model="llama-3.1-70b-versatile",
    temperature=0.7,
    api_key="your-api-key"  # Or set GROQ_API_KEY env var
)

# Create agent
agent = MCPAgent(llm=llm, client=client)
```

### Local Models with Ollama

```python
from langchain_ollama import ChatOllama
from mcp_use import MCPAgent, MCPClient

# Initialize local Ollama model
llm = ChatOllama(
    model="llama3.1:8b",
    base_url="http://localhost:11434",  # Default Ollama URL
    temperature=0.7
)

# Create agent
agent = MCPAgent(llm=llm, client=client)
```

## Model Requirements

### Tool Calling Support

For MCP tools to work properly, your chosen model **must support tool calling**. Most modern LLMs support this:

✅ **Supported Models:**
- OpenAI: GPT-4, GPT-4o, GPT-3.5 Turbo
- Anthropic: Claude 3+ series
- Google: Gemini Pro, Gemini Flash
- Groq: Llama 3.1, Mixtral models
- Most recent open-source models

❌ **Not Supported:**
- Basic completion models without tool calling
- Very old model versions
- Models without function calling capabilities

### Checking Tool Support

You can verify if a model supports tools:

```python
# Check if the model supports tool calling
if hasattr(llm, 'bind_tools') or hasattr(llm, 'with_tools'):
    print("✅ Model supports tool calling")
else:
    print("❌ Model may not support tool calling")
```

## Model Configuration Tips

### Temperature Settings

Different tasks benefit from different temperature settings:

```python
# For precise, deterministic tasks
llm = ChatOpenAI(model="gpt-4o", temperature=0.1)

# For creative tasks
llm = ChatOpenAI(model="gpt-4o", temperature=0.8)

# Balanced approach (recommended)
llm = ChatOpenAI(model="gpt-4o", temperature=0.7)
```

### Model-Specific Parameters

Each provider has unique parameters you can configure:

```python
# OpenAI with custom parameters
llm = ChatOpenAI(
    model="gpt-4o",
    temperature=0.7,
    max_tokens=4000,
    top_p=0.9,
    frequency_penalty=0.1,
    presence_penalty=0.1
)

# Anthropic with custom parameters
llm = ChatAnthropic(
    model="claude-3-5-sonnet-20241022",
    temperature=0.7,
    max_tokens=4000,
    top_p=0.9
)
```

## Cost Optimization

### Choosing Cost-Effective Models

Consider your use case when selecting models:

| Use Case | Recommended Models | Reason |
|----------|-------------------|--------|
| Development/Testing | GPT-3.5 Turbo, Claude Haiku | Lower cost, good performance |
| Production/Complex | GPT-4o, Claude Sonnet | Best performance |
| High Volume | Groq models | Fast inference, competitive pricing |
| Privacy/Local | Ollama models | No API costs, data stays local |

### Token Management

```python
# Set reasonable token limits
llm = ChatOpenAI(
    model="gpt-4o",
    max_tokens=2000,  # Limit response length
    temperature=0.7
)

# Monitor usage in your application
agent = MCPAgent(
    llm=llm,
    client=client,
    max_steps=10  # Limit agent steps to control costs
)
```

## Environment Setup

Always use environment variables for API keys:

```bash
# .env file
OPENAI_API_KEY=sk-...
ANTHROPIC_API_KEY=sk-ant-...
GOOGLE_API_KEY=AI...
GROQ_API_KEY=gsk_...
```

```python
from dotenv import load_dotenv
load_dotenv()  # Load environment variables

# Now LangChain will automatically use the keys
llm = ChatOpenAI(model="gpt-4o")  # No need to pass api_key
```

## Advanced Integration

### Custom Model Wrappers

You can create custom wrappers for specialized models:

```python
from langchain_core.language_models import BaseChatModel
from langchain_core.messages import BaseMessage

class CustomModelWrapper(BaseChatModel):
    """Custom wrapper for your model"""

    def _generate(self, messages, stop=None, **kwargs):
        # Your custom model implementation
        pass

    def _llm_type(self):
        return "custom_model"

# Use with mcp_use
llm = CustomModelWrapper()
agent = MCPAgent(llm=llm, client=client)
```

### Model Switching

Switch between models dynamically:

```python
def get_model_for_task(task_type: str):
    if task_type == "complex_reasoning":
        return ChatOpenAI(model="gpt-4o", temperature=0.1)
    elif task_type == "creative":
        return ChatAnthropic(model="claude-3-5-sonnet-20241022", temperature=0.8)
    else:
        return ChatOpenAI(model="gpt-3.5-turbo", temperature=0.7)

# Use different models for different tasks
llm = get_model_for_task("complex_reasoning")
agent = MCPAgent(llm=llm, client=client)
```

## Troubleshooting

### Common Issues

1. **"Model doesn't support tools"**: Ensure your model supports function calling
2. **API key errors**: Check environment variables and API key validity
3. **Rate limiting**: Implement retry logic or use different models
4. **Token limits**: Adjust max_tokens or use models with larger context windows

### Debug Model Behavior

```python
# Enable verbose logging to see model interactions
agent = MCPAgent(
    llm=llm,
    client=client,
    verbose=True  # Shows detailed model interactions
)
```

For more LLM providers and detailed integration examples, visit the [LangChain Chat Models documentation](https://python.langchain.com/docs/integrations/chat/).



================================================
FILE: docs/agent/server-manager.mdx
================================================
---
title: 'Server Manager'
description: 'Intelligent management of multiple MCP servers and dynamic tool discovery'
icon: 'server-cog'
---

# Server Manager: Dynamic Multi-Server Intelligence

The Server Manager is the brain behind intelligent MCP server orchestration. It transforms your agent from a static tool user into a dynamic, adaptive assistant that can discover, connect to, and intelligently utilize tools from multiple MCP servers on-demand.

## 🎯 What Makes It Special

Instead of overwhelming your agent with hundreds of tools from all servers at once, the Server Manager:

- **Dynamically loads tools** only when needed, with full schemas
- **Intelligently discovers** the right server for each task
- **Automatically updates** available tools as connections change
- **Provides semantic search** across all server tools
- **Manages connection lifecycle** efficiently

## 🏗️ Architecture Overview

```mermaid
graph TB
    Agent[MCPAgent] --> SM[ServerManager]
    SM --> S1[Web Server]
    SM --> S2[File Server]
    SM --> S3[Database Server]

    SM --> Tools[Dynamic Tools]
```

## 🔄 Dynamic Tool Loading Process

```mermaid
sequenceDiagram
    Agent->>ServerManager: Connect to server
    ServerManager->>Server: Get tools
    Server->>ServerManager: Return tools
    ServerManager->>Agent: Tools now available
    Agent->>Server: Use tools directly
```

## 🚀 Getting Started

Enable the Server Manager in your agent:

```python
from mcp_use import MCPClient, MCPAgent
from langchain_openai import ChatOpenAI

# Create client with multiple servers
client = MCPClient.from_dict({
    "mcpServers": {
        "playwright": {
            "command": "npx",
            "args": ["@playwright/mcp@latest"]
        },
        "filesystem": {
            "command": "uvx",
            "args": ["mcp-server-filesystem", "/tmp"]
        }
    }
})

# 🎯 Enable Server Manager
agent = MCPAgent(
    llm=ChatOpenAI(model="gpt-4"),
    client=client,
    use_server_manager=True  # ✨ This is the magic switch!
)
```


## 🔍 Tool Discovery Flow




## 🛠️ Management Tools Deep Dive

### Core Server Management

| Tool | Purpose | Example |
|------|---------|---------|
| `list_mcp_servers` | Discovery of available servers and their tools | "What servers do I have access to?" |
| `connect_to_mcp_server` | Activate a server and load its tools | "Connect to the filesystem server" |
| `get_active_mcp_server` | Check current connection status | "Which server am I currently using?" |
| `disconnect_from_mcp_server` | Deactivate server and remove its tools | "Disconnect from current server" |
| `search_mcp_tools` | Semantic search across all server tools | "Find tools for image processing" |

### Smart Tool Search Example

```python
# Agent automatically discovers and uses the right tools
result = await agent.run("""
I need to:
1. Find tools for web scraping
2. Connect to the right server
3. Scrape data from https://example.com
4. Save it to a file

Start by searching for relevant tools.
""")
```

**Agent Process:**
```mermaid
graph LR
    Search[Search Tools] --> Connect[Connect Server]
    Connect --> Use[Use Tools]
```

## 🎭 Real-World Use Cases

### 1. Multi-Server Data Pipeline

```python
result = await agent.run("""
Create a data pipeline that:
1. Scrapes product data from an e-commerce site
2. Processes and cleans the data
3. Saves it to a CSV file
4. Loads it into a SQLite database

Figure out which servers and tools you need.
""")
```

**Server Flow:**
```
playwright → filesystem → database
    ↓            ↓          ↓
 scraping → save CSV → load data
```

### 2. Content Creation Workflow

```python
result = await agent.run("""
I want to:
1. Search for trending topics online
2. Generate an image based on the topic
3. Write a blog post about it
4. Save everything to files

What tools do I need for this?
""")
```

## 🚀 Performance Benefits

The Server Manager provides focused tool access:

- **Without Server Manager**: All 100+ tools from all servers loaded at once, overwhelming the model
- **With Server Manager**: Only 5-15 relevant tools from the active server, providing clear focus

##  Core Features

The Server Manager provides these powerful capabilities:

- **🔗 Dynamic Tool Addition**: Server tools automatically added with full schemas
- **⚡ Real-time Updates**: Tool list updates immediately when connecting/disconnecting
- **🧹 Clean Architecture**: Direct tool access with proper schemas
- **🎯 Model Understanding**: Tools come with native schemas and validation
- **📊 Smart Logging**: Detailed insights into tool changes and server status

## 🏁 Complete Example

```python
import asyncio
from mcp_use import MCPClient, MCPAgent
from langchain_openai import ChatOpenAI

async def demo_server_manager():
    # Multi-server configuration
    client = MCPClient.from_dict({
        "mcpServers": {
            "web": {"command": "npx", "args": ["@playwright/mcp@latest"]},
            "files": {"command": "uvx", "args": ["mcp-server-filesystem", "/tmp"]},
            "database": {"command": "uvx", "args": ["mcp-server-sqlite"]}
        }
    })

    # Agent with Server Manager
    agent = MCPAgent(
        llm=ChatOpenAI(model="gpt-4"),
        client=client,
        use_server_manager=True,
        verbose=True  # See the magic happen!
    )

    # Complex multi-server task
    result = await agent.run("""
    I need to build a complete data collection system:

    1. First, show me what servers and tools are available
    2. Scrape product information from https://example-store.com
    3. Clean and structure the data
    4. Save it as both JSON and CSV files
    5. Load the data into a SQLite database
    6. Generate a summary report

    Guide me through each step and show me how you discover and use the right tools.
    """)

    print("🎉 Task completed!")
    print(result)

    await agent.close()

if __name__ == "__main__":
    asyncio.run(demo_server_manager())
```

The Server Manager transforms your MCP agent from a static tool user into an intelligent, adaptive assistant that can dynamically discover and utilize the perfect tools for any task! 🚀



## Bring Your Own Server Manager

For ultimate control, you can create your own server manager. By implementing the `BaseServerManager` abstract class, you can define custom logic for tool discovery, dynamic tool creation, or integration with other systems. The server manager's primary role is to provide tools **to the agent**. These can be management tools for connecting to external MCP servers, or, as shown below, custom tools that operate entirely within the agent's environment without needing an external server.

Here’s a minimal example of a custom server manager that provides a single, hard-coded tool directly to the agent.

```python
import asyncio
from mcp_use.agents import MCPAgent
from mcp_use.managers.base import BaseServerManager
from langchain_core.tools import BaseTool
from langchain_openai import ChatOpenAI
from pydantic import BaseModel

# 1. Define a custom tool
class HelloWorldTool(BaseTool):
    """A simple tool that returns a greeting."""
    name: str = "hello_world"
    description: str = "Returns 'Hello, World!'"
    args_schema: type[BaseModel] | None = None
    def _run(self) -> str: return "Hello, World!"
    async def _arun(self) -> str: return "Hello, World!"

# 2. Implement the BaseServerManager interface
class SimpleServerManager(BaseServerManager):
    """A minimal server manager with one tool."""
    def __init__(self):
        self._tools = [HelloWorldTool()]
    async def initialize(self) -> None: pass
    @property
    def tools(self) -> list[BaseTool]: return self._tools
    def has_tool_changes(self, current_tool_names: set[str]) -> bool:
        return {tool.name for tool in self.tools} != current_tool_names

# 3. Pass your custom manager to the agent
async def useCustomManager():
    agent = MCPAgent(
        llm=ChatOpenAI(model="gpt-4o"),
        use_server_manager=True,
        server_manager=SimpleServerManager(),
    )
    # The agent now has access to your custom tool
    result = await agent.run("Use the hello_world tool")
    print(result) #> "Hello, World!"
    await agent.close()

asyncio.run(useCustomManager())
```



================================================
FILE: docs/agent/streaming.mdx
================================================
[Binary file]


================================================
FILE: docs/agent/structured-output.mdx
================================================
---
title: "Agent Structured Output"
description: "Get strongly-typed Pydantic models with intelligent retry logic"
icon: "shapes"
---

# Agent Structured Output

The MCPAgent supports structured output, allowing you to get strongly-typed Pydantic models instead of plain text responses. The agent becomes **schema-aware** and will intelligently retry to gather missing information until all required fields can be populated.

## How it Works

When you provide an `output_schema` parameter, the agent:

1. **Understands requirements** - The agent knows exactly what information it needs to collect
2. **Attempts structured output** - At completion points, tries to format the result into your schema
3. **Intelligently retries** - If required fields are missing, continues execution to gather the missing data
4. **Validates completeness** - Only finishes when all required fields can be populated

## Basic Example

```python
import asyncio
from pydantic import BaseModel, Field
from langchain_openai import ChatOpenAI
from mcp_use import MCPAgent, MCPClient

class WeatherInfo(BaseModel):
    """Weather information for a location"""
    city: str = Field(description="City name")
    temperature: float = Field(description="Temperature in Celsius")
    condition: str = Field(description="Weather condition")
    humidity: int = Field(description="Humidity percentage")

async def main():
    # Setup client and agent
    client = MCPClient(config={"mcpServers": {...}})
    llm = ChatOpenAI(model="gpt-4o")
    agent = MCPAgent(llm=llm, client=client)

    # Get structured output
    weather: WeatherInfo = await agent.run(
        "Get the current weather in San Francisco",
        output_schema=WeatherInfo
    )

    print(f"Temperature in {weather.city}: {weather.temperature}°C")
    print(f"Condition: {weather.condition}")
    print(f"Humidity: {weather.humidity}%")

asyncio.run(main())
```

## Key Benefits

- **Type Safety**: Get Pydantic models with full IDE support and validation
- **Intelligent Gathering**: Agent knows what information is required and won't stop until it has everything
- **Automatic Retry**: Missing fields trigger continued execution automatically
- **Field Validation**: Built-in validation for required fields, data types, and constraints

The agent will continue working until all required fields in your schema can be populated, ensuring you always get complete, structured data.



================================================
FILE: docs/api-reference/adapters.mdx
================================================
---
title: "Adapters"
description: "Adapter classes for framework integration"
icon: "plug-2"
---

# Adapters API Reference

Adapters provide a bridge between MCP tools and different agent frameworks. They convert MCP tool definitions into framework-specific formats.

## BaseAdapter

The abstract base class for all adapters.

### BaseAdapter()

Base adapter class that defines the interface for tool conversion.

**Methods:**

#### async create_tools(client: MCPClient, **kwargs) -> List[Any]

Converts MCP tools to framework-specific tool format.

**Parameters:**
- `client` (MCPClient): The MCP client instance
- `**kwargs`: Additional framework-specific parameters

**Returns:**
- `List[Any]`: List of framework-specific tool objects

**Raises:**
- `NotImplementedError`: Must be implemented by subclasses

## LangChainAdapter

Adapter for LangChain framework integration.

### LangChainAdapter()

Creates tools compatible with LangChain agents and runnables.

**Example:**
```python
from mcp_use import MCPClient
from mcp_use.adapters import LangChainAdapter

client = MCPClient.from_config_file("config.json")
adapter = LangChainAdapter()
tools = await adapter.create_tools(client)
```

### Methods

#### async create_tools(client: MCPClient, allowed_tools=None, disallowed_tools=None) -> List[BaseTool]

Converts MCP tools to LangChain BaseTool objects.

**Parameters:**
- `client` (MCPClient): The MCP client instance
- `allowed_tools` (List[str], optional): Whitelist of tool names to include
- `disallowed_tools` (List[str], optional): Blacklist of tool names to exclude

**Returns:**
- `List[BaseTool]`: List of LangChain tool objects

**Example:**
```python
# Create all available tools
tools = await adapter.create_tools(client)

# Create only specific tools
tools = await adapter.create_tools(
    client,
    allowed_tools=["file_read", "file_write"]
)

# Exclude dangerous tools
tools = await adapter.create_tools(
    client,
    disallowed_tools=["system_execute", "file_delete"]
)
```

#### async create_tool(client: MCPClient, tool_definition: dict) -> BaseTool

Creates a single LangChain tool from an MCP tool definition.

**Parameters:**
- `client` (MCPClient): The MCP client instance
- `tool_definition` (dict): MCP tool definition

**Returns:**
- `BaseTool`: LangChain tool object

**Example:**
```python
tool_def = {
    "name": "file_read",
    "description": "Read file contents",
    "inputSchema": {
        "type": "object",
        "properties": {
            "path": {"type": "string"}
        },
        "required": ["path"]
    }
}

tool = await adapter.create_tool(client, tool_def)
```

## Tool Filtering

Adapters support various filtering mechanisms to control which tools are available.

### Whitelist Filtering

Only include specified tools:

```python
adapter = LangChainAdapter()
tools = await adapter.create_tools(
    client,
    allowed_tools=[
        "file_read",
        "file_write",
        "web_search",
        "sqlite_query"
    ]
)
```

### Blacklist Filtering

Exclude potentially dangerous tools:

```python
adapter = LangChainAdapter()
tools = await adapter.create_tools(
    client,
    disallowed_tools=[
        "system_execute",
        "file_delete",
        "network_request",
        "process_kill"
    ]
)
```

### Pattern-Based Filtering

Use patterns for flexible filtering:

```python
import re
from typing import Any
from mcp.types import Tool
from ..connectors.base import BaseConnector

class PatternLangChainAdapter(LangChainAdapter):
    def __init__(self, allowed_patterns=None, disallowed_patterns=None):
        super().__init__()
        self.allowed_patterns = allowed_patterns or []
        self.disallowed_patterns = disallowed_patterns or []

    def _convert_tool(self, mcp_tool: Tool, connector: BaseConnector) -> Any:
        """Override to add pattern-based filtering."""
        tool_name = mcp_tool.name

        # Check allowed patterns
        if self.allowed_patterns:
            if not any(re.match(pattern, tool_name) for pattern in self.allowed_patterns):
                return None

        # Check disallowed patterns
        if self.disallowed_patterns:
            if any(re.match(pattern, tool_name) for pattern in self.disallowed_patterns):
                return None

        # Use parent class conversion
        return super()._convert_tool(mcp_tool, connector)

# Usage
adapter = PatternLangChainAdapter(
    allowed_patterns=[r"file_.*", r"sqlite_.*"],  # Only file and sqlite tools
    disallowed_patterns=[r".*_delete", r".*_execute"]  # No delete or execute tools
)
tools = await PatternLangChainAdapter.create_tools(client)
```

## Custom Adapters

Create custom adapters for other frameworks:

### CrewAI Adapter Example

```python
from mcp_use.adapters import BaseAdapter

class CrewAIAdapter(BaseAdapter):
    def _convert_tool(self, mcp_tool: Tool, connector: BaseConnector):
        """Convert MCP tool to CrewAI format."""
        from crewai_tools import BaseTool as CrewAIBaseTool

        class MCPCrewAITool(CrewAIBaseTool):
            name = mcp_tool.name
            description = mcp_tool.description

            async def _run(self, **kwargs):
                return await connector.call_tool(self.name, kwargs)

        return MCPCrewAITool()

    def _convert_resource(self, mcp_resource: Resource, connector: BaseConnector):
        """Convert MCP resource to CrewAI format - implement as needed."""
        return None  # Skip resources for this example

    def _convert_prompt(self, mcp_prompt: Prompt, connector: BaseConnector):
        """Convert MCP prompt to CrewAI format - implement as needed."""
        return None  # Skip prompts for this example

# Usage
tools = await CrewAIAdapter.create_tools(client)
```

### AutoGen Adapter Example

```python
class AutoGenAdapter(BaseAdapter):
    def _convert_tool(self, mcp_tool: Tool, connector: BaseConnector):
        """Convert MCP tool to AutoGen format."""
        async def implementation(**kwargs):
            return await connector.call_tool(mcp_tool.name, kwargs)

        return {
            "type": "function",
            "function": {
                "name": mcp_tool.name,
                "description": mcp_tool.description,
                "parameters": mcp_tool.inputSchema or {},
                "implementation": implementation
            }
        }

    def _convert_resource(self, mcp_resource: Resource, connector: BaseConnector):
        """Convert MCP resource to AutoGen format - implement as needed."""
        return None  # Skip resources for this example

    def _convert_prompt(self, mcp_prompt: Prompt, connector: BaseConnector):
        """Convert MCP prompt to AutoGen format - implement as needed."""
        return None  # Skip prompts for this example

# Usage
tools = await AutoGenAdapter.create_tools(client)
```

## Tool Metadata

Adapters preserve and enhance tool metadata:

### Accessing Tool Information

```python
adapter = LangChainAdapter()
tools = await adapter.create_tools(client)

for tool in tools:
    print(f"Name: {tool.name}")
    print(f"Description: {tool.description}")
    print(f"Args Schema: {tool.args}")

    # Access MCP-specific metadata
    if hasattr(tool, '_mcp_server'):
        print(f"Server: {tool._mcp_server}")
    if hasattr(tool, '_mcp_original_schema'):
        print(f"Original Schema: {tool._mcp_original_schema}")
```

### Enhanced Tool Descriptions

```python
class EnhancedLangChainAdapter(LangChainAdapter):
    async def create_tool(self, client, tool_def):
        tool = await super().create_tool(client, tool_def)

        # Enhance description with usage examples
        if "examples" in tool_def:
            enhanced_description = f"{tool.description}\n\nExamples:\n"
            for example in tool_def["examples"]:
                enhanced_description += f"- {example}\n"
            tool.description = enhanced_description

        # Add safety warnings
        if self._is_dangerous_tool(tool_def["name"]):
            tool.description += "\n⚠️ WARNING: This tool performs potentially dangerous operations."

        return tool

    def _is_dangerous_tool(self, tool_name):
        dangerous_patterns = ["delete", "execute", "kill", "remove", "destroy"]
        return any(pattern in tool_name.lower() for pattern in dangerous_patterns)
```

## Error Handling

Adapters handle various error conditions:

### Tool Creation Errors

```python
class RobustLangChainAdapter(LangChainAdapter):
    def _convert_tool(self, mcp_tool: Tool, connector: BaseConnector):
        """Override with error handling for individual tool conversion."""
        try:
            return super()._convert_tool(mcp_tool, connector)
        except Exception as e:
            logger.error(f"Failed to create tool {mcp_tool.name}: {e}")
            return None  # Skip this tool

    async def load_tools_for_connector(self, connector: BaseConnector):
        """Override to add robust error handling."""
        try:
            return await super().load_tools_for_connector(connector)
        except Exception as e:
            logger.error(f"Failed to load tools for connector: {e}")
            return []  # Return empty list on failure
```

### Runtime Error Handling

```python
class SafeLangChainAdapter(LangChainAdapter):
    def _convert_tool(self, mcp_tool: Tool, connector: BaseConnector):
        """Override to create tools with enhanced error handling."""
        if mcp_tool.name in self.disallowed_tools:
            return None

        adapter_self = self

        class SafeMcpTool(BaseTool):
            name: str = mcp_tool.name
            description: str = mcp_tool.description
            tool_connector: BaseConnector = connector
            handle_tool_error: bool = True

            def _run(self, **kwargs):
                raise NotImplementedError("MCP tools only support async operations")

            async def _arun(self, **kwargs):
                try:
                    result = await self.tool_connector.call_tool(self.name, kwargs)
                    return adapter_self._parse_mcp_tool_result(result)
                except ToolExecutionError as e:
                    return f"Tool execution failed: {e}"
                except TimeoutError:
                    return "Tool execution timed out"
                except Exception as e:
                    return f"Unexpected error: {e}"

        return SafeMcpTool()
```

## Performance Optimization

### Lazy Tool Creation

```python
class LazyLangChainAdapter(LangChainAdapter):
    def __init__(self, disallowed_tools=None):
        super().__init__(disallowed_tools)
        self._tool_cache = {}

    def _convert_tool(self, mcp_tool: Tool, connector: BaseConnector):
        """Override to create lazy-loading tools."""
        if mcp_tool.name in self.disallowed_tools:
            return None

        adapter_self = self

        class LazyMcpTool(BaseTool):
            name: str = mcp_tool.name
            description: str = mcp_tool.description
            tool_connector: BaseConnector = connector

            def _run(self, **kwargs):
                raise NotImplementedError("MCP tools only support async operations")

            async def _arun(self, **kwargs):
                # Create actual tool on first use
                if self.name not in adapter_self._tool_cache:
                    adapter_self._tool_cache[self.name] = await self._create_actual_tool()

                return await adapter_self._tool_cache[self.name].execute(**kwargs)

            async def _create_actual_tool(self):
                # Create the actual tool implementation
                result = await self.tool_connector.call_tool(self.name, {})
                return adapter_self._parse_mcp_tool_result(result)

        return LazyMcpTool()
```

### Batch Tool Creation

```python
class BatchLangChainAdapter(LangChainAdapter):
    def __init__(self, batch_size=10, disallowed_tools=None):
        super().__init__(disallowed_tools)
        self.batch_size = batch_size

    async def load_tools_for_connector(self, connector: BaseConnector):
        """Override to process tools in batches."""
        # Check if we already have tools for this connector
        if connector in self._connector_tool_map:
            return self._connector_tool_map[connector]

        # Ensure connector is initialized
        success = await self._ensure_connector_initialized(connector)
        if not success:
            return []

        connector_tools = []
        all_tools = connector.tools or []

        # Process tools in batches
        for i in range(0, len(all_tools), self.batch_size):
            batch = all_tools[i:i + self.batch_size]
            batch_tools = []

            for tool in batch:
                converted_tool = self._convert_tool(tool, connector)
                if converted_tool:
                    batch_tools.append(converted_tool)

            connector_tools.extend(batch_tools)

        # Store the tools for this connector
        self._connector_tool_map[connector] = connector_tools
        return connector_tools
```

## Integration Examples

### LangChain Agent

```python
from langchain.agents import create_tool_calling_agent, AgentExecutor
from langchain.prompts import ChatPromptTemplate
from langchain_openai import ChatOpenAI

async def create_langchain_agent():
    # Create MCP client and adapter
    client = MCPClient.from_config_file("config.json")
    tools = await LangChainAdapter.create_tools(client)

    # Create LLM and prompt
    llm = ChatOpenAI(model="gpt-4")
    prompt = ChatPromptTemplate.from_messages([
        ("system", "You are a helpful assistant with access to tools."),
        ("human", "{input}"),
        ("placeholder", "{agent_scratchpad}"),
    ])

    # Create agent
    agent = create_tool_calling_agent(llm, tools, prompt)
    agent_executor = AgentExecutor(agent=agent, tools=tools)

    return agent_executor

# Usage
agent = await create_langchain_agent()
result = await agent.ainvoke({"input": "Read the contents of README.md"})
```

### Custom Framework Integration

```python
class CustomFrameworkTool:
    def __init__(self, name, description, execute_fn):
        self.name = name
        self.description = description
        self.execute_fn = execute_fn

    async def execute(self, **kwargs):
        return await self.execute_fn(**kwargs)

class CustomFrameworkAdapter(BaseAdapter):
    def _convert_tool(self, mcp_tool: Tool, connector: BaseConnector):
        """Convert MCP tool to custom framework format."""
        async def executor(**kwargs):
            return await connector.call_tool(mcp_tool.name, kwargs)

        return CustomFrameworkTool(
            name=mcp_tool.name,
            description=mcp_tool.description,
            execute_fn=executor
        )

    def _convert_resource(self, mcp_resource: Resource, connector: BaseConnector):
        """Convert MCP resource to custom framework format."""
        return None  # Skip resources for this example

    def _convert_prompt(self, mcp_prompt: Prompt, connector: BaseConnector):
        """Convert MCP prompt to custom framework format."""
        return None  # Skip prompts for this example

# Usage
tools = await CustomFrameworkAdapter.create_tools(client)

for tool in tools:
    result = await tool.execute(param1="value1")
```

## See Also

- [MCPClient API Reference](/api-reference/mcpclient) - Core client functionality
- [MCPAgent API Reference](/api-reference/mcpagent) - High-level agent interface
- [Building Custom Agents](/building-custom-agents) - Creating custom agent implementations



================================================
FILE: docs/api-reference/introduction.mdx
================================================
---
title: API Reference
description: "Complete mcp_use API Documentation"
icon: "book"
---

# API Reference

This section provides comprehensive documentation for the mcp_use API, including all components, methods, their arguments, and when to use different options.

## MCPClient

The `MCPClient` is the core class for interacting with MCP servers. It handles connection management, session creation, and communication with MCP servers.

### Initialization Methods

#### From Config File

```python
from mcp_use import MCPClient

client = MCPClient.from_config_file(config_path="config.json")
```

| Parameter     | Type | Required | Description                         |
| ------------- | ---- | -------- | ----------------------------------- |
| `config_path` | str  | Yes      | Path to the JSON configuration file |

#### From Dictionary

```python
from mcp_use import MCPClient

config = {
  "mcpServers": {
    "my_server": {
      "command": "npx",
      "args": ["@my-mcp/server"],
      "env": {
        "PORT": "3000"
      }
    }
  }
}

client = MCPClient.from_dict(config=config)
```

| Parameter | Type | Required | Description                                    |
| --------- | ---- | -------- | ---------------------------------------------- |
| `config`  | dict | Yes      | Dictionary containing MCP server configuration |

#### Sandboxed Execution

Both `from_config_file` and `from_dict` methods support the `options` parameter for configuring client features, including sandboxed execution:

```python
from mcp_use import MCPClient
from mcp_use.types.sandbox import SandboxOptions

# Define sandbox options
sandbox_options: SandboxOptions = {
    "api_key": "your_e2b_api_key",
    "sandbox_template_id": "code-interpreter-v1"
}

# Create client with sandboxed mode enabled
client = MCPClient.from_config_file(
    config_path="config.json",
    sandbox=True,
    sandbox_options=sandbox_options
)
```

The `SandboxOptions` type supports the following options:

| Option                 | Type | Required | Default               | Description                                                                              |
| ---------------------- | ---- | -------- | --------------------- | ---------------------------------------------------------------------------------------- |
| `api_key`              | str  | Yes      | None                  | E2B API key. Required - can be provided directly or via E2B_API_KEY environment variable |
| `sandbox_template_id`  | str  | No       | "base"                | Template ID for the sandbox environment                                                  |
| `supergateway_command` | str  | No       | "npx -y supergateway" | Command to run supergateway                                                              |

**When to use sandboxed execution**:

- When you want to run MCP servers without installing their dependencies locally
- To ensure consistent execution environments across different systems
- For improved security through isolation
- To leverage cloud resources for resource-intensive MCP servers

### Core Methods

#### create_session

Creates a new session with an MCP server.

```python
session = await client.create_session(server_name="my_server")
```

| Parameter     | Type  | Required | Default | Description                             |
| ------------- | ----- | -------- | ------- | --------------------------------------- |
| `server_name` | str   | Yes      | -       | Name of the server as defined in config |
| `timeout`     | float | No       | 30.0    | Connection timeout in seconds           |
| `retry_count` | int   | No       | 3       | Number of connection retry attempts     |

**When to use**:

- Use a longer `timeout` for servers that take more time to initialize
- Increase `retry_count` in unstable network environments
- Use specific `server_name` when working with multiple servers in the same config

#### close_session

Closes a specific session.

```python
await client.close_session(session_id="session_id")
```

| Parameter    | Type | Required | Description                |
| ------------ | ---- | -------- | -------------------------- |
| `session_id` | str  | Yes      | ID of the session to close |

#### close_all_sessions

Closes all active sessions.

```python
await client.close_all_sessions()
```

**When to use**:

- Always call this at the end of your application to clean up resources
- Use when switching between different tasks that require different servers

#### get_server

Gets a server instance by name.

```python
server = client.get_server(name="my_server")
```

| Parameter | Type | Required | Description                             |
| --------- | ---- | -------- | --------------------------------------- |
| `name`    | str  | Yes      | Name of the server as defined in config |

## MCPAgent

The `MCPAgent` class combines an LLM with an MCPClient to create an intelligent agent capable of using MCP tools.

### Initialization

```python
from mcp_use import MCPAgent, MCPClient
from langchain_openai import ChatOpenAI

agent = MCPAgent(
    llm=ChatOpenAI(model="gpt-4o", temperature=0.7),
    client=MCPClient.from_config_file("config.json"),
    max_steps=30,
    session_options={"timeout": 60.0},
    auto_initialize=True,
    memory_enabled=True,
    system_prompt=None,
    system_prompt_template=None,
    additional_instructions=None,
    disallowed_tools=None,
    use_server_manager=False
)
```

| Parameter                 | Type                | Required | Default | Description                                                                                                                                     |
| ------------------------- | ------------------- | -------- | ------- | ----------------------------------------------------------------------------------------------------------------------------------------------- |
| `llm`                     | BaseLanguageModel   | Yes      | -       | Any LangChain-compatible language model                                                                                                         |
| `client`                  | MCPClient           | No       | None    | The MCPClient instance                                                                                                                          |
| `connectors`              | list[BaseConnector] | No       | None    | List of connectors if not using client                                                                                                          |
| `server_name`             | str                 | No       | None    | Name of the server to use                                                                                                                       |
| `max_steps`               | int                 | No       | 5       | Maximum number of steps the agent can take                                                                                                      |
| `auto_initialize`         | bool                | No       | False   | Whether to initialize automatically                                                                                                             |
| `memory_enabled`          | bool                | No       | True    | Whether to enable memory                                                                                                                        |
| `system_prompt`           | str                 | No       | None    | Custom system prompt                                                                                                                            |
| `system_prompt_template`  | str                 | No       | None    | Custom system prompt template                                                                                                                   |
| `additional_instructions` | str                 | No       | None    | Additional instructions for the agent                                                                                                           |
| `session_options`         | dict                | No       | {}      | Additional options for session creation                                                                                                         |
| `output_parser`           | OutputParser        | No       | None    | Custom output parser for LLM responses                                                                                                          |
| `use_server_manager`      | bool                | No       | False   | If `True`, enables automatic selection of the appropriate server based on the chosen tool when multiple servers are configured via `MCPClient`. |
| `disallowed_tools`        | list[str]           | No       | None    | List of tool names that should not be available to the agent                                                                                    |

**When to use different parameters**:

- **llm**:

  - mcp_use supports ANY LLM that is compatible with LangChain
  - You can use models from OpenAI, Anthropic, Google, Mistral, Groq, Cohere, or any other provider with a LangChain integration
  - You can even use open source models via LlamaCpp, HuggingFace, or other interfaces
  - Custom or self-hosted models are also supported as long as they implement LangChain's interface

- **max_steps**:

  - Increase for complex tasks that require many interactions
  - Decrease for simpler tasks to improve efficiency
  - Use higher values (50+) for web browsing or multi-stage tasks
  - Use lower values (10-20) for targeted, specific tasks

- **system_prompt / system_prompt_template**:

  - Use to customize the initial instructions given to the LLM
  - Helps shape the agent's behavior and capabilities
  - Use for specialized tasks or custom interaction patterns

- **memory_enabled**:

  - Enable to maintain conversation history
  - Disable for stateless operation or to save on token usage

- **session_options**:
  - Customize timeout for long-running server operations
  - Set retry parameters for unstable connections
- **use_server_manager**:
  - Set to `True` when using an `MCPClient` configured with multiple servers to enable efficient, automatic server selection per tool call. This can reduce agent confusion and minimize unnecessary server connections.
  - Keep as `False` (default) if using a single server or if you prefer to manually specify the target server using the `server_name` parameter in `agent.run()` or rely on the agent to handle tool availability across all connected servers.
- **disallowed_tools**:
  - Use to restrict which tools the agent can access
  - Helpful for security or to limit agent capabilities
  - Useful when certain tools might be dangerous or unnecessary for a specific task
  - Can be updated after initialization using `set_disallowed_tools()`

### Core Methods

#### run

Runs the agent with a given query.

```python
result = await agent.run(
    query="Find information about Python libraries",
    max_steps=25,
    stop_on_first_result=False
)
```

| Parameter              | Type | Required | Default | Description                      |
| ---------------------- | ---- | -------- | ------- | -------------------------------- |
| `query`                | str  | Yes      | -       | The query to run                 |
| `max_steps`            | int  | No       | None    | Overrides the instance max_steps |
| `stop_on_first_result` | bool | No       | False   | Whether to stop at first result  |
| `server_name`          | str  | No       | None    | Specific server to use           |
| `callbacks`            | list | No       | None    | Callback functions for events    |

**When to use different parameters**:

- **max_steps**: Override the instance default for specific queries
- **stop_on_first_result**: Use True for simple lookups, False for thorough exploration
- **server_name**: Specify when using multiple servers for different tasks
- **callbacks**: Add for monitoring or logging specific runs

#### reset

Resets the agent state.

```python
agent.reset()
```

**When to use**:

- Between different tasks to clear context
- When starting a new conversation thread
- When agent gets stuck in a particular strategy

#### get_history

Gets the agent's interaction history.

```python
history = agent.get_history()
```

**When to use**:

- For debugging agent behavior
- When implementing custom logging
- To provide context for follow-up queries

#### set_disallowed_tools

Sets the list of tools that should not be available to the agent.

```python
agent.set_disallowed_tools(["tool1", "tool2"])
```

| Parameter          | Type      | Required | Description                                     |
| ------------------ | --------- | -------- | ----------------------------------------------- |
| `disallowed_tools` | list[str] | Yes      | List of tool names that should not be available |

**When to use**:

- To restrict access to specific tools for security reasons
- To limit agent capabilities for specific tasks
- To prevent the agent from using potentially dangerous tools
- Note: Changes take effect on next initialization

#### get_disallowed_tools

Gets the list of tools that are not available to the agent.

```python
disallowed = agent.get_disallowed_tools()
```

**When to use**:

- To check which tools are currently restricted
- For debugging or auditing purposes
- To verify tool restrictions before running the agent

## Configuration Details

### MCP Server Configuration Schema

```json
{
  "mcpServers": {
    "server_name": {
      "command": "command_to_run",
      "args": ["arg1", "arg2"],
      "env": {
        "ENV_VAR": "value"
      },
      "timeout": 30.0,
      "retry": {
        "max_attempts": 3,
        "backoff_factor": 1.5
      }
    }
  }
}
```

| Field                  | Type   | Required | Description                          |
| ---------------------- | ------ | -------- | ------------------------------------ |
| `command`              | string | Yes      | The command to start the MCP server  |
| `args`                 | array  | No       | Arguments to pass to the command     |
| `env`                  | object | No       | Environment variables for the server |
| `timeout`              | number | No       | Connection timeout in seconds        |
| `retry`                | object | No       | Retry configuration                  |
| `retry.max_attempts`   | number | No       | Maximum retry attempts               |
| `retry.backoff_factor` | number | No       | Backoff multiplier between retries   |

**When to use different options**:

- **command & args**: Vary based on the specific MCP server implementation
- **env**:

  - Set environment-specific variables needed by the server
  - Override default server settings (ports, directories)
  - Set display settings for GUI-based servers

- **timeout**:

  - Increase for servers with longer startup times
  - Lower for simpler servers to fail fast

- **retry configuration**:
  - Adjust for different network conditions
  - Increase max_attempts in unstable environments
  - Adjust backoff_factor based on server behavior

## Error Handling

mcp_use provides several exception types to handle different error scenarios:

| Exception                | Description                       | When It Occurs                      |
| ------------------------ | --------------------------------- | ----------------------------------- |
| `MCPConnectionError`     | Connection to MCP server failed   | Network issues, server not running  |
| `MCPAuthenticationError` | Authentication with server failed | Invalid credentials or tokens       |
| `MCPTimeoutError`        | Operation timed out               | Server takes too long to respond    |
| `MCPServerError`         | Server returned an error          | Internal server error               |
| `MCPClientError`         | Client-side error                 | Invalid configuration or parameters |
| `MCPError`               | Generic MCP-related error         | Any other MCP-related issue         |

**Handling Strategies**:

```python
from mcp_use.exceptions import MCPConnectionError, MCPTimeoutError

try:
    result = await agent.run("Find information")
except MCPConnectionError:
    # Handle connection issues
    print("Failed to connect to the MCP server")
except MCPTimeoutError:
    # Handle timeout issues
    print("Operation timed out")
except Exception as e:
    # Handle other exceptions
    print(f"An error occurred: {e}")
```

## Advanced Usage

### Multi-Server Configuration

Configure and use multiple MCP servers in a single application:

```python
from mcp_use import MCPClient, MCPAgent
from langchain_openai import ChatOpenAI

# Create client with multiple servers
client = MCPClient.from_dict({
    "mcpServers": {
        "browser": {
            "command": "npx",
            "args": ["@playwright/mcp@latest"]
        },
        "custom_server": {
            "command": "python",
            "args": ["-m", "my_custom_mcp_server"]
        }
    }
})

# Create agent
agent = MCPAgent(llm=ChatOpenAI(model="gpt-4o"), client=client)

# Run with specific server
result_browser = await agent.run(
    "Search the web for Python libraries",
    server_name="browser"
)

# Run with different server
result_custom = await agent.run(
    "Perform custom operation",
    server_name="custom_server"
)
```

### Custom Output Parsing

Implement custom output parsers for specialized MCP servers:

```python
from langchain.schema import OutputParser
from mcp_use import MCPAgent, MCPClient

class CustomOutputParser(OutputParser):
    def parse(self, text):
        # Custom parsing logic
        return processed_result

# Use the custom parser
agent = MCPAgent(
    llm=llm,
    client=client,
    output_parser=CustomOutputParser()
)
```

This approach is useful when:

- The MCP server returns structured data that needs special handling
- You need to extract specific information from responses
- You're integrating with custom or specialized MCP servers

### Restricting Tool Access

Control which tools are available to the agent:

```python
from mcp_use import MCPAgent, MCPClient
from langchain_openai import ChatOpenAI

# Create agent with restricted tools
agent = MCPAgent(
    llm=ChatOpenAI(model="gpt-4o"),
    client=client,
    disallowed_tools=["file_system", "network", "shell"]  # Restrict potentially dangerous tools
)

# Update restrictions after initialization
agent.set_disallowed_tools(["file_system", "network", "shell", "database"])
await agent.initialize()  # Reinitialize to apply changes

# Check current restrictions
restricted_tools = agent.get_disallowed_tools()
print(f"Restricted tools: {restricted_tools}")
```

This approach is useful when:

- You need to restrict access to sensitive operations
- You want to limit the agent's capabilities for specific tasks
- You're concerned about security implications of certain tools
- You want to focus the agent on specific functionality

### Sandboxed Execution with Multiple Servers

Configure and use multiple sandboxed MCP servers:

```python
import os
from dotenv import load_dotenv
from mcp_use import MCPClient, MCPAgent
from mcp_use.types.sandbox import SandboxOptions
from langchain_anthropic import ChatAnthropic

# Load environment variables
load_dotenv()

# Define sandbox options
sandbox_options: SandboxOptions = {
    "api_key": os.getenv("E2B_API_KEY"),
    "sandbox_template_id": "code-interpreter-v1"
}

# Create client with multiple sandboxed servers
client = MCPClient.from_dict(
    {
        "mcpServers": {
            "browser": {
                "command": "npx",
                "args": ["@playwright/mcp@latest"]
            },
            "command": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-everything"]
            }
        }
    },
    is_sandboxed=True,
    sandbox_options=sandbox_options
)

# Create agent with server manager enabled
agent = MCPAgent(
    llm=ChatAnthropic(model="claude-3-5-sonnet"),
    client=client,
    use_server_manager=True  # Automatically selects the appropriate server
)

# Run a task that will use tools from both servers
result = await agent.run(
    "Search for information about Python and then use the command line to check the latest version"
)
```

This approach is useful when:

- You need to use multiple MCP servers but don't want to install their dependencies locally
- You want to ensure consistent execution environments for all servers
- You need to leverage cloud resources for resource-intensive MCP servers

## Error Handling

mcp_use provides several exception types to handle different error scenarios:

| Exception                | Description                       | When It Occurs                      |
| ------------------------ | --------------------------------- | ----------------------------------- |
| `MCPConnectionError`     | Connection to MCP server failed   | Network issues, server not running  |
| `MCPAuthenticationError` | Authentication with server failed | Invalid credentials or tokens       |
| `MCPTimeoutError`        | Operation timed out               | Server takes too long to respond    |
| `MCPServerError`         | Server returned an error          | Internal server error               |
| `MCPClientError`         | Client-side error                 | Invalid configuration or parameters |
| `MCPError`               | Generic MCP-related error         | Any other MCP-related issue         |

**Handling Strategies**:

```python
from mcp_use.exceptions import MCPConnectionError, MCPTimeoutError

try:
    result = await agent.run("Find information")
except MCPConnectionError:
    # Handle connection issues
    print("Failed to connect to the MCP server")
except MCPTimeoutError:
    # Handle timeout issues
    print("Operation timed out")
except Exception as e:
    # Handle other exceptions
    print(f"An error occurred: {e}")
```



================================================
FILE: docs/api-reference/mcpagent.mdx
================================================
---
title: MCPAgent
description: "MCPAgent API Documentation"
icon: "bot"
---

# MCPAgent API Reference

## stream

```python
async def stream(
    query: str,
    max_steps: int | None = None,
    manage_connector: bool = True,
    external_history: list[BaseMessage] | None = None,
) -> AsyncGenerator[tuple[AgentAction, str] | str, None]:
```

Stream agent execution step-by-step. Yields intermediate steps as `(AgentAction, str)` tuples, followed by the final result as a string.

**Parameters:**
- `query` (str): The query to execute
- `max_steps` (int, optional): Maximum number of steps to take
- `manage_connector` (bool): Whether to handle connector lifecycle
- `external_history` (list[BaseMessage], optional): External conversation history

**Yields:**
- `(AgentAction, str)`: Intermediate steps containing the action and observation
- `str`: Final result string

**Example:**

```python
async for item in agent.stream("What's the weather like?"):
    if isinstance(item, str):
        print(f"Final result: {item}")
    else:
        action, observation = item
        print(f"Tool: {action.tool}, Result: {observation}")
```

## run

```python
async def run(
    query: str,
    max_steps: int | None = None,
    manage_connector: bool = True,
    external_history: list[BaseMessage] | None = None,
    output_schema: type[T] | None = None,
) -> str | T:
```

Run agent execution and return the final result. Uses the streaming implementation internally.

**Parameters:**
- `query` (str): The query to execute
- `max_steps` (int, optional): Maximum number of steps to take
- `manage_connector` (bool): Whether to handle connector lifecycle
- `external_history` (list[BaseMessage], optional): External conversation history
- `output_schema` (type[T], optional): Pydantic model for structured output. If provided, the agent will return an instance of this model.

**Returns:**
- `str` | `T`: The final result as a string, or a Pydantic model instance if `output_schema` is provided.

**Examples:**

**Basic Usage**
```python
result = await agent.run("What's the weather like?")
print(result)
```

**Structured Output**
```python
from pydantic import BaseModel, Field

class WeatherInfo(BaseModel):
    temperature: float = Field(description="Temperature in Celsius")
    condition: str = Field(description="Weather condition")

weather: WeatherInfo = await agent.run(
    "What's the weather like in London?",
    output_schema=WeatherInfo
)
print(f"Temperature: {weather.temperature}°C, Condition: {weather.condition}")
```

## astream

```python
async def astream(
    query: str,
    max_steps: int | None = None,
    manage_connector: bool = True,
    external_history: list[BaseMessage] | None = None,
) -> AsyncIterator[str]:
```

Asynchronous streaming interface for low-level agent events. Yields incremental results, tool actions, and intermediate steps as they are generated by the agent.

**Parameters:**
- `query` (str): The query to execute
- `max_steps` (int, optional): Maximum number of steps to take
- `manage_connector` (bool): Whether to handle connector lifecycle
- `external_history` (list[BaseMessage], optional): External conversation history

**Yields:**
- `str`: Streaming chunks of the agent's output

**Example:**

```python
async for chunk in agent.astream("hello"):
    print(chunk, end="", flush=True)
```

## Method Comparison

| Method | Use Case | Output Type | Granularity |
|--------|----------|-------------|-------------|
| `stream()` | Step-by-step workflow tracking | Steps + final result | Tool-level |
| `run()` | Simple execution | Final result only | Complete |
| `astream()` | Real-time chat interfaces | Streaming chunks | Token-level |

## Conversation Memory

Methods for managing the agent's conversation history.

### get_conversation_history

```python
def get_conversation_history() -> list[BaseMessage]:
```

Retrieves the current conversation history, which is a list of LangChain `BaseMessage` objects. This is useful for inspecting the agent's memory or for passing it to another agent.

**Returns:**
- `list[BaseMessage]`: The list of messages in the conversation history.

### clear_conversation_history

```python
def clear_conversation_history() -> None:
```

Clears the agent's conversation history. This is useful for starting a new conversation without creating a new agent instance. The system message is preserved.

**Example:**
```python
# Run a query, which populates the history
await agent.run("What is the capital of France?")

# Clear the history
agent.clear_conversation_history()

# The next query will not have the context of the first one
await agent.run("What was the last question I asked?")
# Assistant: I'm sorry, I don't have access to our previous conversation.
```

## Agent Management

Methods for managing the agent's lifecycle and configuration.

### set_system_message

```python
def set_system_message(message: str) -> None:
```

Set a new system message for the agent.

### close

```python
async def close() -> None:
```

Close the MCP connection and clean up resources.



================================================
FILE: docs/api-reference/mcpclient.mdx
================================================
---
title: "MCPClient"
description: "MCPClient API Documentation"
icon: "router"
---

# MCPClient API Reference

The `MCPClient` class is the core component for managing connections to MCP servers and orchestrating tool access.

## Constructor

### MCPClient(config_dict, debug=False)

Creates a new MCPClient instance from a configuration dictionary.

**Parameters:**
- `config_dict` (dict): Configuration dictionary containing server definitions
- `debug` (bool, optional): Enable debug logging. Defaults to False.

**Example:**
```python
config = {
    "mcpServers": {
        "filesystem": {
            "command": "mcp-server-filesystem",
            "args": ["/workspace"]
        }
    }
}

client = MCPClient(config, debug=True)
```

## Class Methods

### from_config_file(config_file_path, debug=False)

Creates an MCPClient instance from a JSON configuration file.

**Parameters:**
- `config_file_path` (str): Path to the JSON configuration file
- `debug` (bool, optional): Enable debug logging. Defaults to False.

**Returns:**
- `MCPClient`: Configured client instance

**Example:**
```python
client = MCPClient.from_config_file("mcp_config.json")
```

### from_dict(config_dict, debug=False)

Creates an MCPClient instance from a configuration dictionary.

**Parameters:**
- `config_dict` (dict): Configuration dictionary
- `debug` (bool, optional): Enable debug logging. Defaults to False.

**Returns:**
- `MCPClient`: Configured client instance

**Example:**
```python
config = {
    "mcpServers": {
        "playwright": {
            "command": "npx",
            "args": ["@playwright/mcp@latest"]
        }
    }
}

client = MCPClient.from_dict(config)
```

## Instance Methods

### add_server(name, server_config)

Adds a new server configuration to the client.

**Parameters:**
- `name` (str): Name for the server
- `server_config` (dict): Server configuration dictionary

**Returns:**
- `None`

**Example:**
```python
client.add_server("filesystem", {
    "command": "mcp-server-filesystem",
    "args": ["/workspace"]
})
```

### remove_server(name)

Removes a server configuration from the client.

**Parameters:**
- `name` (str): Name of the server to remove

**Returns:**
- `None`

**Example:**
```python
client.remove_server("filesystem")
```

### get_server_names()

Gets the names of all configured servers.

**Returns:**
- `List[str]`: List of server names

**Example:**
```python
servers = client.get_server_names()
print(f"Configured servers: {servers}")
```

### save_config(filepath)

Saves the current client configuration to a JSON file.

**Parameters:**
- `filepath` (str): Path where to save the configuration file

**Returns:**
- `None`

**Example:**
```python
client.save_config("updated_config.json")
```

### async create_session(server_name, auto_initialize=True)

Creates a new session with the specified server.

**Parameters:**
- `server_name` (str): Name of the server to create a session with
- `auto_initialize` (bool, optional): Whether to automatically initialize the session. Defaults to True.

**Returns:**
- `MCPSession`: The created session object

**Raises:**
- `ValueError`: If server is not configured
- `ConnectionError`: If session creation fails

**Example:**
```python
session = await client.create_session("filesystem")
```

### async create_all_sessions(auto_initialize=True)

Creates sessions with all configured servers.

**Parameters:**
- `auto_initialize` (bool, optional): Whether to automatically initialize sessions. Defaults to True.

**Returns:**
- `None`

**Example:**
```python
await client.create_all_sessions()
```

### get_session(server_name)

Gets an existing session for the specified server.

**Parameters:**
- `server_name` (str): Name of the server

**Returns:**
- `MCPSession`: The session object

**Raises:**
- `ValueError`: If session does not exist

**Example:**
```python
session = client.get_session("filesystem")
```

### get_all_active_sessions()

Gets all currently active sessions.

**Returns:**
- `Dict[str, MCPSession]`: Dictionary mapping server names to session objects

**Example:**
```python
active_sessions = client.get_all_active_sessions()
for name, session in active_sessions.items():
    print(f"Active session: {name}")
```

### async close_session(server_name)

Closes the session with the specified server.

**Parameters:**
- `server_name` (str): Name of the server whose session to close

**Returns:**
- `None`

**Example:**
```python
await client.close_session("filesystem")
```

### async close_all_sessions()

Closes all active sessions.

**Returns:**
- `None`

**Example:**
```python
await client.close_all_sessions()
```

## Properties

### sessions

**Type:** `Dict[str, MCPSession]`

Dictionary of active sessions by server name.

**Example:**
```python
print(f"Active sessions: {list(client.sessions.keys())}")
```

### config

**Type:** `Dict`

The configuration dictionary used to initialize the client.

**Example:**
```python
print(f"Client config: {client.config}")
```

### sandbox

**Type:** `bool`

Whether sandbox mode is enabled for server execution.

**Example:**
```python
if client.sandbox:
    print("Sandbox mode enabled")
```

### sandbox_options

**Type:** `SandboxOptions | None`

Configuration options for sandbox execution.

**Example:**
```python
if client.sandbox_options:
    print(f"Sandbox options: {client.sandbox_options}")
```

## Configuration Format

The MCPClient expects a configuration dictionary with the following structure:

```json
{
  "mcpServers": {
    "server_name": {
      "command": "executable_command",
      "args": ["arg1", "arg2"],
      "env": {
        "ENV_VAR": "value"
      },
      "cwd": "/working/directory"
    }
  }
}
```

### Configuration Fields

- **command** (required): The executable command to run the server
- **args** (optional): List of command line arguments
- **env** (optional): Environment variables for the server process
- **cwd** (optional): Working directory for the server process

## Error Handling

The MCPClient can raise several types of exceptions:

### ConnectionError
Raised when session creation or server connection fails.

```python
try:
    session = await client.create_session("filesystem")
except ConnectionError as e:
    print(f"Session creation failed: {e}")
```

### ValueError
Raised when trying to access a non-existent session or server.

```python
try:
    session = client.get_session("nonexistent_server")
except ValueError as e:
    print(f"Session not found: {e}")
```

### TimeoutError
Raised when session operations exceed timeout limits.

```python
try:
    session = await asyncio.wait_for(
        client.create_session("slow_server"),
        timeout=30
    )
except TimeoutError:
    print("Session creation timed out")
```

## Context Manager Usage

MCPClient supports async context manager protocol for automatic session cleanup:

```python
async with MCPClient.from_config_file("config.json") as client:
    session = await client.create_session("filesystem")
    # Use session for operations
    # Client automatically closes sessions on exit
```

## Best Practices

### Session Management
```python
# Good: Use context manager
async with MCPClient.from_config_file("config.json") as client:
    session = await client.create_session("filesystem")
    # Use session for tool operations

# Alternative: Manual management
client = MCPClient.from_config_file("config.json")
try:
    await client.create_all_sessions()
    session = client.get_session("filesystem")
    # Use session for operations
finally:
    await client.close_all_sessions()
```

### Error Handling
```python
async def robust_session_creation(client, server_name):
    max_retries = 3
    for attempt in range(max_retries):
        try:
            return await client.create_session(server_name)
        except ConnectionError as e:
            if attempt == max_retries - 1:
                raise
            await asyncio.sleep(2 ** attempt)  # Exponential backoff
            # Try again
```

### Performance Optimization
```python
# Pre-create all sessions for better performance
client = MCPClient.from_config_file("config.json")
await client.create_all_sessions()

# Reuse sessions for multiple operations
session = client.get_session("filesystem")
# Use session multiple times without reconnecting
```

## Examples

### Basic Usage
```python
import asyncio
from mcp_use import MCPClient

async def main():
    # Create client from config file
    client = MCPClient.from_config_file("mcp_config.json")

    # Create session with a server
    session = await client.create_session("filesystem")

    # List available tools from the session
    tools = await session.list_tools()
    print(f"Available tools: {[t['name'] for t in tools]}")

    # Execute a tool using the session
    result = await session.call_tool(
        "file_read",
        {"path": "/workspace/README.md"}
    )
    print(f"File contents: {result}")

    # Clean up
    await client.close_all_sessions()

if __name__ == "__main__":
    asyncio.run(main())
```

### Multi-Server Configuration
```python
config = {
    "mcpServers": {
        "filesystem": {
            "command": "mcp-server-filesystem",
            "args": ["/workspace"]
        },
        "playwright": {
            "command": "npx",
            "args": ["@playwright/mcp@latest"],
            "env": {
                "DISPLAY": ":1"
            }
        },
        "sqlite": {
            "command": "mcp-server-sqlite",
            "args": ["--db", "/data/app.db"]
        }
    }
}

async def multi_server_example():
    client = MCPClient.from_dict(config)

    # Create sessions with multiple servers
    await client.create_all_sessions()

    # Get sessions for different servers
    fs_session = client.get_session("filesystem")
    playwright_session = client.get_session("playwright")
    sqlite_session = client.get_session("sqlite")

    # Use filesystem tools
    file_content = await fs_session.call_tool(
        "file_read",
        {"path": "/workspace/data.txt"}
    )

    # Use web scraping tools
    page_content = await playwright_session.call_tool(
        "playwright_goto",
        {"url": "https://example.com"}
    )

    # Use database tools
    query_result = await sqlite_session.call_tool(
        "sqlite_query",
        {"query": "SELECT * FROM users LIMIT 10"}
    )

    await client.close_all_sessions()
```

## See Also

- [MCPAgent API Reference](/api-reference/mcpagent) - High-level agent interface
- [Configuration Guide](/getting-started/configuration) - Detailed configuration options
- [Connection Types](/client/connection-types) - Understanding different server types



================================================
FILE: docs/client/client-configuration.mdx
================================================
---
title: "Client Configuration"
description: "Configure MCPClient for connecting to MCP servers"
icon: "server"
---

# Client Configuration

<Info>
This guide covers MCPClient configuration options for connecting to MCP servers. For agent configuration, see the [Agent Configuration](/agent/agent-configuration) guide.
</Info>


## MCP Server Configuration

mcp_use supports any MCP server through a flexible configuration system. (For a list of awesome servers you can visit https://github.com/punkpeye/awesome-mcp-servers or https://github.com/appcypher/awesome-mcp-servers which have an amazing collection of them)

The configuration is defined in a JSON file with the following structure:

```json
{
  "mcpServers": {
    "server_name": {
      "command": "command_to_run",
      "args": ["arg1", "arg2"],
      "env": {
        "ENV_VAR": "value"
      }
    }
  }
}
```

MCP servers can use different connection types (STDIO, HTTP). For details on these connection types and how to configure them, see the [Connection Types](./connection-types) guide.
Each server entry in the `mcpServers` object has a `server_name` and then specific options depending on how `mcp-use` should connect to and/or manage the server.

- `server_name`: (Required) A unique string identifier for this MCP server configuration. This name is used to select the server, for example, in `agent.run(..., server_name="your_server_name")`.

**For STDIO-based servers (local):**
These are servers that `mcp-use` will start and manage as local child processes, communicating via their standard input/output streams.

- `command`: (Required) The executable command to start the server (e.g., `"npx"`, `"python"`).
- `args`: (Optional) An array of string arguments to pass to the `command` (e.g., `["-y", "@playwright/mcp@latest"]`).
- `env`: (Optional) An object defining environment variables to set for the server's process (e.g., `{"DISPLAY": ":1"}`).

**For HTTP/HTTPS-based servers (SSE and Streamable HTTP)**

These are servers that are typically already running and accessible via an HTTP(S) endpoint. `mcp-use` acts as an HTTP client to communicate with them.

- `url`: (Required) The full URL where the MCP server is listening (e.g., `"http://localhost:7777/mcp"`, `"https://api.example.com/mcp"`).
- `headers`: (Optional) An object containing custom HTTP headers to be sent with every request to this server (e.g., for authentication: `{"Authorization": "Bearer your_api_token"}`).

Additional options might be available depending on the specific connection type or wrappers used. Always refer to the [Connection Types](./connection-types) documentation for the most detailed and up-to-date specifications for each type.

### Example Configuration

Here's a basic example of how to configure an MCP server:

```json
{
  "mcpServers": {
    "my_server": {
      "command": "npx",
      "args": ["@my-mcp/server"],
      "env": {
        "PORT": "3000"
      }
    }
  }
}
```

### Multiple Server Configuration

You can configure multiple MCP servers in a single configuration file, allowing you to use different servers for different tasks or combine their capabilities (e.g.):

```json
{
  "mcpServers": {
    "airbnb": {
      "command": "npx",
      "args": ["-y", "@openbnb/mcp-server-airbnb", "--ignore-robots-txt"]
    },
    "playwright": {
      "command": "npx",
      "args": ["@playwright/mcp@latest"],
      "env": { "DISPLAY": ":1" }
    },
    "filesystem": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-filesystem",
        "/home/pietro/projects/mcp-use/"
      ]
    }
  }
}
```

For a complete example of using multiple servers, see the [multi-server example](https://github.com/mcp-use/mcp-use/blob/main/examples/multi_server_example.py) in our repository.


## Client Creation Methods

There are several ways to create an MCPClient:

### From Dictionary

Create configuration programmatically:

```python
from mcp_use import MCPClient

config = {
    "mcpServers": {
        "playwright": {
            "command": "npx",
            "args": ["@playwright/mcp@latest"],
            "env": {"DISPLAY": ":1"}
        }
    }
}

client = MCPClient(config)
```

### From Configuration File

Load configuration from a JSON file:

```python
from mcp_use import MCPClient

client = MCPClient.from_config_file("config.json")
```


### With Sandbox Options

Enable sandboxed execution:

```python
from mcp_use import MCPClient
from mcp_use.types.sandbox import SandboxOptions

sandbox_options: SandboxOptions = {
    "api_key": "your_e2b_api_key",
    "sandbox_template_id": "code-interpreter-v1"
}

client = MCPClient.from_dict(
    config,
    sandbox=True,
    sandbox_options=sandbox_options
)
```

## Best Practices

1. **API Keys**: Always use environment variables for sensitive information
2. **Configuration Files**: Keep configuration files in version control (without sensitive data)
3. **Server Naming**: Use descriptive names for your MCP servers
4. **Environment Variables**: Set appropriate environment variables for each server
5. **Testing**: Test server connections independently before using with agents
6. **Monitoring**: Enable logging to monitor server connection health

## Error Handling

Common client configuration errors and solutions:

1. **Server Not Found**: Check if the server command is installed and accessible
2. **Connection Timeout**: Verify server is running and network connectivity
3. **Permission Denied**: Ensure proper file permissions and environment setup
4. **Invalid Configuration**: Validate JSON syntax and required fields

For detailed troubleshooting, see the [Connection Errors](../troubleshooting/connection-errors) guide.



================================================
FILE: docs/client/connection-types.mdx
================================================
---
title: "Connection Types"
description: "Understanding the different connection types for MCP servers"
icon: "cable"
---

# Connection Types for MCP Servers

MCP servers can communicate with clients using different connection protocols, each with its own advantages and use cases. This guide explains the primary connection types supported by mcp_use:

## Standard Input/Output (STDIO)

STDIO connections run the MCP server as a child process and communicate through standard input and output streams.

### Characteristics:

- **Local Operation**: The server runs as a child process on the same machine
- **Simplicity**: Easy to set up with minimal configuration
- **Security**: No network exposure, ideal for sensitive operations
- **Performance**: Low latency for local operations

### Configuration Example:

```json
{
  "mcpServers": {
    "stdio_server": {
      "command": "npx",
      "args": ["@my-mcp/server"],
      "env": {}
    }
  }
}
```

## HTTP Connections

HTTP connections communicate with MCP servers over standard HTTP/HTTPS protocols.

### Configuration Example:

```json
{
  "mcpServers": {
    "http_server": {
      "url": "http://localhost:3000",
      "headers": {
        "Authorization": "Bearer ${AUTH_TOKEN}"
      }
    }
  }
}
```

## Sandboxed Execution

Sandboxed execution runs STDIO-based MCP servers in a cloud sandbox environment using E2B, rather than locally on your machine.

### Installation

To use sandboxed execution, you need to install the E2B dependency:

```bash
# Install mcp-use with E2B support
pip install "mcp-use[e2b]"

# Or install the dependency directly
pip install e2b-code-interpreter
```

You'll also need an E2B API key. You can sign up at [e2b.dev](https://e2b.dev) to get your API key.

### Characteristics:

- **Cloud Execution**: The server runs in a secure cloud environment
- **No Local Dependencies**: No need to install server dependencies locally
- **Consistent Environment**: Same environment regardless of local setup
- **Resource Isolation**: Server operations won't impact local system resources
- **Secure Execution**: Sandbox provides isolation for security-sensitive operations

### Configuration Example:

```python
from mcp_use import MCPClient
from mcp_use.types.sandbox import SandboxOptions

# Define sandbox options
sandbox_options: SandboxOptions = {
    "api_key": "your_e2b_api_key",  # Or use E2B_API_KEY environment variable
    "sandbox_template_id": "code-interpreter-v1"
}

# Create client with sandboxed execution enabled
client = MCPClient(
    config={
        "mcpServers": {
            "sandboxed_server": {
                "command": "npx",
                "args": ["@my-mcp/server"],
                "env": {}
            }
        }
    },
    sandbox=True,
    sandbox_options=sandbox_options
)
```

## Choosing the Right Connection Type

The choice of connection type depends on your specific use case:

1. **STDIO**: Best for local development, testing, and enhanced security scenarios where network exposure is a concern

2. **HTTP**: Ideal for stateless operations, simple integrations, and when working with existing HTTP infrastructure

3. **Sandboxed**: Best when you need to run MCP servers without installing their dependencies locally, or when you want consistent execution environments across different systems

When configuring your mcp_use environment, you can specify the connection type in your configuration file as shown in the examples above.

## Using Connection Types

Connection types are automatically inferred from your configuration file based on the parameters provided:

For example:

- If your configuration includes `command` and `args` and sandbox parameter is False` (default), a local STDIO connection will be used
- If your configuration includes `command` and `args` and sandbox parameter is True`, a sandboxed execution connection will be used
- If your configuration has a `url` starting with `http://` or `https://`, an HTTP connection will be used

This automatic inference simplifies the configuration process and ensures the appropriate connection type is used without requiring explicit specification.

For more details on connection configuration, see the [Configuration Guide](./configuration).



================================================
FILE: docs/client/direct-tool-calls.mdx
================================================
---
title: Direct Tool Calls
description: Learn how to call MCP tools directly without using an LLM
icon: "phone-outgoing"
---

# Direct Tool Calls

MCP-Use allows you to call MCP server tools directly without needing an LLM or agent. This is useful when you want to use MCP servers as a simple interface to various tools and APIs, or when you need programmatic control over tool execution.

## When to Use Direct Tool Calls

Direct tool calls are appropriate when:

- You know exactly which tool to call and with what parameters
- You don't need an LLM to make decisions about tool selection
- You want to integrate MCP tools into existing Python applications
- You need deterministic, programmatic control over tool execution

<Note>
  Direct tool calls will not work for tools that require sampling/completion, as
  these need an LLM to generate responses.
</Note>

## Basic Example

Here's how to call tools directly using the MCPClient:

```python
import asyncio
from mcp_use import MCPClient

async def call_tool_example():
    # Configure the MCP server
    config = {
        "mcpServers": {
            "everything": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-everything"],
            }
        }
    }

    # Create client from configuration
    client = MCPClient.from_dict(config)

    try:
        # Initialize all configured sessions
        await client.create_all_sessions()

        # Get the session for a specific server
        session = client.get_session("everything")

        # List available tools
        tools = await session.list_tools()
        tool_names = [t.name for t in tools]
        print(f"Available tools: {tool_names}")

        # Call a specific tool with arguments
        result = await session.call_tool(
            name="add",
            arguments={"a": 1, "b": 2}
        )

        # Handle the result
        if getattr(result, "isError", False):
            print(f"Error: {result.content}")
        else:
            print(f"Tool result: {result.content}")
            print(f"Text result: {result.content[0].text}")

    finally:
        # Clean up resources
        await client.close_all_sessions()

if __name__ == "__main__":
    asyncio.run(call_tool_example())
```

## Working with Tool Results

The `call_tool` method returns a `CallToolResult` object with the following attributes:

- **`content`**: A list of `ContentBlock` objects containing the tool's output
- **`structuredContent`**: A dictionary with the structured result (for non-sampling tools)
- **`isError`**: Boolean indicating if the tool call encountered an error

### Accessing Results

```python
# Call a tool
result = await session.call_tool(
    name="get_weather",
    arguments={"location": "San Francisco"}
)

# Check for errors
if result.isError:
    print(f"Tool error: {result.content}")
else:
    # Access text content
    text_result = result.content[0].text
    print(f"Weather: {text_result}")

    # Access structured content if available
    if hasattr(result, 'structuredContent'):
        structured = result.structuredContent
        print(f"Temperature: {structured.get('temperature')}")
```

## Multiple Server Example

You can work with multiple MCP servers and call tools from each:

```python
import asyncio
from mcp_use import MCPClient

async def multi_server_example():
    config = {
        "mcpServers": {
            "filesystem": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-filesystem"],
                "env": {"FILE_PATH": "/tmp"}
            },
            "time": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-time"]
            }
        }
    }

    client = MCPClient.from_dict(config)

    try:
        await client.create_all_sessions()

        # Call tool from filesystem server
        fs_session = client.get_session("filesystem")
        files = await fs_session.call_tool(
            name="list_files",
            arguments={"path": "/tmp"}
        )
        print(f"Files: {files.content[0].text}")

        # Call tool from time server
        time_session = client.get_session("time")
        current_time = await time_session.call_tool(
            name="get_current_time",
            arguments={}
        )
        print(f"Current time: {current_time.content[0].text}")

    finally:
        await client.close_all_sessions()

if __name__ == "__main__":
    asyncio.run(multi_server_example())
```

## Discovering Available Tools

Before calling tools, you may want to discover what's available:

```python
async def discover_tools():
    client = MCPClient.from_dict(config)
    await client.create_all_sessions()

    try:
        session = client.get_session("my_server")

        # Get all tools
        tools = await session.list_tools()

        for tool in tools:
            print(f"Tool: {tool.name}")
            print(f"  Description: {tool.description}")

            # Print input schema if available
            if hasattr(tool, 'inputSchema'):
                print(f"  Parameters: {tool.inputSchema}")
            print()

    finally:
        await client.close_all_sessions()
```

## Error Handling

Always handle potential errors when making direct tool calls:

```python
async def safe_tool_call():
    try:
        result = await session.call_tool(
            name="some_tool",
            arguments={"param": "value"}
        )

        if result.isError:
            # Handle tool-specific errors
            error_msg = result.content[0].text if result.content else "Unknown error"
            print(f"Tool returned error: {error_msg}")
            return None

        return result.content[0].text

    except Exception as e:
        # Handle connection or other errors
        print(f"Failed to call tool: {e}")
        return None
```

## Limitations

When using direct tool calls, be aware of these limitations:

1. **No Sampling Support**: Tools that require sampling/completion (like text generation) won't work without an LLM
2. **Manual Tool Selection**: You need to know which tool to call - there's no automatic selection
3. **No Context Management**: Unlike agents, direct calls don't maintain conversation context
4. **Parameter Validation**: You're responsible for providing correct parameters

## Complete Example

View the complete working example in the repository:

[examples/direct_tool_call.py](https://github.com/pietrozullo/mcp-use/blob/main/examples/direct_tool_call.py)

## Next Steps

- Learn about [tool discovery](/client/tools) to explore available tools
- Understand [connection types](/client/connection-types) for different server configurations
- Explore [building custom agents](/advanced/building-custom-agents) for more complex use cases



================================================
FILE: docs/client/elicitation.mdx
================================================
---
title: "Elicitation"
description: "Enable user input requests for MCP tools"
icon: "circle-help"
---

# Elicitation

<Info>
Elicitation allows MCP tools to request additional information from users during their execution.
</Info>

## Configuration

To enable elicitation, provide an `elicitation_callback` function when initializing the MCPClient:

```python
from mcp_use.client import MCPClient
from mcp.client.session import RequestContext
from mcp.types import ElicitRequestParams, ElicitResult

async def elicitation_callback(
    context: RequestContext,
    params: ElicitRequestParams
) -> ElicitResult:
    """
    Your elicitation callback implementation.
    This function receives a request for user input and returns the user's response.
    """
    # Display the message to the user and collect their input
    print(f"Server requests: {params.message}")

    # Example: Get user input (replace with your UI logic)
    if hasattr(params, 'requestedSchema'):
        # Handle structured input based on the schema
        user_input = await collect_structured_input(params.requestedSchema)
    else:
        # Handle simple text input
        user_input = input("Please provide your response: ")

    # Return the result
    return ElicitResult(
        action="accept",  # or "decline" or "cancel"
        content=user_input
    )

# Initialize client with elicitation support
client = MCPClient(
    config="config.json",
    elicitation_callback=elicitation_callback
)
```

## Handler Parameters

The elicitation handler receives two parameters:

### Elicitation Handler Parameters

| Parameter | Type | Description |
|-----------|------|-------------|
| **context** | `RequestContext` | Request context containing metadata about the elicitation request |
| **params** | `ElicitRequestParams` | The MCP elicitation request parameters containing the message and optional schema |

#### ElicitRequestParams Structure

| Field | Type | Description |
|-------|------|-------------|
| **message** | `str` | The prompt message to display to the user |
| **requestedSchema** | `dict \| None` | Optional JSON schema defining the expected response structure |

### Response Structure

The handler must return an `ElicitResult` object that specifies how the user responded:

#### ElicitResult Structure

| Field | Type | Description |
|-------|------|-------------|
| **action** | `Literal['accept', 'decline', 'cancel']` | How the user responded to the elicitation request |
| **content** | `dict \| str \| None` | The user's input data (required for "accept", omitted for "decline"/"cancel") |

#### Action Types:

- **accept**: User provided valid input - include their data in the `content` field
- **decline**: User chose not to provide the requested information - omit `content`
- **cancel**: User cancelled the entire operation - omit `content`

### Example Parameter Usage

```python
async def detailed_elicitation_callback(
    context: RequestContext,
    params: ElicitRequestParams
) -> ElicitResult:
    """Example showing how to use all parameters."""

    # Access the user message
    user_message = params.message
    print(f"Request: {user_message}")

    # Check if schema is provided for structured data
    schema = getattr(params, 'requestedSchema', None)

    if schema:
        # Handle structured input
        schema_type = schema.get('type')
        properties = schema.get('properties', {})
        required_fields = schema.get('required', [])

        print(f"Expecting {schema_type} with fields: {list(properties.keys())}")
        print(f"Required fields: {required_fields}")

        # Collect structured data
        user_data = {}
        for field_name, field_def in properties.items():
            field_type = field_def.get('type', 'string')
            description = field_def.get('description', '')

            prompt = f"Enter {field_name}"
            if description:
                prompt += f" ({description})"
            prompt += ": "

            value = input(prompt)

            # Basic type conversion
            if field_type == 'number':
                value = float(value) if value else None
            elif field_type == 'integer':
                value = int(value) if value else None
            elif field_type == 'boolean':
                value = value.lower() in ('true', '1', 'yes') if value else None

            user_data[field_name] = value

        # Validate required fields
        missing = [f for f in required_fields if not user_data.get(f)]
        if missing:
            print(f"Missing required fields: {missing}")
            return ElicitResult(action="cancel")

        return ElicitResult(action="accept", content=user_data)

    else:
        # Handle simple text input
        response = input(f"{user_message}: ")
        if not response:
            return ElicitResult(action="cancel")

        return ElicitResult(action="accept", content=response)
```

## Response Actions

Elicitation responses use a three-action model to clearly distinguish between different user intentions:

### Accept
User explicitly approved and submitted data:
```python
return ElicitResult(
    action="accept",
    content={"name": "John Doe", "email": "john@example.com"}
)
```

### Decline
User explicitly declined the request:
```python
return ElicitResult(
    action="decline"
    # content field is typically omitted
)
```

### Cancel
User dismissed without making an explicit choice:
```python
return ElicitResult(
    action="cancel"
    # content field is typically omitted
)
```

## Structured Data Requests

MCP tools can request structured data using JSON schemas. The schema defines the expected format and validation rules:

```python
async def advanced_elicitation_callback(
    context: RequestContext,
    params: ElicitRequestParams
) -> ElicitResult:
    """Handle structured data requests with validation."""

    # Check if a schema is provided
    if hasattr(params, 'requestedSchema') and params.requestedSchema:
        schema = params.requestedSchema

        # Example: Handle different schema types
        if schema.get('type') == 'object':
            properties = schema.get('properties', {})
            required_fields = schema.get('required', [])

            # Collect data for each property
            user_data = {}
            for field_name, field_schema in properties.items():
                field_type = field_schema.get('type', 'string')
                field_description = field_schema.get('description', '')

                print(f"{field_name} ({field_type}): {field_description}")

                # Collect input based on field type
                if field_type == 'string':
                    value = input(f"Enter {field_name}: ")
                elif field_type == 'number':
                    value = float(input(f"Enter {field_name}: "))
                elif field_type == 'boolean':
                    value = input(f"Enter {field_name} (true/false): ").lower() == 'true'
                elif field_type == 'integer':
                    value = int(input(f"Enter {field_name}: "))
                else:
                    value = input(f"Enter {field_name}: ")

                user_data[field_name] = value

            # Basic validation for required fields
            missing_fields = [field for field in required_fields if field not in user_data or not user_data[field]]
            if missing_fields:
                print(f"Missing required fields: {missing_fields}")
                return ElicitResult(action="cancel")

            return ElicitResult(action="accept", content=user_data)

    # Fallback to simple text input
    response = input(f"{params.message}: ")
    return ElicitResult(action="accept", content=response)
```

## Creating Elicitation-Enabled Tools

When building MCP servers, tools can request user input using the context parameter:

```python
from fastmcp import Context, FastMCP

mcp = FastMCP(name="MyServer")

@mcp.tool
async def purchase_item(ctx: Context) -> str:
    """Purchase an item with user-provided details."""

    # Define the schema for purchase information
    purchase_schema = {
        "type": "object",
        "properties": {
            "quantity": {
                "type": "number",
                "minimum": 1,
                "description": "Number of items to purchase"
            },
            "unit": {
                "type": "string",
                "enum": ["kg", "lbs", "pieces"],
                "description": "Unit of measurement"
            },
            "item_name": {
                "type": "string",
                "description": "Name of the item to purchase"
            }
        },
        "required": ["quantity", "unit", "item_name"]
    }

    # Request purchase details from the user
    result = await ctx.elicit(
        message="Please provide purchase details",
        response_type=purchase_schema
    )

    # Handle different response actions
    if result.action == "accept":
        data = result.data
        return f"Purchasing {data['quantity']} {data['unit']} of {data['item_name']}"
    elif result.action == "decline":
        return "Purchase declined by user"
    else:
        return "Purchase cancelled"

@mcp.tool
async def collect_feedback(ctx: Context) -> str:
    """Collect user feedback with a simple text request."""

    result = await ctx.elicit(
        message="Please provide your feedback about our service"
    )

    if result.action == "accept":
        return f"Thank you for your feedback: {result.data}"
    else:
        return "No feedback provided"
```

## Integration with MCPAgent

When using elicitation with MCPAgent, the elicitation callback is automatically used during tool execution:

```python
import asyncio
from mcp_use import MCPAgent, MCPClient
from langchain_openai import ChatOpenAI

async def main():
    # Define elicitation callback
    async def handle_user_input(ctx, params):
        # Your UI logic here - this example uses simple input
        print(f"\n🤖 Server Request: {params.message}")

        if hasattr(params, 'requestedSchema') and params.requestedSchema:
            # Handle structured input
            schema = params.requestedSchema
            if schema.get('type') == 'object':
                data = {}
                for field, field_schema in schema.get('properties', {}).items():
                    value = input(f"Enter {field}: ")
                    data[field] = value
                return ElicitResult(action="accept", content=data)

        # Simple text input
        response = input("Your response: ")
        return ElicitResult(action="accept", content=response)

    # Create client with elicitation support
    client = MCPClient.from_config_file(
        "config.json",
        elicitation_callback=handle_user_input
    )

    # Create agent
    llm = ChatOpenAI(model="gpt-4")
    agent = MCPAgent(llm=llm, client=client)

    # Run agent - tools can now request user input
    result = await agent.run("Help me purchase some items from the store")
    print(result)

if __name__ == "__main__":
    asyncio.run(main())
```

## Error Handling

If no elicitation callback is provided but a tool requests user input:

```python
# Without elicitation callback
client = MCPClient(config="config.json")  # No elicitation_callback

# Tool that requires elicitation will return an error
session = client.get_session("server_name")
result = await session.call_tool("purchase_item", {})
# This will fail because no elicitation callback is configured
```



================================================
FILE: docs/client/logging.mdx
================================================
---
title: "Logging"
description: "MCP provides a dedicated channel for servers to send log messages to the client, which is separate from the standard notification system. This allows for structured and level-specific logging without cluttering the main message stream."
icon: "logs"
---

`mcp-use` supports this feature through a `logging_callback` function that can be passed to the `MCPClient`.

## Server-Side: Sending Logs

On the server (using `fastmcp`), you can send log messages with different severity levels from within a tool's context (`ctx`).

```python filename="server.py"
from fastmcp import Context, FastMCP

mcp = FastMCP(name="PrimitiveServer")

@mcp.tool()
async def logging_tool(ctx: Context) -> str:
    """Log a message to the client."""
    await ctx.debug("This is a debug message")
    await ctx.info("This is an info message")
    await ctx.warning("This is a warning message")
    await ctx.error("This is an error message")
    return "Logging tool completed"
```

These log messages are sent as `logging/message` notifications to the client.

## Client-Side: Handling Logs

While you can catch `LoggingMessageNotification` events within the general `message_handler`, the recommended approach is to use the dedicated `logging_callback`. This keeps your code clean by separating logging concerns from other notification handling.

The `logging_callback` receives the parameters of the log notification directly, which include the `level` and `message`.

```python filename="client.py"
import asyncio
import mcp.types as types
from mcp_use import MCPClient

# A dedicated handler for log messages
async def handle_logs(log_params: types.LoggingMessageNotificationParams):
    print(f"LOG [{log_params.level.upper()}]: {log_params.message}")

async def test_logging(primitive_server):
    """Tests receiving logs from the primitive server."""
    config = {"mcpServers": {"PrimitiveServer": {"url": f"{primitive_server}/mcp"}}}
    # Pass the callback to the client
    client = MCPClient(config, logging_callback=handle_logs)
    try:
        await client.create_all_sessions()
        session = client.get_session("PrimitiveServer")

        # This tool will trigger the logging_callback
        result = await session.call_tool(name="logging_tool", arguments={})
        assert result.content[0].text == "Logging tool completed"
    finally:
        await client.close_all_sessions()
```

By using the `logging_callback`, you can easily route server-side logs to your client's logging system, display them in a debug console, or handle them in any other way that suits your application's needs.



================================================
FILE: docs/client/notifications.mdx
================================================
---
title: "Notifications"
description: "MCP servers can send various notifications to the client to signal events or provide updates on long-running tasks. This is distinct from logging, which is handled separately."
icon: "bell-ring"
---
import { Callout } from "nextra/components";


`mcp-use` allows you to handle these notifications by providing a `message_handler` to the `MCPClient`.

## Server-Side: Sending Notifications

On the server (using `fastmcp`), you can send notifications from within a tool's context (`ctx`). Here's an example of a tool that sends multiple types of notifications, including progress updates.

```python filename="server.py"
from fastmcp import Context, FastMCP

mcp = FastMCP(name="PrimitiveServer")

@mcp.tool()
async def long_running_task(task_name: str, ctx: Context, steps: int = 5) -> str:
    """Execute a task with progress updates."""
    # This is a log message, not a notification
    await ctx.info(f"Starting: {task_name}")

    for i in range(steps):
        progress = (i + 1) / steps
        # These are notifications
        await ctx.send_prompt_list_changed()
        await ctx.send_resource_list_changed()
        await ctx.send_tool_list_changed()
        await ctx.report_progress(
            progress=progress,
            total=1.0,
            message=f"Step {i + 1}/{steps}",
        )
        # This is another log message
        await ctx.debug(f"Completed step {i + 1}")

    return f"Task '{task_name}' completed"
```

## Available Notification Types

The `fastmcp` server context provides several methods for sending specific notifications. Here are the ones you can use and the corresponding type to check for in your client's `message_handler`:

-   `ctx.report_progress(...)` sends a `types.ProgressNotification`. This is used to report the progress of a long-running operation.
-   `ctx.send_tool_list_changed()` sends a `types.ToolListChangedNotification`. This signals that the tool list has changed (see [Tools documentation](/client/tools)).
-   `ctx.send_resource_list_changed()` sends a `types.ResourceListChangedNotification`. This signals that the resource list has changed (see [Resources documentation](/client/resources)).
-   `ctx.send_prompt_list_changed()` sends a `types.PromptListChangedNotification`. This signals that the prompt list has changed (see [Prompts documentation](/client/prompts)).

## Client-Side: Handling Notifications

On the client, you create a `message_handler` function and pass it to the `MCPClient`. This function will receive all messages from the server, including notifications.

Since the `message_handler` receives all message types (requests, notifications, exceptions), you need to check the type of the incoming message to handle it correctly. Notifications are of type `mcp.types.ServerNotification`, and their specific type is stored in the `.root` attribute.

```python filename="client.py"
import asyncio
import mcp.types as types
from mcp_use import MCPClient

# The message handler receives all server-sent messages
async def handle_messages(message):
    # Check if the message is a server notification
    if isinstance(message, types.ServerNotification):
        notification = message.root
        # Check the specific type of notification
        if isinstance(notification, types.ProgressNotification):
            params = notification.params
            print(
                f"Progress: {params.progress:.0%}"
                f" ({params.message})"
            )
        elif isinstance(notification, types.PromptListChangedNotification):
            print("Server prompts have changed")
        elif isinstance(notification, types.ResourceListChangedNotification):
            print("Server resources have changed")
        elif isinstance(notification, types.ToolListChangedNotification):
            print("Server tools have changed")
        # Logging notifications are also sent here, but can be handled
        # by a dedicated logging_callback.
        elif isinstance(notification, types.LoggingMessageNotification):
            pass
        else:
            print(f"Received unhandled notification: {notification}")
    else:
        # Handle other message types like requests or exceptions
        print(f"Received other message type: {type(message)}")

async def test_notifications(primitive_server):
    """Tests receiving notifications from the primitive server."""
    config = {"mcpServers": {"PrimitiveServer": {"url": f"{primitive_server}/mcp"}}}
    client = MCPClient(config, message_handler=handle_messages)
    try:
        await client.create_all_sessions()
        session = client.get_session("PrimitiveServer")

        # This will trigger the notifications in the handler
        result = await session.call_tool(
            name="long_running_task",
            arguments={"task_name": "test", "steps": 5}
        )
        assert result.content[0].text == "Task 'test' completed"
    finally:
        await client.close_all_sessions()
```

<Callout>
  The `message_handler` is a powerful catch-all for any message from the server. By inspecting the message type, you can build rich, responsive applications that react to server-side events in real time.
</Callout>



================================================
FILE: docs/client/prompts.mdx
================================================
---
title: "Prompts"
description: "How to use prompts from the client"
icon: "volume-2"
---

# Prompts

Prompts in MCP are reusable templates for structured interactions between AI models and servers. They provide predefined interaction patterns with parameters, enabling consistent and efficient communication for common use cases.

## What are Prompts?

Prompts are interaction templates with:
- **User-controlled invocation** requiring explicit activation
- **Parameter definitions** for customizable inputs
- **Structured formats** for consistent interactions
- **Context-aware content** that can adapt to different scenarios

Common examples include:
- Task planning templates ("Plan a vacation")
- Code review workflows ("Review this pull request")
- Content generation patterns ("Write a blog post about...")
- Analysis frameworks ("Analyze market trends for...")
- Decision support templates ("Compare options for...")

## Characteristics of Prompts

### User Control
Prompts are never invoked automatically - they require explicit user activation, ensuring transparency and control over AI interactions.

### Parameter Support
Prompts can accept parameters to customize their behavior and adapt to specific contexts.

### Reusability
Well-designed prompts can be reused across different contexts and conversations.

## Listing Available Prompts

To see what prompts are available from a connected MCP server:

```python
import asyncio
from mcp_use import MCPClient

async def list_prompts():
    # Initialize client with server configuration
    config = {
        "mcpServers": {
            # Your server definitions here
        }
    }
    client = MCPClient(config)

    # Connect to servers
    await client.create_all_sessions()

    # Get a session for a specific server
    session = client.get_session("my_server")

    # List all available prompts - always returns fresh data
    prompts = await session.list_prompts()

    for prompt in prompts:
        print(f"Prompt: {prompt.name}")
        print(f"Description: {prompt.description}")
        if prompt.arguments:
            print("Arguments:")
            for arg in prompt.arguments:
                print(f"  - {arg.name}: {arg.description}")
        print("---")


# Run the example
asyncio.run(list_prompts())
```

### Automatic Prompt List Update

When servers send `PromptListChangedNotification`, it signals that the prompt list has changed. The `list_prompts()` method always fetches fresh data from the server, ensuring you get up-to-date information.

```mermaid
sequenceDiagram
    participant Client
    participant Server

    Note over Server: Server Changes State
    Server->>Server: disable(prompt)
    Server->>Client: PromptListChangedNotification
    Client->>Client: Log notification

    Note over Client: User Calls list_prompts()
    Client->>Server: list_prompts()
    Server-->>Client: [updated prompts]
    Client->>Client: Return fresh data
```

**Important:** Always use `await session.list_prompts()` instead of the deprecated `session.prompts` property to ensure you get fresh data:

```python
# ✅ Recommended - always returns fresh data
prompts = await session.list_prompts()

# ⚠️ Deprecated - may return stale data
# prompts = session.prompts
```

## Getting and Using Prompts

Prompts are retrieved using the `get_prompt` method:

```python
import asyncio
from mcp_use import MCPClient

async def use_prompt_example():
    config = {
        "mcpServers": {
            # Your server definitions here
        }
    }
    client = MCPClient(config)
    await client.create_all_sessions()

    session = client.get_session("planning_server")

    # Get a prompt with arguments
    result = await session.get_prompt(
        name="plan_vacation",
        arguments={
            "destination": "Japan",
            "duration": "2 weeks",
            "budget": "$5000",
            "interests": ["culture", "food", "nature"]
        }
    )

    # Use the prompt content
    print(f"Prompt description: {result.description}")
    for message in result.messages:
        print(f"Role: {message.role}")
        print(f"Content: {message.content.text}")


asyncio.run(use_prompt_example())
```

## Prompt Without Arguments

Some prompts don't require parameters:

```python
async def simple_prompt_example():
    config = {
        "mcpServers": {
            # Your server definitions here
        }
    }
    client = MCPClient(config)
    await client.create_all_sessions()

    session = client.get_session("content_server")

    # Get a prompt without arguments
    result = await session.get_prompt(name="writing_tips")

    # Display the prompt content
    for message in result.messages:
        print(f"{message.role}: {message.content.text}")


asyncio.run(simple_prompt_example())
```

## Prompt Structure

Prompts return structured content with messages:

```python
# Example of working with prompt results
result = await session.get_prompt("code_review", {"language": "python"})

for message in result.messages:
    # Messages have roles (e.g., "user", "assistant", "system")
    role = message.role

    # Content can be text or other formats
    if hasattr(message.content, 'text'):
        text_content = message.content.text
        print(f"{role}: {text_content}")

    # Handle other content types if needed
    if hasattr(message.content, 'image'):
        print(f"{role}: [Image content]")
```

## Parameter Completion

Many prompts support parameter completion to help users understand required inputs:

```python
async def explore_prompt_parameters():
    session = client.get_session("my_server")
    prompts = await session.list_prompts()

    for prompt in prompts:
        print(f"Prompt: {prompt.name}")
        if prompt.arguments:
            print("Required parameters:")
            for arg in prompt.arguments:
                required = "required" if arg.required else "optional"
                print(f"  - {arg.name} ({required}): {arg.description}")
        print()
```

## Dynamic Prompt Generation

Some prompts can generate different content based on context:

```python
async def dynamic_prompt_example():
    config = {
        "mcpServers": {
            # Your server definitions here
        }
    }
    client = MCPClient(config)
    await client.create_all_sessions()

    session = client.get_session("adaptive_server")

    # Same prompt with different parameters
    contexts = [
        {"domain": "healthcare", "complexity": "beginner"},
        {"domain": "finance", "complexity": "expert"}
    ]

    for context in contexts:
        result = await session.get_prompt("domain_analysis", context)
        print(f"Analysis for {context['domain']}:")
        for message in result.messages:
            print(f"  {message.content.text[:100]}...")
        print()

```

## Error Handling

Handle potential errors when working with prompts:

```python
try:
    result = await session.get_prompt("missing_prompt", {"param": "value"})
    for message in result.messages:
        print(message.content.text)
except Exception as e:
    print(f"Failed to get prompt: {e}")

# Check if prompt exists before using
available_prompts = await session.list_prompts()
prompt_names = [p.name for p in available_prompts]

if "my_prompt" in prompt_names:
    result = await session.get_prompt("my_prompt")
else:
    print("Prompt not available")
```



================================================
FILE: docs/client/resources.mdx
================================================
---
title: "Resources"
description: "How to use resources from the client"
icon: "file"
---

# Resources

Resources in MCP provide structured access to information that AI models need to understand context. They represent data sources that can be retrieved and used by AI applications, such as files, database records, API responses, or any other structured information.

## What are Resources?

Resources are context data sources with:
- **URI-based identification** for consistent addressing
- **Structured access patterns** with defined schemas
- **Multiple content types** (text, JSON, binary data)
- **Dynamic or static content** that can change over time

Common examples include:
- Configuration files and documents
- Database records and query results
- API responses and external data
- Calendar events and schedules
- User preferences and settings

## Types of Resources

### Direct Resources
Static resources with fixed URIs that always return the same type of content.

### Resource Templates
Dynamic resources that accept parameters to generate different content based on input.

## Listing Available Resources

To see what resources are available from a connected MCP server:

```python
import asyncio
from mcp_use import MCPClient

async def list_resources():
    # Initialize client with server configuration
    config = {
        "mcpServers": {
            # Your server definitions here
        }
    }
    client = MCPClient(config)

    # Connect to servers
    await client.create_all_sessions()

    # Get a session for a specific server
    session = client.get_session("my_server")

    # List all available resources - always returns fresh data
    resources = await session.list_resources()

    for resource in resources:
        print(f"Resource: {resource.name}")
        print(f"URI: {resource.uri}")
        print(f"Description: {resource.description}")
        print(f"MIME Type: {resource.mimeType}")
        print("---")

# Run the example
asyncio.run(list_resources())
```

### Automatic Resource List Update

When servers send `ResourceListChangedNotification`, it signals that the resource list has changed. The `list_resources()` method always fetches fresh data from the server, ensuring you get up-to-date information.

```mermaid
sequenceDiagram
    participant Client
    participant Server

    Note over Server: Server Changes State
    Server->>Server: disable(resource)
    Server->>Client: ResourceListChangedNotification
    Client->>Client: Log notification

    Note over Client: User Calls list_resources()
    Client->>Server: list_resources()
    Server-->>Client: [updated resources]
    Client->>Client: Return fresh data
```

**Important:** Always use `await session.list_resources()` instead of the deprecated `session.resources` property to ensure you get fresh data:

```python
# ✅ Recommended - always returns fresh data
resources = await session.list_resources()

# ⚠️ Deprecated - may return stale data
# resources = session.resources
```

## Reading Resources

Resources are accessed using the `read_resource` method with their URI:

```python
import asyncio
from mcp_use import MCPClient
from pydantic import HttpUrl

async def read_resource_example():
    config = {
        "mcpServers": {
            # Your server definitions here
        }
    }
    client = MCPClient(config)
    await client.create_all_sessions()

    session = client.get_session("file_server")

    # Read a resource by URI
    resource_uri = HttpUrl("file:///path/to/config.json")
    result = await session.read_resource(resource_uri)

    # Handle the result
    for content in result.contents:
        if content.mimeType == "application/json":
            print(f"JSON content: {content.text}")
        elif content.mimeType == "text/plain":
            print(f"Text content: {content.text}")
        else:
            print(f"Binary content length: {len(content.blob)}")


asyncio.run(read_resource_example())
```

## Working with Resource Templates

Resource templates allow dynamic content generation based on parameters:

```python
import asyncio
from mcp_use import MCPClient
from pydantic import HttpUrl

async def template_resource_example():
    config = {
        "mcpServers": {
            # Your server definitions here
        }
    }
    client = MCPClient(config)
    await client.create_all_sessions()

    session = client.get_session("database_server")

    # Access a parameterized resource
    # Template URI might be: "db://users/{user_id}/profile"
    resource_uri = HttpUrl("db://users/12345/profile")
    result = await session.read_resource(resource_uri)

    # Process the user profile data
    for content in result.contents:
        print(f"User profile: {content.text}")

asyncio.run(template_resource_example())
```

## Resource Content Types

Resources can contain different types of content:

### Text Content
```python
# Text-based resources (JSON, XML, plain text)
result = await session.read_resource(HttpUrl("file:///config.json"))

for content in result.contents:
    if hasattr(content, 'text'):
        print(f"Text content: {content.text}")
        print(f"MIME type: {content.mimeType}")
```

### Binary Content
```python
# Binary resources (images, files, etc.)
result = await session.read_resource(HttpUrl("file:///image.png"))

for content in result.contents:
    if hasattr(content, 'blob'):
        print(f"Binary data size: {len(content.blob)} bytes")
        # Save or process binary data
        with open("downloaded_image.png", "wb") as f:
            f.write(content.blob)
```

## Resource Discovery

Find resources matching specific criteria:

```python
async def find_resources():
    session = client.get_session("my_server")
    resources = await session.list_resources()

    # Find JSON configuration files
    config_resources = [
        r for r in resources
        if r.mimeType == "application/json"
        and "config" in r.name.lower()
    ]

    for resource in config_resources:
        print(f"Found config: {resource.name} at {resource.uri}")
```

## Error Handling

Always handle potential errors when reading resources:

```python
try:
    result = await session.read_resource(HttpUrl("file:///missing.txt"))
    for content in result.contents:
        print(f"Content: {content.text}")
except Exception as e:
    print(f"Failed to read resource: {e}")
```



================================================
FILE: docs/client/sampling.mdx
================================================
---
title: "Sampling"
description: "Enable LLM sampling capabilities for MCP tools"
icon: "pipette"
---

# Sampling

<Info>
Sampling allows MCP tools to request LLM completions during their execution.
</Info>

## Configuration

To enable sampling, provide a `sampling_callback` function when initializing the MCPClient:

```python
from mcp_use.client import MCPClient
from mcp.client.session import ClientSession
from mcp.types import (
    CreateMessageRequestParams,
    CreateMessageResult,
    ErrorData,
    TextContent
)

async def sampling_callback(
    context: ClientSession,
    params: CreateMessageRequestParams
) -> CreateMessageResult | ErrorData:
    """
    Your sampling callback implementation.
    This function receives a prompt and returns an LLM response.
    """
    # Integrate with your LLM of choice (OpenAI, Anthropic, etc.)
    response = await your_llm.complete(params.messages[-1].content.text)

    return CreateMessageResult(
        content=TextContent(text=response, type="text"),
        model="your-model-name",
        role="assistant"
    )

# Initialize client with sampling support
client = MCPClient(
    config="config.json",
    sampling_callback=sampling_callback
)
```


## Creating Sampling-Enabled Tools

When building MCP servers, tools can request sampling using the context parameter:

```python
from fastmcp import Context, FastMCP

mcp = FastMCP(name="MyServer")

@mcp.tool
async def analyze_sentiment(text: str, ctx: Context) -> str:
    """Analyze the sentiment of text using the client's LLM."""
    prompt = f"""Analyze the sentiment of the following text as positive, negative, or neutral.
    Just output a single word - 'positive', 'negative', or 'neutral'.

    Text to analyze: {text}"""

    # Request LLM analysis through sampling
    response = await ctx.sample(prompt)

    return response.text.strip()
```

## Error Handling

If no sampling callback is provided but a tool requests sampling:

```python
# Without sampling callback
client = MCPClient(config="config.json")  # No sampling_callback

# Tool that requires sampling will return an error
result = await session.call_tool("analyze_sentiment", {"text": "Hello"})
# result.isError will be True
```



================================================
FILE: docs/client/sandbox.mdx
================================================
---
title: "Sandbox"
description: "Run your MCP in a secure remote sandbox."
icon: "lock"
---

## Sandboxed Execution

mcp_use supports running MCP servers in a sandboxed cloud environment using E2B. This is useful when you want to run MCP servers without having to install their dependencies locally.

### Installation

To use sandboxed execution, you need to install the E2B dependency:

```bash
# Install mcp-use with E2B support
pip install "mcp-use[e2b]"

# Or install the dependency directly
pip install e2b-code-interpreter
```

You'll also need an E2B API key. You can sign up at [e2b.dev](https://e2b.dev) to get your API key.

### Configuration Example

To enable sandboxed execution, use the sandbox parameter when creating the MCPClient:

```python
from mcp_use import MCPClient
from mcp_use.types.sandbox import SandboxOptions

# Define sandbox options
sandbox_options: SandboxOptions = {
    "api_key": "your_e2b_api_key",  # Or use E2B_API_KEY environment variable
    "sandbox_template_id": "code-interpreter-v1",
    "supergateway_command": "npx -y supergateway"  # Optional, this is the default
}

# Create client with sandboxed execution enabled
client = MCPClient.from_dict(
    {
        "mcpServers": {
            "command_line": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-everything"]
            }
        }
    },
    sandbox=True,
    sandbox_options=sandbox_options
)
```

### Available Sandbox Options

The `SandboxOptions` type provides the following configuration options:

| Option                 | Description                                                                              | Default               |
| ---------------------- | ---------------------------------------------------------------------------------------- | --------------------- |
| `api_key`              | E2B API key. Required - can be provided directly or via E2B_API_KEY environment variable | None                  |
| `sandbox_template_id`  | Template ID for the sandbox environment                                                  | "base"                |
| `supergateway_command` | Command to run supergateway                                                              | "npx -y supergateway" |

### E2B API Key

To use sandboxed execution, you need an E2B API key. You can provide it in two ways:

1. Directly in the sandbox options:

   ```python
   sandbox_options = {"api_key": "your_e2b_api_key"}
   ```

2. Through the environment variable:
   ```bash
   # In your .env file or environment
   E2B_API_KEY=your_e2b_api_key
   ```

For more details on connection types and sandbox configuration, see the [Connection Types](./connection-types) guide.



================================================
FILE: docs/client/tools.mdx
================================================
---
title: "Tools"
description: "How to use tools from the client"
icon: "hammer"
---

# Tools

Tools in MCP are server-implemented functions that enable AI models to perform specific actions. They represent capabilities that a server exposes to clients, allowing AI applications to interact with external systems, execute commands, or manipulate data.

## What are Tools?

Tools are well-defined functions with:
- **JSON Schema definitions** that specify their inputs and outputs
- **Single, focused operations** that perform one specific task
- **User approval requirement** before execution for security

Common examples include:
- File operations (read, write, delete)
- Web browsing and data fetching
- Database queries
- API calls to external services
- System commands

## Listing Available Tools

To see what tools are available from a connected MCP server:

```python
import asyncio
from mcp_use import MCPClient

async def list_tools():
    # Initialize client with server configuration
    config = {
        "mcpServers": {
            # Your server definitions here
        }
    }
    client = MCPClient(config)

    # Connect to servers
    await client.create_all_sessions()

    # Get a session for a specific server
    session = client.get_session("my_server")

    # List all available tools - always returns fresh data
    tools = await session.list_tools()

    for tool in tools:
        print(f"Tool: {tool.name}")
        print(f"Description: {tool.description}")
        print(f"Schema: {tool.inputSchema}")
        print("---")

# Run the example
asyncio.run(list_tools())
```

### Automatic Tool List Update

When servers send `ToolListChangedNotification`, it signals that the tool list has changed. The `list_tools()` method always fetches fresh data from the server, ensuring you get up-to-date information.

```mermaid
sequenceDiagram
    participant Client
    participant Server

    Note over Server: Server Changes State
    Server->>Server: disable(tool)
    Server->>Client: ToolListChangedNotification
    Client->>Client: Log notification

    Note over Client: User Calls list_tools()
    Client->>Server: list_tools()
    Server-->>Client: [updated tools]
    Client->>Client: Return fresh data
```

**Important:** Always use `await session.list_tools()` instead of the deprecated `session.tools` property to ensure you get fresh data:

```python
# ✅ Recommended - always returns fresh data
tools = await session.list_tools()

# ⚠️ Deprecated - may return stale data
# tools = session.tools
```

## Calling Tools

Tools are executed using the `call_tool` method:

```python
import asyncio
from mcp_use import MCPClient

async def call_tool_example():
    config = {
        "mcpServers": {
            # Your server definitions here
        }
    }
    client = MCPClient(config)
    await client.create_all_sessions()

    session = client.get_session("filesystem_server")

    # Call a tool with arguments
    result = await session.call_tool(
        name="read_file",
        arguments={
            "path": "/path/to/file.txt",
            "encoding": "utf-8"
        }
    )

    # Handle the result
    if result.isError:
        print(f"Error: {result.content}")
    else:
        print(f"File content: {result.content}")

asyncio.run(call_tool_example())
```

## Tool Results

Tool calls return a `CallToolResult` object with:
- `content`: The result data or error message
- `isError`: Boolean indicating success or failure
- Additional metadata about the execution

```python
# Example of handling tool results
result = await session.call_tool("search_web", {"query": "MCP protocol"})

if result.isError:
    print(f"Tool execution failed: {result.content}")
else:
    # Process successful result
    for item in result.content:
        print(f"Found: {item}")
```

## Error Handling

Always handle potential errors when calling tools:

```python
try:
    result = await session.call_tool("risky_operation", {"param": "value"})
    if result.isError:
        print(f"Tool reported error: {result.content}")
    else:
        print(f"Success: {result.content}")
except Exception as e:
    print(f"Connection or protocol error: {e}")
```



================================================
FILE: docs/community/showcase.mdx
================================================
---
title: 'Community Showcase'
description: 'High-quality projects and examples from the mcp-use community'
icon: 'users'
---

import { YouTubeEmbed } from '/snippets/youtube-embed.mdx'

## Featured Projects

Discover exemplary MCP implementations and projects created by our community. These projects demonstrate best practices and innovative uses of mcp-use.

### Community Projects

<div style={{width: '100%'}}>
<table style={{width: '100%'}}>
  <thead>
    <tr>
      <th style={{width: '70%'}}>Repository</th>
      <th style={{width: '30%'}}>Stars</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style={{verticalAlign: 'middle'}}>
        <div style={{display: 'flex', alignItems: 'center', gap: '2px'}}>
          <img src="https://avatars.githubusercontent.com/u/170207473?s=40&v=4" width="20" height="20" />
          <a href="https://github.com/tavily-ai/meeting-prep-agent"><strong>tavily-ai/meeting-prep-agent</strong></a>
        </div>
      </td>
      <td style={{verticalAlign: 'middle'}}>⭐ 112</td>
    </tr>
    <tr>
      <td style={{verticalAlign: 'middle'}}>
        <div style={{display: 'flex', alignItems: 'center', gap: '2px'}}>
          <img src="https://avatars.githubusercontent.com/u/20041231?s=40&v=4" width="20" height="20" />
          <a href="https://github.com/krishnaik06/MCP-CRASH-Course"><strong>krishnaik06/MCP-CRASH-Course</strong></a>
        </div>
      </td>
      <td style={{verticalAlign: 'middle'}}>⭐ 37</td>
    </tr>
    <tr>
      <td style={{verticalAlign: 'middle'}}>
        <div style={{display: 'flex', alignItems: 'center', gap: '2px'}}>
          <img src="https://avatars.githubusercontent.com/u/892404?s=40&v=4" width="20" height="20" />
          <a href="https://github.com/truemagic-coder/solana-agent-app"><strong>truemagic-coder/solana-agent-app</strong></a>
        </div>
      </td>
      <td style={{verticalAlign: 'middle'}}>⭐ 29</td>
    </tr>
    <tr>
      <td style={{verticalAlign: 'middle'}}>
        <div style={{display: 'flex', alignItems: 'center', gap: '2px'}}>
          <img src="https://avatars.githubusercontent.com/u/8344498?s=40&v=4" width="20" height="20" />
          <a href="https://github.com/schogini/techietalksai"><strong>schogini/techietalksai</strong></a>
        </div>
      </td>
      <td style={{verticalAlign: 'middle'}}>⭐ 21</td>
    </tr>
    <tr>
      <td style={{verticalAlign: 'middle'}}>
        <div style={{display: 'flex', alignItems: 'center', gap: '2px'}}>
          <img src="https://avatars.githubusercontent.com/u/201161342?s=40&v=4" width="20" height="20" />
          <a href="https://github.com/autometa-dev/whatsapp-mcp-voice-agent"><strong>autometa-dev/whatsapp-mcp-voice-agent</strong></a>
        </div>
      </td>
      <td style={{verticalAlign: 'middle'}}>⭐ 18</td>
    </tr>
    <tr>
      <td style={{verticalAlign: 'middle'}}>
        <div style={{display: 'flex', alignItems: 'center', gap: '2px'}}>
          <img src="https://avatars.githubusercontent.com/u/100749943?s=40&v=4" width="20" height="20" />
          <a href="https://github.com/Deniscartin/mcp-cli"><strong>Deniscartin/mcp-cli</strong></a>
        </div>
      </td>
      <td style={{verticalAlign: 'middle'}}>⭐ 17</td>
    </tr>
    <tr>
      <td style={{verticalAlign: 'middle'}}>
        <div style={{display: 'flex', alignItems: 'center', gap: '2px'}}>
          <img src="https://avatars.githubusercontent.com/u/6764390?s=40&v=4" width="20" height="20" />
          <a href="https://github.com/elastic/genai-workshops"><strong>elastic/genai-workshops</strong></a>
        </div>
      </td>
      <td style={{verticalAlign: 'middle'}}>⭐ 9</td>
    </tr>
    <tr>
      <td style={{verticalAlign: 'middle'}}>
        <div style={{display: 'flex', alignItems: 'center', gap: '2px'}}>
          <img src="https://avatars.githubusercontent.com/u/6688805?s=40&v=4" width="20" height="20" />
          <a href="https://github.com/innovaccer/Healthcare-MCP"><strong>innovaccer/Healthcare-MCP</strong></a>
        </div>
      </td>
      <td style={{verticalAlign: 'middle'}}>⭐ 6</td>
    </tr>
    <tr>
      <td style={{verticalAlign: 'middle'}}>
        <div style={{display: 'flex', alignItems: 'center', gap: '2px'}}>
          <img src="https://avatars.githubusercontent.com/u/205593730?s=40&v=4" width="20" height="20" />
          <a href="https://github.com/Qingyon-AI/Revornix"><strong>Qingyon-AI/Revornix</strong></a>
        </div>
      </td>
      <td style={{verticalAlign: 'middle'}}>⭐ 5</td>
    </tr>
    <tr>
      <td style={{verticalAlign: 'middle'}}>
        <div style={{display: 'flex', alignItems: 'center', gap: '2px'}}>
          <img src="https://avatars.githubusercontent.com/u/68845761?s=40&v=4" width="20" height="20" />
          <a href="https://github.com/entbappy/MCP-Tutorials"><strong>entbappy/MCP-Tutorials</strong></a>
        </div>
      </td>
      <td style={{verticalAlign: 'middle'}}>⭐ 5</td>
    </tr>
  </tbody>
</table>
</div>


#### Video Tutorials



<YouTubeEmbed
  videoId="4v_XmSsK960"
  title="LangChain Integration with mcp-use"
/>


<YouTubeEmbed
  videoId="khObn4yZJYE"
  title="Production Deployment Strategies for MCP Agents"
/>



<YouTubeEmbed
  videoId="9mVok-_McU4"
  title="Secure MCP Execution in Sandbox Environments"
/>



<YouTubeEmbed
  videoId="BG4F3b5QpjM"
  title="Building AI Agents with MCP & Python - Part 1"
/>


<YouTubeEmbed
  videoId="uM8zkJmyTrg"
  title="Advanced MCP Integration Techniques"
/>


<YouTubeEmbed
  videoId="7X9sQ-CyQVs"
  title="Multi-Server Agent Orchestration with mcp-use"
/>


<YouTubeEmbed
  videoId="jlFrhR7c5wg"
  title="Custom MCP Server Development"
/>

<Separator />

<YouTubeEmbed
  videoId="uM6w606_NVs"
  title="Browser Automation with MCP and mcp-use"
/>


<YouTubeEmbed
  videoId="jRk63S3v-UQ"
  title="File System Operations with MCP"
/>

Have you created video tutorials or demos using mcp-use? We'd love to feature them here! Share your content in our [Discord community](https://discord.gg/XkNkSkMz3V).

## Contributing

To get your project featured:

1. Ensure your project demonstrates best practices
2. Include comprehensive documentation
3. Add clear usage examples
4. Open a discussion in our [GitHub Discussions](https://github.com/mcp-use/mcp-use/discussions)

We review submissions regularly and feature projects that provide value to the mcp-use community.

## Further Reading

- [Building Custom Agents](/advanced/building-custom-agents) - Comprehensive guide to creating custom agents with mcp-use
- [Multi-Server Setup](/advanced/multi-server-setup) - Learn how to orchestrate multiple MCP servers
- [Examples Repository](https://github.com/mcp-use/mcp-use/tree/main/examples) - Official collection of usage examples



================================================
FILE: docs/development/observability.mdx
================================================
---
title: "Observability"
description: "Trace and monitor your MCP agents with Langfuse, Laminar, and LangSmith"
icon: "eye"
---

## Overview

MCP-use provides **optional observability integration** to help you debug, monitor, and optimize your AI agents. Observability gives you visibility into:

- **Agent execution flow** with detailed step-by-step tracing
- **Tool usage patterns** and performance metrics
- **LLM calls** with token usage and costs
- **Error tracking** and debugging information
- **Conversation analytics** across sessions

<Warning>
**Completely Optional**: Observability is entirely opt-in and requires zero code changes to your existing workflows.
</Warning>

## Supported Platforms

MCP-use integrates with two leading observability platforms:

- **[Langfuse](https://langfuse.com)** - Open-source LLM observability with self-hosting options
- **[Laminar](https://www.lmnr.ai)** - Comprehensive AI application monitoring platform
- **[LangSmith](https://smith.langchain.com/)** - LangChain's observability platform

Choose the platform that best fits your needs. Each platform automatically initializes when you import mcp_use if their environment variables are set.

## What Gets Traced

These platforms automatically capture:
- **Agent conversations** - Full query/response pairs
- **LLM calls** - Model usage, tokens, and costs
- **Tool executions** - Which MCP tools were used and their outputs
- **Performance metrics** - Execution times and step counts
- **Error tracking** - Failed operations with full context

### Example Trace View
Your observability dashboard will show something like:

```
🔍 mcp_agent_run
├── 💬 LLM Call (gpt-4)
│   ├── Input: "Help me analyze the sales data"
│   └── Output: "I'll help you analyze the sales data..."
├── 🔧 Tool: read_file
│   ├── Input: {"path": "sales_data.csv"}
│   └── Output: "CSV content loaded..."
├── 🔧 Tool: analyze_data
│   ├── Input: {"data": "...", "analysis_type": "summary"}
│   └── Output: "Analysis complete..."
└── 💬 Final Response
    └── "Based on the sales data analysis..."
```

# Langfuse Integration

[Langfuse](https://langfuse.com) is an open-source LLM observability platform with both cloud and self-hosted options.

## Setup Langfuse

### 1. Install Langfuse
```bash
pip install langfuse
```

### 2. Get Your Keys
- **Cloud**: Sign up at [cloud.langfuse.com](https://cloud.langfuse.com)
- **Self-hosted**: Follow the [self-hosting guide](https://langfuse.com/docs/deployment/self-host)

### 3. Set Environment Variables
```bash
export LANGFUSE_PUBLIC_KEY="pk-lf-..."
export LANGFUSE_SECRET_KEY="sk-lf-..."
```

### 4. Start Using
```python
# Langfuse automatically initializes when mcp_use is imported
import mcp_use
from mcp_use import MCPAgent

agent = MCPAgent(llm=your_llm, ...)
result = await agent.run("Your query")  # Automatically traced!
```
## Langfuse Dashboard Features
- **Timeline view** - Step-by-step execution flow
- **Performance metrics** - Response times and costs
- **Error analysis** - Debug failed operations
- **Usage analytics** - Tool and model usage patterns
- **Session grouping** - Track conversations over time
- **Self-hosting** - Full control over your data

## Environment Variables
```bash
# Required
LANGFUSE_PUBLIC_KEY="pk-lf-..."
LANGFUSE_SECRET_KEY="sk-lf-..."

# Optional - for self-hosted instances
LANGFUSE_HOST="https://your-langfuse-instance.com"

# Optional - disable Langfuse
MCP_USE_LANGFUSE="false"
```

---

# Laminar Integration

[Laminar](https://www.lmnr.ai) provides comprehensive AI application monitoring with advanced analytics.

## Setup Laminar

### 1. Install Laminar
```bash
pip install lmnr
```

### 2. Get Your API Key
- Sign up at [lmnr.ai](https://www.lmnr.ai)
- Create a new project
- Copy your project API key

### 3. Set Environment Variable
```bash
export LAMINAR_PROJECT_API_KEY="your-api-key-here"
```

### 4. Start Using
```python
# Laminar automatically initializes when mcp_use is imported
import mcp_use
from mcp_use import MCPAgent

agent = MCPAgent(llm=your_llm, ...)
result = await agent.run("Your query")  # Automatically traced!
```

## Laminar Features
- **Advanced tracing** - Detailed execution flow visualization
- **Real-time monitoring** - Live performance metrics
- **Cost tracking** - LLM usage and billing analytics
- **Error analysis** - Comprehensive error tracking and debugging
- **Team collaboration** - Shared dashboards and insights
- **Production monitoring** - Built for scale

## Environment Variables
```bash
# Required
LAMINAR_PROJECT_API_KEY="your-api-key-here"

# Optional - disable Laminar
MCP_USE_LAMINAR="false"
```

# Additional Information

## Privacy & Data Security

### What's Collected
- **Queries and responses** (for debugging context)
- **Tool inputs/outputs** (to understand workflows)
- **Model metadata** (provider, model name, tokens)
- **Performance data** (execution times, success rates)

### What's NOT Collected
- **No personal information** beyond what you send to your LLM
- **No API keys** or credentials
- **No unauthorized data** - you control what gets traced

### Security Features
- **HTTPS encryption** for all data transmission
- **Self-hosting options** available (Langfuse)
- **Easy to disable** with environment variables
- **Data ownership** - you control your observability data

## Disabling Observability

### Temporarily Disable
```bash
# Disable Langfuse
export MCP_USE_LANGFUSE="false"

# Disable Laminar
export MCP_USE_LAMINAR="false"
```

## Troubleshooting

### Common Issues

**"Package not installed" errors**
```bash
# Install the required packages
pip install langfuse  # For Langfuse
pip install lmnr      # For Laminar
```

**"API keys not found" warnings**
```bash
# Check your environment variables
echo $LANGFUSE_PUBLIC_KEY
echo $LANGFUSE_SECRET_KEY
echo $LAMINAR_PROJECT_API_KEY
```

**No traces appearing in dashboard**
- Verify your API keys are correct
- Check that observability isn't disabled (`MCP_USE_LANGFUSE` or `MCP_USE_LAMINAR` set to "false")
- Check network connectivity to the platform
- Enable debug logging: `logging.basicConfig(level=logging.DEBUG)`

**Self-hosted Langfuse connection issues**
For self-hosted Langfuse instances, set the `LANGFUSE_HOST` environment variable:
```bash
export LANGFUSE_HOST="https://your-langfuse-instance.com"
```

# LangSmith Integration

<Info>
**Advanced Debugging**: LangChain offers LangSmith, a powerful tool for debugging agent behavior that integrates seamlessly with mcp-use.
</Info>

<Steps>
  <Step title="Sign Up">
    Visit [smith.langchain.com](https://smith.langchain.com/) and create an account
  </Step>

  <Step title="Get API Keys">
    After login, you'll receive environment variables to add to your `.env` file
  </Step>

  <Step title="Visualize">
    You'll be able to visualize agent behavior, tool calls, and decision-making processes on their platform
  </Step>
</Steps>

<Tip>
LangSmith provides detailed traces of your agent's execution, making it easier to understand complex multi-step workflows.
</Tip>


## Benefits

### For Development
- **Faster debugging** - See exactly where workflows fail
- **Performance optimization** - Identify slow operations
- **Cost monitoring** - Track LLM usage and expenses

### For Production
- **Real-time monitoring** - Monitor agent performance
- **Error tracking** - Get alerted to failures
- **Usage analytics** - Understand user interaction patterns

### For Teams
- **Shared visibility** - Everyone can see agent behavior
- **Knowledge sharing** - Learn from successful workflows
- **Collaborative debugging** - Debug issues together

## Getting Help

Need help with observability setup?

- **Langfuse Documentation**: [langfuse.com/docs](https://langfuse.com/docs)
- **Laminar Documentation**: [lmnr.ai/docs](https://www.lmnr.ai/docs)
- **LangSmith Documentation**: [smith.langchain.com](https://smith.langchain.com/)
- **MCP-use Issues**: [GitHub Issues](https://github.com/mcp-use/mcp-use/issues)

<Tip>
**Pro Tip**: Start with one platform first to get familiar with observability, then add the second platform if you need different features or perspectives.
</Tip>



================================================
FILE: docs/development/telemetry.mdx
================================================
---
title: "Telemetry"
description: "Understanding MCP-use's telemetry system"
icon: "chart-line"
---

## Overview

MCP-use includes an **opt-out telemetry system** that helps us understand how the library is being used in practice. This data enables us to:

- **Prioritize development** based on real usage patterns
- **Optimize performance** for common workflows
- **Improve compatibility** with popular model providers
- **Focus on the most valuable features**

<Warning>
**Privacy First**: All telemetry is **anonymized** and can be **completely disabled** with a single environment variable.
</Warning>

## What We Collect

### Agent Execution Data
When you use `MCPAgent.run()` or `MCPAgent.astream()`, we collect:

- **Query and response content** (to understand use cases)
- **Model provider and name** (e.g., "openai", "gpt-4")
- **MCP servers connected** (types and count, not specific URLs/paths)
- **Tools used** (which MCP tools are popular)
- **Performance metrics** (execution time, steps taken)
- **Configuration settings** (memory enabled, max steps, etc.)

### System Information
- **Package version** (for version adoption tracking)
- **Error types** (for debugging and improvement)
- **Package download analytics** (via Scarf for distribution insights)

### What We DON'T Collect
- **Personal information** (no names, emails, or identifiers)
- **Server URLs or file paths** (only connection types)
- **API keys or credentials** (never transmitted)
- **IP addresses** (PostHog configured with `disable_geoip=False`)

## How to Disable Telemetry

### Environment Variable (Recommended)
```bash
export MCP_USE_ANONYMIZED_TELEMETRY=false
```

### In Your Code
```python
import os
os.environ["MCP_USE_ANONYMIZED_TELEMETRY"] = "false"

# Now use MCP-use normally - no telemetry will be collected
from mcp_use import MCPAgent
```

### Verification
When telemetry is disabled, you'll see this debug message:
```
DEBUG: Telemetry disabled
```

When enabled, you'll see:
```
INFO: Anonymized telemetry enabled. Set MCP_USE_ANONYMIZED_TELEMETRY=false to disable.
```

## Data Storage and Privacy

### Anonymous User IDs
- A random UUID is generated and stored locally in your cache directory
- **Linux/Unix**: `~/.cache/mcp_use/telemetry_user_id`
- **macOS**: `~/Library/Caches/mcp_use/telemetry_user_id`
- **Windows**: `%LOCALAPPDATA%\mcp_use\telemetry_user_id`

### Data Transmission
- Data is sent to both **PostHog** (EU servers: `https://eu.i.posthog.com`) and **Scarf** (`https://mcpuse.gateway.scarf.sh/simple/`)
- **No personal information** is ever transmitted
- Data is used only for **aggregate analysis** and **package usage analytics**

## Example Telemetry Event

Here's what a typical telemetry event looks like:

```json
{
  "event": "mcp_agent_execution",
  "distinct_id": "550e8400-e29b-41d4-a716-446655440000",
  "properties": {
    "mcp_use_version": "1.3.0",
    "execution_method": "run",
    "query": "Help me analyze sales data from the CSV file",
    "response": "I'll help you analyze the sales data...",
    "model_provider": "openai",
    "model_name": "gpt-4",
    "server_count": 2,
    "server_identifiers": [
      {"type": "stdio", "command": "python -m server"},
      {"type": "http", "base_url": "localhost:8080"}
    ],
    "tools_used_names": ["read_file", "analyze_data"],
    "execution_time_ms": 2500,
    "success": true
  }
}
```

## Benefits to the Community

### For Users
- **Better library** through data-driven improvements
- **Faster issue resolution** via error pattern detection
- **Feature prioritization** based on actual usage

### For Developers
- **Compatibility insights** for new model providers
- **Performance optimization** targets
- **Usage pattern understanding** for better APIs

## Technical Implementation

### Clean Architecture
The telemetry system uses a **decorator pattern** that ensures:
- **Zero overhead** when disabled
- **No exceptions** if PostHog or Scarf services are unavailable
- **Graceful degradation** in all failure scenarios
- **Dual telemetry** to both PostHog and Scarf for comprehensive analytics

### Code Example
```python
# This is how telemetry works internally:
@requires_telemetry
def track_agent_execution(self, ...):
    # This method only executes if telemetry is enabled
    # If disabled, it returns None immediately
    pass
```

## Frequently Asked Questions

### Can I see what data is being sent?
Yes! Set your logging level to DEBUG to see telemetry events:
```python
import logging
logging.basicConfig(level=logging.DEBUG)
```

### Does telemetry affect performance?
- **When disabled**: Zero performance impact
- **When enabled**: Minimal impact (async data transmission)

### Can I opt out after using the library?
Yes! Set the environment variable and restart your application. You can also delete the user ID file to reset your anonymous identifier.

### Is this GDPR compliant?
Yes. The telemetry system:
- Collects no personal data
- Uses anonymous identifiers
- Provides easy opt-out
- Processes data for legitimate business interests (software improvement)

## Support

If you have questions about telemetry:
- **Disable it**: Use `MCP_USE_ANONYMIZED_TELEMETRY=false`
- **Report issues**: [GitHub Issues](https://github.com/anthropics/mcp-use/issues)
- **Check logs**: Enable DEBUG logging to see telemetry activity

<Note>
Remember: Telemetry helps us build a better library for everyone, but **your privacy comes first**. We've designed the system to be transparent, minimal, and easily disabled.
</Note>



================================================
FILE: docs/getting-started/configuration.mdx
================================================
---
title: "Configuration Overview"
description: "Complete guide to configuring mcp_use"
icon: "cog"
---

# Configuration Overview

<Info>
mcp_use configuration is organized into two main areas: **Client Configuration** for connecting to MCP servers, and **Agent Configuration** for customizing agent behavior and LLM integration.
</Info>

## Configuration Architecture

mcp_use follows a clear separation between client-side and agent-side concerns:

<CardGroup cols={2}>
  <Card title="Client Configuration" icon="server" href="/client/client-configuration">
    **MCPClient Setup**
    - MCP server connections
    - Multi-server configurations
    - Sandboxed execution
    - Connection types
  </Card>
  <Card title="Agent Configuration" icon="brain" href="/agent/agent-configuration">
    **MCPAgent Setup**
    - API key management
    - LLM integration
    - Server manager
    - Tool access control
    - Memory and prompts
    - Adapter usage
  </Card>
</CardGroup>

## Quick Start Configuration

For a basic setup, you need both client and agent configuration:

### 1. Client Setup

```python
from mcp_use import MCPClient

# Configure your MCP servers
config = {
    "mcpServers": {
        "playwright": {
            "command": "npx",
            "args": ["@playwright/mcp@latest"],
            "env": {"DISPLAY": ":1"}
        }
    }
}

client = MCPClient.from_dict(config)
```

### 2. Agent Setup

```python
from mcp_use import MCPAgent
from langchain_openai import ChatOpenAI

# Configure your agent with an LLM
llm = ChatOpenAI(model="gpt-4o")
agent = MCPAgent(llm=llm, client=client)
```

### 3. Basic Usage

```python
import asyncio

async def main():
    result = await agent.run("Search for information about climate change")
    print(result)

asyncio.run(main())
```

## Configuration Paths

<Steps>
  <Step title="Client Configuration">
    Set up your MCPClient to connect to MCP servers. This includes configuring server connections, managing API keys, and setting up multi-server environments.

    **Start here:** [Client Configuration Guide →](/client/client-configuration)
  </Step>

  <Step title="Agent Configuration">
    Configure your MCPAgent's behavior, including LLM integration, tool restrictions, memory settings, and custom prompts.

    **Continue with:** [Agent Configuration Guide →](/agent/agent-configuration)
  </Step>

  <Step title="Advanced Topics">
    Explore connection types, server management, and LLM integration patterns for complex use cases.

    **Learn more:** [Connection Types](/client/connection-types) | [Server Manager](/agent/server-manager) | [LLM Integration](/agent/llm-integration)
  </Step>
</Steps>

## Common Configuration Patterns

### Development Setup
```python
# Simple development configuration
from dotenv import load_dotenv
load_dotenv()

client = MCPClient.from_config_file("dev-config.json")
agent = MCPAgent(
    llm=ChatOpenAI(model="gpt-4o"),
    client=client,
    max_steps=10,
    verbose=True
)
```

### Production Setup
```python
# Production configuration with restrictions
agent = MCPAgent(
    llm=ChatOpenAI(model="gpt-4o", temperature=0.1),
    client=client,
    max_steps=30,
    disallowed_tools=["file_system", "shell"],
    use_server_manager=True,
    memory_enabled=True
)
```

### Multi-Server Setup
```python
# Complex multi-server configuration
client = MCPClient.from_config_file("multi-server.json")
agent = MCPAgent(
    llm=llm,
    client=client,
    use_server_manager=True,  # Auto-select servers
    system_prompt="You have access to web browsing, file operations, and API tools."
)
```

## What's Next?

<CardGroup cols={3}>
  <Card title="Client Configuration" icon="server" href="/client/client-configuration">
    Learn how to configure MCPClient and connect to MCP servers
  </Card>
  <Card title="Agent Configuration" icon="brain" href="/agent/agent-configuration">
    Discover how to customize MCPAgent behavior and LLM integration
  </Card>
  <Card title="Examples" icon="code" href="https://github.com/mcp-use/mcp-use/tree/main/examples">
    Explore real-world configuration examples
  </Card>
</CardGroup>

<Tip>
**New to mcp_use?** Start with the [Quickstart Guide](/quickstart) for a basic introduction, then return here for detailed configuration options.
</Tip>



================================================
FILE: docs/getting-started/index.mdx
================================================
---
title: "Introduction"
description: "The open source MCP client library. Connect any LLM to any MCP server without vendor lock-in."
icon: "book-open"
mode: "custom"
---



<div className="absolute inset-0 z-[-10]">
  <img
    src="/images/02.png"
    className="block dark:hidden pointer-events-none w-full h-full object-cover"
  />
  <img
    src="/images/02.png"
    className="hidden dark:block pointer-events-none w-full h-full object-cover opacity-40"
  />
</div>

<div className="px-4 py-8 mt-24 lg:pb-24 max-w-3xl mx-auto">
<div className="text-center">
<img
  src="/logo/light.svg"
  className="block dark:hidden mx-auto h-16 w-auto"
  alt="mcp_use"
/>
<img
  src="/logo/dark.svg"
  className="hidden dark:block mx-auto h-16 w-auto"
  alt="mcp_use"
/>
</div>

<p className="max-w-xl mx-auto px-4 mt-4 text-lg text-center text-gray-500 dark:text-zinc-500">
The open source MCP client library. Connect any LLM to any MCP server.

</p>

<div className="px-6 lg:px-0 mt-12 lg:mt-24 grid sm:grid-cols-2 gap-x-6 gap-y-4">
<a className="group cursor-pointer pb-8" href="/getting-started/quickstart">
  <img src="/images/quickstart-light.png" className="block dark:hidden pointer-events-none group-hover:scale-105 transition-all duration-100" />
  <img src="/images/quickstart-dark.png" className="pointer-events-none group-hover:scale-105 transition-all duration-100 hidden dark:block" />
  <h3 className="mt-5 text-gray-900 dark:text-zinc-50 font-medium">Quick Start</h3>
  <span className="mt-1.5">
    Get up and running in minutes with our step-by-step guide
  </span>
</a>

<a className="group cursor-pointer pb-8" href="/getting-started/installation">
  <img src="/images/installation-light.png" className="block dark:hidden pointer-events-none group-hover:scale-105 transition-all duration-100" />
  <img src="/images/installation-dark.png" className="pointer-events-none group-hover:scale-105 transition-all duration-100 hidden dark:block" />
  <h3 className="mt-5 text-gray-900 dark:text-zinc-50 font-medium">Installation</h3>
  <span className="mt-1.5">
    Install mcp_use and set up your development environment
  </span>
</a>

<a className="group cursor-pointer pb-8" href="/getting-started/configuration">
  <img src="/images/configuration-light.png" className="block dark:hidden pointer-events-none group-hover:scale-105 transition-all duration-100" />
  <img src="/images/configuration-dark.png" className="pointer-events-none group-hover:scale-105 transition-all duration-100 hidden dark:block" />
  <h3 className="mt-5 text-gray-900 dark:text-zinc-50 font-medium">Configuration</h3>
  <span className="mt-1.5">
    Learn how to configure MCP servers and LLM providers
  </span>
</a>

<a className="group cursor-pointer pb-8" href="https://github.com/mcp-use/mcp-use/tree/main/examples">
  <img src="/images/examples-light.png" className="block dark:hidden pointer-events-none group-hover:scale-105 transition-all duration-100" />
  <img src="/images/examples-dark.png" className="pointer-events-none group-hover:scale-105 transition-all duration-100 hidden dark:block" />
  <h3 className="mt-5 text-gray-900 dark:text-zinc-50 font-medium">Examples</h3>
  <span className="mt-1.5">
    Explore real-world examples and advanced use cases
  </span>
</a>

</div>

</div>

<div className="max-w-5xl mx-auto px-6 py-16">


# What is mcp_use?

mcp_use is an **open source library** that enables developers to connect any Language Learning Model (LLM) to any MCP server, allowing the creation of custom agents with tool access without relying on closed-source or application-specific clients.

<Note>
**Freedom & Flexibility**: Break free from vendor lock-in and build agents that work with any LLM provider and any MCP server combination.
</Note>

# Key Features

<CardGroup cols={2}>
  <Card title="Open Source" icon="code" href="/development">
    Connect any LLM to any MCP server without vendor lock-in
  </Card>
  <Card title="Flexible Configuration" icon="server" href="/getting-started/configuration">
    Support for any MCP server through a simple configuration system
  </Card>
  <Card title="Easy Setup" icon="grid-2x2-check" href="getting-started/installation">
    Simple JSON-based configuration for MCP server integration
  </Card>
  <Card title="Universal LLM Support" icon="globe" href="/agent/llm-integration">
    Compatible with any LangChain-supported LLM provider
  </Card>
  <Card title="Multi-Server Support" icon="network" href="/advanced/multi-server-setup">
    Connect to multiple MCP servers simultaneously for complex workflows
  </Card>
  <Card title="Dynamic Server Selection" icon="shuffle" href="/agent/server-manager">
    Agents can dynamically choose the most appropriate MCP server for each task
  </Card>
</CardGroup>

# Popular Use Cases

<CardGroup cols={3}>
  <Card title="Web Scraping & Research" icon="globe" href="/getting-started/quickstart">
    Combine Playwright with filesystem servers for automated research workflows
  </Card>
  <Card title="Data Analysis" icon="chart-bar" href="/advanced/multi-server-setup">
    Connect database servers with Python execution for data processing pipelines
  </Card>
  <Card title="Development Automation" icon="git-pull-request" href="/agent/streaming">
    Integrate Git, filesystem, and code execution servers for automated development tasks
  </Card>
  <Card title="Content Generation" icon="file-text" href="/advanced/building-custom-agents">
    Build content pipelines with research, writing, and publishing capabilities
  </Card>
  <Card title="API Integration" icon="plug" href="/client/connection-types">
    Connect to external APIs and services through custom MCP servers
  </Card>
  <Card title="Security & Compliance" icon="shield" href="/advanced/security">
    Implement secure, auditable agent workflows with proper access controls
  </Card>
</CardGroup>

# Supported MCP Servers

<Info>
mcp_use supports **any MCP server**, allowing you to connect to a wide range of server implementations for different use cases.
</Info>

<CardGroup cols={2}>
  <Card title="Playwright" icon="globe" href="https://github.com/microsoft/playwright-python">
    Web scraping and browser automation capabilities
  </Card>
  <Card title="Filesystem" icon="folder" href="https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem">
    Safe file system operations and management
  </Card>
  <Card title="SQLite" icon="database" href="https://github.com/modelcontextprotocol/servers/tree/main/src/sqlite">
    Database querying and management tools
  </Card>
  <Card title="GitHub" icon="github" href="https://github.com/modelcontextprotocol/servers/tree/main/src/github">
    Repository management and GitHub API access
  </Card>
</CardGroup>

<Card title="Awesome MCP Servers" icon="star" href="https://github.com/punkpeye/awesome-mcp-servers" horizontal>
  Explore a comprehensive list of available MCP servers from the community - find servers for APIs, databases, cloud services, and more.
</Card>

# Why Choose mcp_use?

<AccordionGroup>
  <Accordion title="True Multi-Provider Freedom">
    Unlike proprietary solutions that lock you into specific LLM providers or platforms, mcp_use works with any LangChain-supported model and any MCP server, giving you complete freedom to choose the best tools for your needs.
  </Accordion>

  <Accordion title="Production-Ready Security">
    Built with security best practices in mind, featuring comprehensive input validation, access controls, audit logging, and secure configuration management for enterprise deployments.
  </Accordion>

  <Accordion title="Scalable Architecture">
    The server manager enables efficient resource utilization by connecting to servers only when needed, supporting complex multi-server workflows without unnecessary overhead.
  </Accordion>

  <Accordion title="Developer Experience">
    Simple configuration, comprehensive documentation, real-time streaming support, and extensive examples make it easy to get started and scale your implementations.
  </Accordion>
</AccordionGroup>

<Tip>
**New to MCP?** The Model Context Protocol (MCP) is an open standard that enables secure connections between LLM applications and external data sources and tools. Learn more at [modelcontextprotocol.io](https://modelcontextprotocol.io/).
</Tip>

</div>



================================================
FILE: docs/getting-started/installation.mdx
================================================
---
title: "Installation"
description: "Install mcp_use and get your development environment ready"
icon: "download"
---

<img
  className="block dark:hidden my-0 pointer-events-none"
  src="/images/hero-light.png"
  alt="mcp_use Installation"
/>
<img
  className="hidden dark:block my-0 pointer-events-none"
  src="/images/hero-dark.png"
  alt="mcp_use Installation"
/>

## Installing mcp_use

<Info>
  **Prerequisites**: Please install [Python](https://python.org/) (version 3.11 or higher) before proceeding.
</Info>

<Steps>
  <Step title="Install the library">
    Install mcp_use using your preferred package manager:
    <CodeGroup>

    ```bash pip
    pip install mcp-use
    ```

    ```bash Poetry
    poetry add mcp-use
    ```

    ```bash Conda
    conda install -c conda-forge mcp-use
    ```

    </CodeGroup>
  </Step>
  <Step title="Install LLM provider">
    Choose and install your preferred LangChain provider:
    <CodeGroup>

    ```bash OpenAI
    pip install langchain-openai
    ```

    ```bash Anthropic
    pip install langchain-anthropic
    ```

    ```bash Google
    pip install langchain-google-genai
    ```

    ```bash Groq
    pip install langchain-groq
    ```

    </CodeGroup>
  </Step>
  <Step title="Set up environment">
    Create a `.env` file for your API keys:

    ```bash
    OPENAI_API_KEY=your_openai_key_here
    ANTHROPIC_API_KEY=your_anthropic_key_here
    GROQ_API_KEY=your_groq_key_here
    GOOGLE_API_KEY=your_google_key_here
    ```
  </Step>
  <Step title="Verify installation">
    Test your installation with a simple script:

    ```python test_install.py
    from mcp_use import MCPAgent, MCPClient
    print("mcp_use installed successfully!")
    ```
  </Step>
</Steps>

## Development Installation

If you want to contribute or use the latest features, install from source:

<CodeGroup>

```bash Git Clone
git clone https://github.com/mcp-use/mcp-use.git
cd mcp-use
pip install -e .
```

```bash Development Mode
git clone https://github.com/mcp-use/mcp-use.git
cd mcp-use
pip install -e ".[dev]"
```

</CodeGroup>

## Installing MCP Servers

mcp_use connects to MCP servers that provide the actual tools. Here are some popular ones:

### Playwright (Web Scraping)

<CodeGroup>

```bash NPM
npx @playwright/mcp@latest
```

```bash Global Install
npm install -g @playwright/mcp
```

</CodeGroup>

### Filesystem Server

<CodeGroup>

```bash Python
pip install mcp-server-filesystem
```

```bash From Source
git clone https://github.com/modelcontextprotocol/servers.git
cd servers/src/filesystem
pip install -e .
```

</CodeGroup>

### SQLite Server

<CodeGroup>

```bash Python
pip install mcp-server-sqlite
```

```bash NPM
npm install -g @modelcontextprotocol/server-sqlite
```

</CodeGroup>

<Tip>
  Check out the [Awesome MCP Servers](https://github.com/punkpeye/awesome-mcp-servers) repository for a comprehensive list of available servers.
</Tip>

## Environment Setup

### Using Virtual Environments

It's recommended to use virtual environments to avoid dependency conflicts:

<CodeGroup>

```bash venv
python -m venv mcp_env
source mcp_env/bin/activate  # On Windows: mcp_env\Scripts\activate
pip install mcp-use langchain-openai
```

```bash conda
conda create -n mcp_env python=3.9
conda activate mcp_env
pip install mcp-use langchain-openai
```

```bash Poetry
poetry init
poetry add mcp-use langchain-openai
poetry shell
```

</CodeGroup>

### Environment Variables

Create a `.env` file in your project root:

```bash .env
# LLM Provider Keys
OPENAI_API_KEY=sk-...
ANTHROPIC_API_KEY=sk-ant-...
GROQ_API_KEY=gsk_...
GOOGLE_API_KEY=AI...

# Optional: Logging level
LOG_LEVEL=INFO

# Optional: MCP server paths
MCP_SERVER_PATH=/path/to/mcp/servers
```

Load environment variables in your Python scripts:

```python
from dotenv import load_dotenv
import os

load_dotenv()

# Your API keys are now available as environment variables
openai_key = os.getenv("OPENAI_API_KEY")
```

## Verification

Verify your installation works correctly:

```python verify_setup.py
import asyncio
import os
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from mcp_use import MCPAgent, MCPClient

async def verify_installation():
    load_dotenv()

    # Simple configuration for testing
    config = {
        "mcpServers": {
            "test": {
                "command": "echo",
                "args": ["Hello from MCP!"]
            }
        }
    }

    try:
        client = MCPClient.from_dict(config)
        print("✅ MCPClient created successfully")

        llm = ChatOpenAI(model="gpt-3.5-turbo")
        print("✅ LLM initialized successfully")

        agent = MCPAgent(llm=llm, client=client)
        print("✅ MCPAgent created successfully")

        print("\n🎉 Installation verified! You're ready to use mcp_use.")

    except Exception as e:
        print(f"❌ Verification failed: {e}")
        print("Please check your installation and API keys.")

if __name__ == "__main__":
    asyncio.run(verify_installation())
```

## Next Steps

<CardGroup cols={2}>
  <Card title="Quick Start" icon="rocket" href="/getting-started/quickstart">
    Follow our quickstart guide to build your first agent
  </Card>
  <Card title="Configuration" icon="gear" href="/getting-started/configuration">
    Learn how to configure MCP servers
  </Card>
  <Card title="LLM Integration" icon="brain" href="/agent/llm-integration">
    Explore different LLM providers and their setup
  </Card>
  <Card title="Examples" icon="code" href="https://github.com/mcp-use/mcp-use/tree/main/examples">
    Browse real-world examples and use cases
  </Card>
</CardGroup>

## Troubleshooting

<AccordionGroup>
  <Accordion title="Import errors or module not found">
    Make sure you're in the correct virtual environment and that mcp_use is installed:
    ```bash
    pip list | grep mcp-use
    ```
  </Accordion>
  <Accordion title="API key errors">
    Verify your `.env` file is in the correct location and your API keys are valid:
    ```bash
    cat .env  # Check file contents
    python -c "import os; from dotenv import load_dotenv; load_dotenv(); print(os.getenv('OPENAI_API_KEY'))"
    ```
  </Accordion>
  <Accordion title="MCP server not found">
    Ensure your MCP servers are properly installed and accessible:
    ```bash
    which npx  # For Node.js-based servers
    pip list | grep mcp-server  # For Python-based servers
    ```
  </Accordion>
</AccordionGroup>

<Warning>
  **Tool Calling Required**: Only models with tool calling capabilities can be used with mcp_use. Make sure your chosen model supports function calling or tool use.
</Warning>



================================================
FILE: docs/getting-started/quickstart.mdx
================================================
---
title: "Quickstart"
description: "Get started with mcp_use in minutes"
icon: "rocket"
---

# Quickstart Guide

<Info>
This guide will get you started with mcp_use in **under 5 minutes**. We'll cover installation, basic configuration, and running your first agent.
</Info>

## Installation

<CodeGroup>
  ```bash pip
  pip install mcp-use
  ```

  ```bash from source
  git clone https://github.com/mcp-use/mcp-use.git
  cd mcp-use
  pip install -e .
  ```
</CodeGroup>

<Tip>
Installing from source gives you access to the latest features and examples!
</Tip>

## Installing LangChain Providers

mcp_use works with various LLM providers through LangChain. You'll need to install the appropriate LangChain provider package for your chosen LLM:

<CodeGroup>
  ```bash OpenAI
  pip install langchain-openai
  ```

  ```bash Anthropic
  pip install langchain-anthropic
  ```

  ```bash Google
  pip install langchain-google-genai
  ```

  ```bash Groq
  pip install langchain-groq
  ```
</CodeGroup>

<Warning>
**Tool Calling Required**: Only models with tool calling capabilities can be used with mcp_use. Make sure your chosen model supports function calling or tool use.
</Warning>

<Tip>
For other providers, check the [LangChain chat models documentation](https://python.langchain.com/docs/integrations/chat/)
</Tip>

## Environment Setup

<Note>
Set up your environment variables in a `.env` file for secure API key management:
</Note>

```bash .env
OPENAI_API_KEY=your_api_key_here
ANTHROPIC_API_KEY=your_api_key_here
GROQ_API_KEY=your_api_key_here
GOOGLE_API_KEY=your_api_key_here
```

## Your First Agent

Here's a simple example to get you started:

```python
import asyncio
import os
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from mcp_use import MCPAgent, MCPClient

async def main():
    # Load environment variables
    load_dotenv()

    # Create configuration dictionary
    config = {
      "mcpServers": {
        "playwright": {
          "command": "npx",
          "args": ["@playwright/mcp@latest"],
          "env": {
            "DISPLAY": ":1"
          }
        }
      }
    }

    # Create MCPClient from configuration dictionary
    client = MCPClient.from_dict(config)

    # Create LLM
    llm = ChatOpenAI(model="gpt-4o")

    # Create agent with the client
    agent = MCPAgent(llm=llm, client=client, max_steps=30)

    # Run the query
    result = await agent.run(
        "Find the best restaurant in San Francisco USING GOOGLE SEARCH",
    )
    print(f"\nResult: {result}")

if __name__ == "__main__":
    asyncio.run(main())
```

## Configuration Options

You can also load servers configuration from a config file:

```python
client = MCPClient.from_config_file("browser_mcp.json")
```

Example configuration file (`browser_mcp.json`):

```json
{
  "mcpServers": {
    "playwright": {
      "command": "npx",
      "args": ["@playwright/mcp@latest"],
      "env": {
        "DISPLAY": ":1"
      }
    }
  }
}
```

<Tip>
For multi-server setups, tool restrictions, and advanced configuration options, see the [Configuration Overview](/getting-started/configuration).
</Tip>


## Available MCP Servers

mcp_use supports **any MCP server**. Check out the [Awesome MCP Servers](https://github.com/punkpeye/awesome-mcp-servers) list for available options.

## Streaming Agent Output

Stream agent responses as they're generated:

```python
async for chunk in agent.astream("your query here"):
    print(chunk, end="", flush=True)
```

<Tip>
Uses LangChain's streaming API. See [streaming documentation](https://python.langchain.com/docs/how_to/streaming/) for more details.
</Tip>


## Next Steps

<CardGroup cols={3}>
  <Card title="Configuration" icon="gear" href="/getting-started/configuration">
    Complete configuration guide covering client setup and agent customization
  </Card>
  <Card title="LLM Integration" icon="brain" href="/agent/llm-integration">
    Discover all supported LLM providers and optimization tips
  </Card>
  <Card title="Examples" icon="code" href="https://github.com/mcp-use/mcp-use/tree/main/examples">
    Explore real-world examples and use cases
  </Card>
</CardGroup>

<Tip>
**Need Help?** Join our community discussions on GitHub or check out the comprehensive examples in our repository!
</Tip>



================================================
FILE: docs/snippets/snippet-intro.mdx
================================================
---
title: "Snippets"
description: "Reusable content snippets for documentation"
icon: "copy"
---

One of the core principles of software development is DRY (Don't Repeat
Yourself). This is a principle that apply to documentation as
well. If you find yourself repeating the same content in multiple places, you
should consider creating a custom snippet to keep your content in sync.



================================================
FILE: docs/snippets/youtube-embed.mdx
================================================
import React from 'react';

export const YouTubeEmbed = ({ videoId, title }) => (
  <div style={{ position: 'relative', paddingBottom: '56.25%', height: 0, overflow: 'hidden', maxWidth: '100%', background: '#000' }}>
    <iframe
      src={`https://www.youtube.com/embed/${videoId}`}
      title={title}
      frameBorder="0"
      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
      allowFullScreen
      style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}
    />
  </div>
);



================================================
FILE: docs/troubleshooting/common-issues.mdx
================================================
---
title: "Common Issues"
description: "Solutions to frequently encountered problems with mcp_use"
icon: "circle-help"
---

This guide covers the most common issues users encounter when working with mcp_use and their solutions.

## Installation Issues

### ImportError: No module named 'mcp_use'

**Problem**: Cannot import mcp_use after installation.

**Solutions**:
1. Verify installation in correct environment:
   ```bash
   pip list | grep mcp-use
   ```

2. Check Python path:
   ```python
   import sys
   print(sys.path)
   ```

3. Reinstall in correct environment:
   ```bash
   pip uninstall mcp-use
   pip install mcp-use
   ```

### LangChain Provider Not Found

**Problem**: Error importing LangChain providers like `langchain_openai`.

**Solution**: Install the specific LangChain provider:
```bash
pip install langchain-openai  # for OpenAI
pip install langchain-anthropic  # for Anthropic
pip install langchain-groq  # for Groq
```

## Configuration Issues

### API Key Not Found

**Problem**: `APIKeyNotFoundError` or similar authentication errors.

**Solutions**:
1. Check environment variables:
   ```bash
   echo $OPENAI_API_KEY
   ```

2. Verify `.env` file location and contents:
   ```bash
   cat .env
   ```

3. Ensure `load_dotenv()` is called:
   ```python
   from dotenv import load_dotenv
   load_dotenv()  # Add this before using API keys
   ```

### Invalid Configuration File

**Problem**: JSON parsing errors when loading configuration.

**Solutions**:
1. Validate JSON syntax:
   ```python
   import json
   with open('config.json', 'r') as f:
       config = json.load(f)  # Will show syntax errors
   ```

2. Check file encoding (should be UTF-8):
   ```bash
   file -i config.json
   ```

3. Verify all required fields are present:
   ```json
   {
     "mcpServers": {
       "server_name": {
         "command": "command_here",
         "args": ["arg1", "arg2"]
       }
     }
   }
   ```

## MCP Server Issues

### Server Not Found

**Problem**: `FileNotFoundError` when trying to start MCP server.

**Solutions**:
1. Check if server is installed:
   ```bash
   which npx  # for Node.js servers
   which python  # for Python servers
   ```

2. Test server manually:
   ```bash
   npx @playwright/mcp@latest --version
   ```

3. Use full path in configuration:
   ```json
   {
     "mcpServers": {
       "playwright": {
         "command": "/usr/local/bin/npx",
         "args": ["@playwright/mcp@latest"]
       }
     }
   }
   ```

### Server Connection Timeout

**Problem**: Server takes too long to start or respond.

**Solutions**:
1. Increase timeout in agent configuration:
   ```python
   agent = MCPAgent(
       llm=llm,
       client=client,
       timeout=60  # Increase from default 30 seconds
   )
   ```

2. Check server logs for issues:
   ```python
   import logging
   logging.basicConfig(level=logging.DEBUG)
   ```

3. Test server independently:
   ```bash
   timeout 30 npx @playwright/mcp@latest
   ```

### Permission Denied

**Problem**: Server cannot access files or directories.

**Solutions**:
1. Check file permissions:
   ```bash
   ls -la /path/to/directory
   ```

2. Update server configuration with accessible paths:
   ```json
   {
     "mcpServers": {
       "filesystem": {
         "command": "mcp-server-filesystem",
         "args": ["/home/user/workspace"]  # Use accessible directory
       }
     }
   }
   ```

3. Run with appropriate user permissions:
   ```bash
   sudo chown -R $USER:$USER /path/to/directory
   ```

## Agent Runtime Issues

### No Tools Available

**Problem**: Agent reports no tools are available.

**Solutions**:
1. Verify server connection:
   ```python
   client = MCPClient.from_config_file("config.json")
   await client.create_all_sessions()
   session = client.get_session("server_name")  # Replace with actual server name
   tools = await session.list_tools()
   print(f"Available tools: {len(tools)}")
   ```

2. Check for server startup errors:
   ```python
   agent = MCPAgent(llm=llm, client=client, debug=True)
   ```

3. Verify server compatibility:
   ```bash
   npx @playwright/mcp@latest --help
   ```

### Tool Execution Failures

**Problem**: Tools fail during execution with unclear errors.

**Solutions**:
1. Enable verbose logging:
   ```python
   import logging
   logging.basicConfig(level=logging.DEBUG)

   agent = MCPAgent(llm=llm, client=client, verbose=True)
   ```

2. Test tools individually:
   ```python
   from mcp_use.adapters import LangChainAdapter

   adapter = LangChainAdapter()
   tools = await adapter.create_tools(client)

   # Test specific tool
   result = await tools[0].ainvoke({"input": "test"})
   ```

3. Check tool arguments:
   ```python
   for tool in tools:
       print(f"Tool: {tool.name}")
       print(f"Description: {tool.description}")
       print(f"Args: {tool.args}")
   ```

### Memory/Performance Issues

**Problem**: Agent uses too much memory or runs slowly.

**Solutions**:
1. Enable server manager:
   ```python
   agent = MCPAgent(
       llm=llm,
       client=client,
       use_server_manager=True  # Only connects servers when needed
   )
   ```

2. Limit concurrent servers:
   ```python
   agent = MCPAgent(
       llm=llm,
       client=client,
       max_concurrent_servers=3
   )
   ```

3. Restrict available tools:
   ```python
   agent = MCPAgent(
       llm=llm,
       client=client,
       allowed_tools=["file_read", "file_write"],  # Limit tool set
       max_steps=10  # Limit execution steps
   )
   ```

## LLM-Specific Issues

### Model Not Supporting Tools

**Problem**: LLM doesn't support function calling.

**Solution**: Use a tool-calling capable model:
```python
# ✅ Good - supports tool calling
llm = ChatOpenAI(model="gpt-4")
llm = ChatAnthropic(model="claude-3-sonnet-20240229")

# ❌ Bad - doesn't support tool calling
llm = OpenAI(model="gpt-3.5-turbo-instruct")  # Completion model
```

### Rate Limiting

**Problem**: API rate limits being exceeded.

**Solutions**:
1. Add delays between requests:
   ```python
   agent = MCPAgent(
       llm=llm,
       client=client,
       delay_between_steps=1.0  # 1 second delay
   )
   ```

2. Use different model tier:
   ```python
   llm = ChatOpenAI(
       model="gpt-3.5-turbo",  # Lower rate limits
       max_retries=3,
       retry_delay=2
   )
   ```

### Model Compatibility Issues

**Problem**: Some models don't support tools or don't work well with MCP servers.

**Solution**: Many models either don't support tool calling or have poor compatibility with MCP servers. If you encounter a model that doesn't behave well, please [open a pull request](https://github.com/mcp-use/mcp-use/pulls) with proof of the issue and add it to the list of incompatible models below.

**Known Incompatible Models**:
- *List will be updated as issues are reported*

When reporting model compatibility issues, please include:
- Model name and version
- Specific error messages
- Test case demonstrating the issue
- Expected vs actual behavior

## Environment-Specific Issues

### Docker/Container Issues

**Problem**: MCP servers not working in containerized environments.

**Solutions**:
1. Install Node.js in container:
   ```dockerfile
   RUN apt-get update && apt-get install -y nodejs npm
   ```

2. Mount necessary directories:
   ```bash
   docker run -v /host/workspace:/container/workspace myapp
   ```

3. Set proper environment variables:
   ```bash
   docker run -e DISPLAY=:0 -e NODE_PATH=/usr/local/lib/node_modules myapp
   ```

### Windows-Specific Issues

**Problem**: Path or command issues on Windows.

**Solutions**:
1. Use Windows-style paths:
   ```json
   {
     "mcpServers": {
       "filesystem": {
         "command": "mcp-server-filesystem",
         "args": ["C:\\Users\\YourName\\workspace"]
       }
     }
   }
   ```

2. Use `cmd` for Node.js commands:
   ```json
   {
     "mcpServers": {
       "playwright": {
         "command": "cmd",
         "args": ["/c", "npx", "@playwright/mcp@latest"]
       }
     }
   }
   ```

## Getting Help

If you continue experiencing issues:

1. **Check logs**: Enable debug logging and review error messages
2. **Search issues**: Look through [GitHub issues](https://github.com/mcp-use/mcp-use/issues)
3. **Create issue**: Report bugs with:
   - Complete error messages
   - Configuration files (remove API keys)
   - Environment details (OS, Python version, etc.)
   - Steps to reproduce

<Tip>
Most issues are related to configuration, environment setup, or missing dependencies. Double-check these basics before diving into complex debugging.
</Tip>



================================================
FILE: docs/troubleshooting/connection-errors.mdx
================================================
---
title: "Connection Errors"
description: "Diagnose and resolve MCP server connection issues"
icon: "wifi"
---

This guide helps you diagnose and resolve connection issues between mcp_use and MCP servers.

## Understanding MCP Connections

MCP servers can use different connection types, each with unique failure modes:

- **Stdio**: Communication through stdin/stdout
- **HTTP**: RESTful API communication
- **WebSocket**: Real-time bidirectional communication

## Common Connection Errors

### Server Not Found

**Error**: `FileNotFoundError: [Errno 2] No such file or directory: 'command'`

**Diagnosis**:
```python
import shutil

# Check if command exists
command = "npx"  # or your server command
if shutil.which(command):
    print(f"✅ {command} found at: {shutil.which(command)}")
else:
    print(f"❌ {command} not found in PATH")
```

**Solutions**:

<Tabs>
  <Tab title="Node.js Servers">
    ```bash
    # Install Node.js and npm
    curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
    sudo apt-get install -y nodejs

    # Verify installation
    node --version
    npm --version

    # Install MCP server globally
    npm install -g @playwright/mcp
    ```
  </Tab>
  <Tab title="Python Servers">
    ```bash
    # Install Python server
    pip install mcp-server-filesystem

    # Verify installation
    which mcp-server-filesystem

    # Test server
    mcp-server-filesystem --help
    ```
  </Tab>
  <Tab title="Use Full Paths">
    ```json
    {
      "mcpServers": {
        "playwright": {
          "command": "/usr/local/bin/npx",
          "args": ["@playwright/mcp@latest"]
        }
      }
    }
    ```
  </Tab>
</Tabs>

### Connection Timeout

**Error**: `TimeoutError: Server connection timed out after 30 seconds`

**Diagnosis**:
```python
import asyncio
import time

async def test_server_startup():
    start_time = time.time()
    try:
        client = MCPClient.from_config_file("config.json")
        await asyncio.wait_for(client.create_all_sessions(), timeout=10)
        elapsed = time.time() - start_time
        print(f"✅ Sessions created in {elapsed:.2f}s")
    except asyncio.TimeoutError:
        elapsed = time.time() - start_time
        print(f"❌ Session creation timed out after {elapsed:.2f}s")

# Run test
await test_server_startup()
```

**Solutions**:

1. **Increase timeout**:
   ```python
   agent = MCPAgent(
       llm=llm,
       client=client,
       timeout=60,  # Increase from default 30s
       server_startup_timeout=45
   )
   ```

2. **Check server logs**:
   ```python
   import logging
   logging.basicConfig(level=logging.DEBUG)

   # This will show detailed server startup logs
   client = MCPClient.from_config_file("config.json", debug=True)
   ```

3. **Test server manually**:
   ```bash
   # Test Node.js server
   timeout 30 npx @playwright/mcp@latest

   # Test Python server
   timeout 30 mcp-server-filesystem /workspace
   ```

### Permission Denied

**Error**: `PermissionError: [Errno 13] Permission denied`

**Diagnosis**:
```bash
# Check file permissions
ls -la /path/to/server/executable

# Check directory permissions
ls -ld /path/to/workspace/directory

# Check current user
whoami
id
```

**Solutions**:

1. **Fix file permissions**:
   ```bash
   # Make server executable
   chmod +x /path/to/mcp-server

   # Fix directory permissions
   chmod 755 /workspace/directory

   # Change ownership if needed
   chown $USER:$USER /workspace/directory
   ```

2. **Use accessible directories**:
   ```json
   {
     "mcpServers": {
       "filesystem": {
         "command": "mcp-server-filesystem",
         "args": ["/home/$USER/workspace"]  // Use home directory
       }
     }
   }
   ```

3. **Run with appropriate user**:
   ```bash
   # Don't run as root unless necessary
   sudo -u $USER python your_script.py
   ```

### Server Crash on Startup

**Error**: `ConnectionError: Server process exited with code 1`

**Diagnosis**:
```python
import subprocess
import json

def test_server_manually(config_file):
    with open(config_file) as f:
        config = json.load(f)

    for name, server_config in config["mcpServers"].items():
        print(f"\nTesting server: {name}")
        command = [server_config["command"]] + server_config.get("args", [])

        try:
            result = subprocess.run(
                command,
                capture_output=True,
                text=True,
                timeout=10
            )
            print(f"Return code: {result.returncode}")
            if result.stdout:
                print(f"Stdout: {result.stdout}")
            if result.stderr:
                print(f"Stderr: {result.stderr}")
        except Exception as e:
            print(f"Error: {e}")

# Test all servers
test_server_manually("config.json")
```

**Solutions**:

1. **Check server dependencies**:
   ```bash
   # For Playwright server
   npx playwright install

   # For filesystem server
   pip install --upgrade mcp-server-filesystem
   ```

2. **Validate server arguments**:
   ```json
   {
     "mcpServers": {
       "filesystem": {
         "command": "mcp-server-filesystem",
         "args": [
           "/existing/directory",  // Make sure this exists
           "--readonly=false"      // Valid argument format
         ]
       }
     }
   }
   ```

3. **Check environment variables**:
   ```json
   {
     "mcpServers": {
       "playwright": {
         "command": "npx",
         "args": ["@playwright/mcp@latest"],
         "env": {
           "DISPLAY": ":0",           // Required for GUI apps
           "HOME": "/home/user",      // Sometimes needed
           "PATH": "/usr/local/bin:/usr/bin:/bin"
         }
       }
     }
   }
   ```

## Protocol-Specific Issues

### Stdio Connection Issues

**Problem**: Server starts but communication fails.

**Diagnosis**:
```python
async def test_stdio_communication():
    import subprocess
    import json

    # Start server process
    process = subprocess.Popen(
        ["npx", "@playwright/mcp@latest"],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True
    )

    # Send initialization message
    init_msg = {
        "jsonrpc": "2.0",
        "id": 1,
        "method": "initialize",
        "params": {"capabilities": {}}
    }

    try:
        process.stdin.write(json.dumps(init_msg) + "\n")
        process.stdin.flush()

        # Read response with timeout
        import select
        ready, _, _ = select.select([process.stdout], [], [], 5)

        if ready:
            response = process.stdout.readline()
            print(f"✅ Server responded: {response}")
        else:
            print("❌ No response from server")

    finally:
        process.terminate()

await test_stdio_communication()
```

**Solutions**:
1. Ensure server supports stdio mode
2. Check for buffer flushing issues
3. Verify JSON-RPC message format

### HTTP Connection Issues

**Problem**: Cannot connect to HTTP-based MCP server.

**Diagnosis**:
```python
import aiohttp
import asyncio

async def test_http_server(url="http://localhost:8000"):
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f"{url}/health") as response:
                print(f"✅ HTTP server responding: {response.status}")
                text = await response.text()
                print(f"Response: {text}")
        except Exception as e:
            print(f"❌ HTTP connection failed: {e}")

await test_http_server()
```

**Solutions**:
1. Verify server is listening on correct port
2. Check firewall settings
3. Ensure HTTP server is properly configured

### WebSocket Connection Issues

**Problem**: WebSocket connection fails or drops.

**Diagnosis**:
```python
import websockets
import asyncio

async def test_websocket(uri="ws://localhost:8000/ws"):
    try:
        async with websockets.connect(uri) as websocket:
            print("✅ WebSocket connected")

            # Send ping
            await websocket.send("ping")
            response = await asyncio.wait_for(websocket.recv(), timeout=5)
            print(f"Response: {response}")

    except Exception as e:
        print(f"❌ WebSocket failed: {e}")

await test_websocket()
```

**Solutions**:
1. Check WebSocket server implementation
2. Verify network connectivity
3. Handle connection drops gracefully

## Network and Firewall Issues

### Port Conflicts

**Problem**: Server cannot bind to port.

**Diagnosis**:
```bash
# Check what's using port 8000
lsof -i :8000
netstat -tulpn | grep 8000

# Find available ports
python -c "import socket; s=socket.socket(); s.bind(('',0)); print(s.getsockname()[1]); s.close()"
```

**Solutions**:
1. Use different port in configuration
2. Stop conflicting services
3. Use port range for multiple servers

### Firewall Blocking

**Problem**: Firewall blocking server connections.

**Diagnosis**:
```bash
# Check firewall status
sudo ufw status
sudo iptables -L

# Test connection
telnet localhost 8000
nc -zv localhost 8000
```

**Solutions**:
```bash
# Open port in firewall
sudo ufw allow 8000
sudo iptables -A INPUT -p tcp --dport 8000 -j ACCEPT

# Or disable firewall for testing
sudo ufw disable
```

## Docker and Container Issues

### Container Networking

**Problem**: MCP servers not accessible from container.

**Solutions**:
```dockerfile
# Expose necessary ports
EXPOSE 8000

# Install required dependencies
RUN apt-get update && apt-get install -y nodejs npm

# Set proper networking
CMD ["python", "main.py", "--host", "0.0.0.0"]
```

```yaml
# docker-compose.yml
version: '3.8'
services:
  mcp-use:
    build: .
    ports:
      - "8000:8000"
    network_mode: "host"  # For localhost server access
```

### Volume Mounting

**Problem**: Servers cannot access mounted files.

**Solutions**:
```bash
# Mount with proper permissions
docker run -v /host/workspace:/container/workspace:rw myapp

# Check mounted volume permissions
docker exec -it container ls -la /container/workspace
```

## Advanced Debugging

### Connection Logging

Enable detailed connection logging:

```python
import logging

# Configure logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# Enable specific loggers
logging.getLogger("mcp_use").setLevel(logging.DEBUG)
logging.getLogger("asyncio").setLevel(logging.INFO)

# Create client with debug mode
client = MCPClient.from_config_file("config.json", debug=True)
```

### Network Traffic Analysis

Monitor network traffic for HTTP/WebSocket servers:

```bash
# Monitor network traffic
sudo tcpdump -i lo port 8000 -A

# Monitor with netstat
watch -n 1 'netstat -tulpn | grep 8000'

# Use curl for HTTP testing
curl -v http://localhost:8000/health
```

### Process Monitoring

Monitor server processes:

```python
import psutil
import subprocess

def monitor_server_process(command_name):
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if command_name in proc.info['name'] or \
               any(command_name in arg for arg in proc.info['cmdline']):
                print(f"Found process: PID={proc.info['pid']}")
                print(f"Command: {' '.join(proc.info['cmdline'])}")
                print(f"Status: {proc.status()}")
                print(f"Memory: {proc.memory_info().rss / 1024 / 1024:.1f}MB")
                return proc.info['pid']
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            pass

    print(f"No process found for: {command_name}")
    return None

# Monitor specific server
pid = monitor_server_process("npx")
```

## Recovery Strategies

### Automatic Retry

Implement connection retry logic:

```python
import asyncio
from typing import Optional

class ResilientMCPClient:
    def __init__(self, config_file: str, max_retries: int = 3):
        self.config_file = config_file
        self.max_retries = max_retries
        self._client: Optional[MCPClient] = None

    async def connect_with_retry(self):
        for attempt in range(self.max_retries):
            try:
                self._client = MCPClient.from_config_file(self.config_file)
                await self._client.create_all_sessions()
                print(f"✅ Connected on attempt {attempt + 1}")
                return self._client
            except Exception as e:
                print(f"❌ Attempt {attempt + 1} failed: {e}")
                if attempt < self.max_retries - 1:
                    wait_time = 2 ** attempt  # Exponential backoff
                    print(f"Retrying in {wait_time}s...")
                    await asyncio.sleep(wait_time)
                else:
                    raise

    async def ensure_connected(self):
        if not self._client:
            return await self.connect_with_retry()

        # Test connection
        try:
            # Test if sessions are active
            active_sessions = self._client.get_all_active_sessions()
            if len(active_sessions) > 0:
                return self._client
        except:
            print("Connection lost, reconnecting...")
            return await self.connect_with_retry()

# Usage
resilient_client = ResilientMCPClient("config.json", max_retries=3)
client = await resilient_client.ensure_connected()
```

### Health Checks

Implement server health monitoring:

```python
import asyncio
from datetime import datetime, timedelta

class ServerHealthMonitor:
    def __init__(self, client: MCPClient, check_interval: int = 30):
        self.client = client
        self.check_interval = check_interval
        self.last_check = datetime.now()
        self.is_healthy = True

    async def health_check(self):
        try:
            # Check if we have active sessions
            active_sessions = self.client.get_all_active_sessions()
            self.is_healthy = len(active_sessions) > 0
            self.last_check = datetime.now()
            return self.is_healthy
        except Exception as e:
            print(f"Health check failed: {e}")
            self.is_healthy = False
            return False

    async def start_monitoring(self):
        while True:
            await self.health_check()
            if not self.is_healthy:
                print("⚠️ Server unhealthy, attempting reconnection...")
                try:
                    await self.client.close_all_sessions()
                    await self.client.create_all_sessions()
                    await self.health_check()
                except Exception as e:
                    print(f"Reconnection failed: {e}")

            await asyncio.sleep(self.check_interval)

# Usage
monitor = ServerHealthMonitor(client, check_interval=30)
asyncio.create_task(monitor.start_monitoring())
```

## Getting Help

If connection issues persist:

1. **Collect diagnostic information**:
   ```bash
   # System info
   uname -a
   python --version
   node --version

   # Network info
   ip addr show
   netstat -tulpn

   # Process info
   ps aux | grep mcp
   ```

2. **Create minimal reproduction**:
   ```python
   # Simplest possible test case
   async def minimal_test():
       client = MCPClient.from_dict({
           "mcpServers": {
               "test": {
                   "command": "echo",
                   "args": ["hello"]
               }
           }
       })
       await client.create_all_sessions()

   await minimal_test()
   ```

3. **Report with details**:
   - Operating system and version
   - Python and Node.js versions
   - Complete error messages
   - Server configuration (remove sensitive data)
   - Steps to reproduce

<Tip>
Most connection issues are environment-related. Always test server commands manually before using them with mcp_use.
</Tip>



================================================
FILE: docs/troubleshooting/performance.mdx
================================================
---
title: "Performance Optimization"
description: "Optimize mcp_use performance for production workloads"
icon: "zap"
---

This guide covers performance optimization techniques for mcp_use deployments, from basic tuning to advanced scaling strategies.

## Server Management Optimization

### Enable Server Manager

The most impactful performance optimization is enabling the server manager:

```python
# ❌ Poor performance - all servers start immediately
agent = MCPAgent(llm=llm, client=client, use_server_manager=False)

# ✅ Better performance - servers start only when needed
agent = MCPAgent(llm=llm, client=client, use_server_manager=True)
```

**Benefits**:
- **Lazy loading**: Servers start only when their tools are needed
- **Resource efficiency**: Lower memory and CPU usage
- **Faster startup**: Agent initialization completes quickly

### Limit Concurrent Servers

Control resource usage by limiting concurrent server connections:

```python
agent = MCPAgent(
    llm=llm,
    client=client,
    use_server_manager=True,
    max_concurrent_servers=3,  # Limit to 3 active servers
    server_startup_timeout=30  # Faster timeout for stuck servers
)
```

## Tool Optimization

### Restrict Tool Access

Reduce decision complexity by limiting available tools:

```python
# Method 1: Whitelist specific tools
agent = MCPAgent(
    llm=llm,
    client=client,
    allowed_tools=["file_read", "file_write", "web_search"],
    use_server_manager=True
)

# Method 2: Blacklist problematic tools
agent = MCPAgent(
    llm=llm,
    client=client,
    disallowed_tools=["system_execute", "dangerous_operation"],
    use_server_manager=True
)

# Method 3: Server-level filtering
agent = MCPAgent(
    llm=llm,
    client=client,
    allowed_servers=["filesystem", "playwright"],  # Only these servers
    use_server_manager=True
)
```

### Tool Caching

Implement tool result caching for expensive operations:

```python
from functools import lru_cache
import hashlib

class CachedMCPAgent(MCPAgent):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self._tool_cache = {}

    @lru_cache(maxsize=100)
    def _cache_key(self, tool_name: str, inputs: str) -> str:
        """Generate cache key for tool execution"""
        content = f"{tool_name}:{inputs}"
        return hashlib.md5(content.encode()).hexdigest()

    async def _execute_tool_cached(self, tool_name: str, inputs: dict):
        """Execute tool with caching"""
        cache_key = self._cache_key(tool_name, str(sorted(inputs.items())))

        if cache_key in self._tool_cache:
            return self._tool_cache[cache_key]

        result = await super()._execute_tool(tool_name, inputs)
        self._tool_cache[cache_key] = result
        return result

# Usage
agent = CachedMCPAgent(llm=llm, client=client, use_server_manager=True)
```

## LLM Optimization

### Choose Faster Models

Balance capability with speed:

<Tabs>
  <Tab title="OpenAI">
    ```python
    # Fastest
    llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0.1)

    # Balanced
    llm = ChatOpenAI(model="gpt-4o-mini", temperature=0.1)

    # Most capable (slower)
    llm = ChatOpenAI(model="gpt-4o", temperature=0.1)
    ```
  </Tab>
  <Tab title="Anthropic">
    ```python
    # Fastest
    llm = ChatAnthropic(model="claude-3-haiku-20240307", temperature=0.1)

    # Balanced
    llm = ChatAnthropic(model="claude-3-sonnet-20240229", temperature=0.1)

    # Most capable (slower)
    llm = ChatAnthropic(model="claude-3-opus-20240229", temperature=0.1)
    ```
  </Tab>
  <Tab title="Groq">
    ```python
    # Very fast inference
    llm = ChatGroq(
        model="llama3-8b-8192",  # Smaller, faster
        temperature=0.1,
        max_tokens=1000  # Limit response length
    )

    # Balanced
    llm = ChatGroq(model="llama3-70b-8192", temperature=0.1)
    ```
  </Tab>
</Tabs>

### Optimize LLM Parameters

```python
llm = ChatOpenAI(
    model="gpt-4o-mini",
    temperature=0.1,  # Lower temperature for more focused responses
    max_tokens=500,   # Limit response length
    streaming=True,   # Enable streaming for perceived speed
    request_timeout=30,  # Reasonable timeout
    max_retries=2     # Limit retry attempts
)
```

### Connection Pooling

For high-throughput scenarios, implement connection pooling:

```python
import asyncio
from langchain_openai import ChatOpenAI

class PooledLLM:
    def __init__(self, model="gpt-4o-mini", pool_size=5):
        self.pool = asyncio.Queue(maxsize=pool_size)
        for _ in range(pool_size):
            llm = ChatOpenAI(model=model, temperature=0.1)
            self.pool.put_nowait(llm)

    async def get_llm(self):
        return await self.pool.get()

    async def return_llm(self, llm):
        await self.pool.put(llm)

# Usage
llm_pool = PooledLLM(pool_size=3)

async def create_agent():
    llm = await llm_pool.get_llm()
    try:
        agent = MCPAgent(llm=llm, client=client, use_server_manager=True)
        return agent
    finally:
        await llm_pool.return_llm(llm)
```

## Configuration Optimization

### Server Configuration Tuning

Optimize individual server configurations:

```json
{
  "mcpServers": {
    "playwright": {
      "command": "npx",
      "args": [
        "@playwright/mcp@latest",
        "--headless=true",
        "--timeout=10000"
      ],
      "env": {
        "PLAYWRIGHT_BROWSERS_PATH": "/opt/playwright",
        "PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD": "true"
      }
    },
    "filesystem": {
      "command": "mcp-server-filesystem",
      "args": [
        "/workspace",
        "--readonly=false",
        "--max-file-size=10MB"
      ]
    }
  }
}
```

### Environment Variables

Set performance-related environment variables:

```bash
# Node.js optimization
export NODE_ENV=production
export NODE_OPTIONS="--max-old-space-size=2048"

# Python optimization
export PYTHONOPTIMIZE=2
export PYTHONDONTWRITEBYTECODE=1

# MCP-specific
export MCP_TIMEOUT=30
export MCP_MAX_RETRIES=2
```

## Memory Management

### Monitor Memory Usage

Track memory consumption:

```python
import psutil
import asyncio

class MemoryMonitor:
    def __init__(self, threshold_mb=500):
        self.threshold_mb = threshold_mb
        self.initial_memory = psutil.Process().memory_info().rss / 1024 / 1024

    def check_memory(self):
        current_memory = psutil.Process().memory_info().rss / 1024 / 1024
        memory_used = current_memory - self.initial_memory

        if memory_used > self.threshold_mb:
            print(f"Warning: Memory usage {memory_used:.1f}MB exceeds threshold")

        return memory_used

# Usage
monitor = MemoryMonitor(threshold_mb=300)

async def run_agent_with_monitoring():
    agent = MCPAgent(llm=llm, client=client, use_server_manager=True)

    result = await agent.run("Your query here")
    memory_used = monitor.check_memory()

    return result, memory_used
```

### Garbage Collection

Force garbage collection for long-running processes:

```python
import gc
import asyncio

async def run_multiple_queries(queries):
    agent = MCPAgent(llm=llm, client=client, use_server_manager=True)

    results = []
    for i, query in enumerate(queries):
        result = await agent.run(query)
        results.append(result)

        # Garbage collect every 10 queries
        if i % 10 == 0:
            gc.collect()

    return results
```

## Async Optimization

### Concurrent Processing

Process multiple queries concurrently:

```python
async def process_queries_concurrently(queries, max_concurrent=3):
    semaphore = asyncio.Semaphore(max_concurrent)

    async def process_single_query(query):
        async with semaphore:
            agent = MCPAgent(llm=llm, client=client, use_server_manager=True)
            return await agent.run(query)

    tasks = [process_single_query(query) for query in queries]
    results = await asyncio.gather(*tasks, return_exceptions=True)

    return results

# Usage
queries = ["Query 1", "Query 2", "Query 3", "Query 4", "Query 5"]
results = await process_queries_concurrently(queries, max_concurrent=2)
```

### Connection Reuse

Reuse MCP client connections:

```python
class AgentPool:
    def __init__(self, pool_size=3):
        self.pool_size = pool_size
        self.clients = []
        self.available_clients = asyncio.Queue()

    async def initialize(self):
        for _ in range(self.pool_size):
            client = MCPClient.from_config_file("config.json")
            await client.create_all_sessions()  # Pre-create sessions
            self.clients.append(client)
            await self.available_clients.put(client)

    async def get_agent(self):
        client = await self.available_clients.get()
        llm = ChatOpenAI(model="gpt-4o-mini", temperature=0.1)
        return MCPAgent(llm=llm, client=client, use_server_manager=True)

    async def return_client(self, agent):
        await self.available_clients.put(agent.client)

# Usage
pool = AgentPool(pool_size=3)
await pool.initialize()

agent = await pool.get_agent()
result = await agent.run("Your query")
await pool.return_client(agent)
```

## Production Deployment

### Docker Optimization

Optimize Docker configuration:

```dockerfile
FROM python:3.9-slim

# Install Node.js for MCP servers
RUN apt-get update && apt-get install -y \
    nodejs npm \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Pre-install common MCP servers
RUN npm install -g @playwright/mcp playwright

# Copy application
COPY . .

# Set performance environment variables
ENV NODE_ENV=production
ENV PYTHONOPTIMIZE=2
ENV PYTHONDONTWRITEBYTECODE=1

# Run with limited resources
CMD ["python", "-O", "main.py"]
```

### Kubernetes Scaling

Configure horizontal pod autoscaling:

```yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mcp-use-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mcp-use-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
```

## Monitoring and Profiling

### Performance Metrics

Track key performance indicators:

```python
import time
from dataclasses import dataclass
from typing import List

@dataclass
class PerformanceMetrics:
    query_time: float
    server_startup_time: float
    tool_execution_time: float
    memory_usage_mb: float
    tools_used: List[str]

class PerformanceTracker:
    def __init__(self):
        self.metrics = []

    async def track_agent_run(self, agent, query):
        start_time = time.time()
        initial_memory = psutil.Process().memory_info().rss / 1024 / 1024

        # Track server startup time
        server_start = time.time()
        if hasattr(agent, 'client'):
            await agent.client.ensure_connected()
        server_startup_time = time.time() - server_start

        # Run query
        result = await agent.run(query)

        # Calculate metrics
        total_time = time.time() - start_time
        final_memory = psutil.Process().memory_info().rss / 1024 / 1024

        metrics = PerformanceMetrics(
            query_time=total_time,
            server_startup_time=server_startup_time,
            tool_execution_time=total_time - server_startup_time,
            memory_usage_mb=final_memory - initial_memory,
            tools_used=getattr(agent, '_tools_used', [])
        )

        self.metrics.append(metrics)
        return result, metrics

    def get_average_metrics(self):
        if not self.metrics:
            return None

        return {
            'avg_query_time': sum(m.query_time for m in self.metrics) / len(self.metrics),
            'avg_memory_usage': sum(m.memory_usage_mb for m in self.metrics) / len(self.metrics),
            'avg_tools_per_query': sum(len(m.tools_used) for m in self.metrics) / len(self.metrics)
        }

# Usage
tracker = PerformanceTracker()
result, metrics = await tracker.track_agent_run(agent, "Your query")
print(f"Query completed in {metrics.query_time:.2f}s using {metrics.memory_usage_mb:.1f}MB")
```

## Troubleshooting Performance Issues

### Common Performance Problems

<AccordionGroup>
  <Accordion title="Slow agent startup">
    **Causes**: All servers starting simultaneously, large server dependencies

    **Solutions**:
    - Enable server manager: `use_server_manager=True`
    - Pre-install server dependencies
    - Use lighter server alternatives
  </Accordion>

  <Accordion title="High memory usage">
    **Causes**: Multiple large servers, memory leaks, large tool outputs

    **Solutions**:
    - Limit concurrent servers: `max_concurrent_servers=3`
    - Implement garbage collection
    - Restrict tool output size
  </Accordion>

  <Accordion title="Tool execution timeouts">
    **Causes**: Slow servers, network issues, large operations

    **Solutions**:
    - Increase timeouts: `timeout=60`
    - Optimize server configurations
    - Break large operations into smaller chunks
  </Accordion>
</AccordionGroup>

## Next Steps

<CardGroup cols={3}>
  <Card title="Common Issues" icon="circle-help" href="/troubleshooting/common-issues">
    Troubleshoot specific problems and error messages
  </Card>
  <Card title="Security Guide" icon="shield" href="/advanced/security">
    Implement secure, production-ready configurations
  </Card>
  <Card title="Multi-Server Setup" icon="server" href="/advanced/multi-server-setup">
    Optimize complex multi-server deployments
  </Card>
</CardGroup>

<Tip>
Start with enabling the server manager and restricting tools - these two changes alone can improve performance by 50-80% in most cases.
</Tip>



================================================
FILE: examples/airbnb_mcp.json
================================================
{
  "mcpServers": {
      "airbnb": {
          "command": "npx",
          "args": ["-y", "@openbnb/mcp-server-airbnb", "--ignore-robots-txt"]
      }
  }
}



================================================
FILE: examples/airbnb_use.py
================================================
"""
Example demonstrating how to use mcp_use with Airbnb.

This example shows how to connect an LLM to Airbnb through MCP tools
to perform tasks like searching for accommodations.

Special Thanks to https://github.com/openbnb-org/mcp-server-airbnb for the server.
"""

import asyncio
import os

from dotenv import load_dotenv
from langchain_anthropic import ChatAnthropic

from mcp_use import MCPAgent, MCPClient


async def run_airbnb_example():
    """Run an example using Airbnb MCP server."""
    # Load environment variables
    load_dotenv()

    # Create MCPClient with Airbnb configuration
    client = MCPClient.from_config_file(os.path.join(os.path.dirname(__file__), "airbnb_mcp.json"))
    # Create LLM - you can choose between different models
    llm = ChatAnthropic(model="claude-3-5-sonnet-20240620")
    # Alternative models:
    # llm = init_chat_model(model="llama-3.1-8b-instant", model_provider="groq")
    # llm = ChatOpenAI(model="gpt-4o")

    # Create agent with the client
    agent = MCPAgent(llm=llm, client=client, max_steps=30, use_server_manager=True)

    # Run a query to search for accommodations
    result = await agent.run(
        "Find me a nice place to stay in Barcelona for 2 adults "
        "for a week in August. I prefer places with a pool and "
        "good reviews. Show me the top 3 options.",
        max_steps=30,
    )
    print(f"\nResult: {result}")


if __name__ == "__main__":
    asyncio.run(run_airbnb_example())



================================================
FILE: examples/blender_use.py
================================================
"""
Blender MCP example for mcp_use.

This example demonstrates how to use the mcp_use library with MCPClient
to connect an LLM to Blender through MCP tools via WebSocket.
The example assumes you have installed the Blender MCP addon from:
https://github.com/ahujasid/blender-mcp

Make sure the addon is enabled in Blender preferences and the WebSocket
server is running before executing this script.

Special thanks to https://github.com/ahujasid/blender-mcp for the server.
"""

import asyncio

from dotenv import load_dotenv
from langchain_anthropic import ChatAnthropic

from mcp_use import MCPAgent, MCPClient


async def run_blender_example():
    """Run the Blender MCP example."""
    # Load environment variables
    load_dotenv()

    # Create MCPClient with Blender MCP configuration
    config = {"mcpServers": {"blender": {"command": "uvx", "args": ["blender-mcp"]}}}
    client = MCPClient.from_dict(config)

    # Create LLM
    llm = ChatAnthropic(model="claude-3-5-sonnet-20240620")

    # Create agent with the client
    agent = MCPAgent(llm=llm, client=client, max_steps=30)

    try:
        # Run the query
        result = await agent.run(
            "Create an inflatable cube with soft material and a plane as ground.",
            max_steps=30,
        )
        print(f"\nResult: {result}")
    finally:
        # Ensure we clean up resources properly
        if client.sessions:
            await client.close_all_sessions()


if __name__ == "__main__":
    # Run the Blender example
    asyncio.run(run_blender_example())



================================================
FILE: examples/browser_use.py
================================================
"""
Basic usage example for mcp_use.

This example demonstrates how to use the mcp_use library with MCPClient
to connect any LLM to MCP tools through a unified interface.

Special thanks to https://github.com/microsoft/playwright-mcp for the server.
"""

import asyncio

from dotenv import load_dotenv
from langchain_openai import ChatOpenAI

from mcp_use import MCPAgent, MCPClient


async def main():
    """Run the example using a configuration file."""
    # Load environment variables
    load_dotenv()

    config = {
        "mcpServers": {"playwright": {"command": "npx", "args": ["@playwright/mcp@latest"], "env": {"DISPLAY": ":1"}}}
    }
    # Create MCPClient from config file
    client = MCPClient(config=config)

    # Create LLM
    llm = ChatOpenAI(model="gpt-4o")

    # Create agent with the client
    agent = MCPAgent(llm=llm, client=client, max_steps=30)

    # Run the query
    result = await agent.run(
        """
        Navigate to https://github.com/mcp-use/mcp-use, give a star to the project and write
        a summary of the project.
        """,
        max_steps=30,
    )
    print(f"\nResult: {result}")


if __name__ == "__main__":
    # Run the appropriate example
    asyncio.run(main())



================================================
FILE: examples/chat_example.py
================================================
"""
Simple chat example using MCPAgent with built-in conversation memory.

This example demonstrates how to use the MCPAgent with its built-in
conversation history capabilities for better contextual interactions.

Special thanks to https://github.com/microsoft/playwright-mcp for the server.
"""

import asyncio

from dotenv import load_dotenv
from langchain_openai import ChatOpenAI

from mcp_use import MCPAgent, MCPClient


async def run_memory_chat():
    """Run a chat using MCPAgent's built-in conversation memory."""
    # Load environment variables for API keys
    load_dotenv()

    # Config file path - change this to your config file
    config_file = "examples/browser_mcp.json"

    print("Initializing chat...")

    # Create MCP client and agent with memory enabled
    client = MCPClient.from_config_file(config_file)
    llm = ChatOpenAI(model="gpt-4o-mini")

    # Create agent with memory_enabled=True
    agent = MCPAgent(
        llm=llm,
        client=client,
        max_steps=15,
        memory_enabled=True,  # Enable built-in conversation memory
    )

    print("\n===== Interactive MCP Chat =====")
    print("Type 'exit' or 'quit' to end the conversation")
    print("Type 'clear' to clear conversation history")
    print("==================================\n")

    try:
        # Main chat loop
        while True:
            # Get user input
            user_input = input("\nYou: ")

            # Check for exit command
            if user_input.lower() in ["exit", "quit"]:
                print("Ending conversation...")
                break

            # Check for clear history command
            if user_input.lower() == "clear":
                agent.clear_conversation_history()
                print("Conversation history cleared.")
                continue

            # Get response from agent
            print("\nAssistant: ", end="", flush=True)

            try:
                # Run the agent with the user input (memory handling is automatic)
                response = await agent.run(user_input)
                print(response)

            except Exception as e:
                print(f"\nError: {e}")

    finally:
        # Clean up
        if client and client.sessions:
            await client.close_all_sessions()


if __name__ == "__main__":
    asyncio.run(run_memory_chat())



================================================
FILE: examples/direct_tool_call.py
================================================
"""
Direct tool calling example using MCPClient.

Notes:
- This demonstrates calling tools directly without an LLM/agent.
- This approach will not work for tools that require sampling.
"""

import asyncio

from mcp_use import MCPClient

config = {
    "mcpServers": {
        "everything": {
            "command": "npx",
            "args": ["-y", "@modelcontextprotocol/server-everything"],
        }
    }
}


async def call_tool_example() -> None:
    client = MCPClient.from_dict(config)

    try:
        # Create and initialize sessions for configured servers
        await client.create_all_sessions()

        # Retrieve the session for the "everything" server (match the server name key in the config)
        session = client.get_session("everything")

        # List available tools
        tools = await session.list_tools()
        tool_names = [t.name for t in tools]
        print(f"Available tools: {tool_names}")

        # Choose a tool to call (note: do not call sampling tools because they require an LLM to complete)
        # In the example, we call the "add" tool from the "everything" server
        # Result is a CallToolResult object
        # - content is a list of ContentBlock objects
        # - structuredContent is a dictionary of the structured result of the tool call (only for non-sampling tools)
        # - isError is a boolean indicating if the tool call was successful
        result_tool_add = await session.call_tool(name="add", arguments={"a": 1, "b": 2})

        # Handle and print the result
        if getattr(result_tool_add, "isError", False):
            print(f"Error: {result_tool_add.content}")
        else:
            print(f"Tool result: {result_tool_add.content}")
            print(f"Text result: {result_tool_add.content[0].text}")

    finally:
        # Ensure we clean up resources properly
        await client.close_all_sessions()


if __name__ == "__main__":
    asyncio.run(call_tool_example())



================================================
FILE: examples/filesystem_use.py
================================================
"""
Basic usage example for mcp_use.

This example demonstrates how to use the mcp_use library with MCPClient
to connect any LLM to MCP tools through a unified interface.

Special Thanks to https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem
for the server.
"""

import asyncio

from dotenv import load_dotenv
from langchain_openai import ChatOpenAI

from mcp_use import MCPAgent, MCPClient

config = {
    "mcpServers": {
        "filesystem": {
            "command": "npx",
            "args": [
                "-y",
                "@modelcontextprotocol/server-filesystem",
                "THE_PATH_TO_YOUR_DIRECTORY",
            ],
        }
    }
}


async def main():
    """Run the example using a configuration file."""
    # Load environment variables
    load_dotenv()

    # Create MCPClient from config file
    client = MCPClient.from_dict(config)
    # Create LLM
    llm = ChatOpenAI(model="gpt-4o")
    # llm = init_chat_model(model="llama-3.1-8b-instant", model_provider="groq")
    # llm = ChatAnthropic(model="claude-3-")
    # llm = ChatGroq(model="llama3-8b-8192")

    # Create agent with the client
    agent = MCPAgent(llm=llm, client=client, max_steps=30)

    # Run the query
    result = await agent.run(
        "Hello can you give me a list of files and directories in the current directory",
        max_steps=30,
    )
    print(f"\nResult: {result}")


if __name__ == "__main__":
    # Run the appropriate example
    asyncio.run(main())



================================================
FILE: examples/http_example.py
================================================
"""
HTTP Example for mcp_use.

This example demonstrates how to use the mcp_use library with MCPClient
to connect to an MCP server running on a specific HTTP port.

Before running this example, you need to start the Playwright MCP server
in another terminal with:

    npx @playwright/mcp@latest --port 8931

This will start the server on port 8931. Resulting in the config you find below.
Of course you can run this with any server you want at any URL.

Special thanks to https://github.com/microsoft/playwright-mcp for the server.

"""

import asyncio

from dotenv import load_dotenv
from langchain_openai import ChatOpenAI

from mcp_use import MCPAgent, MCPClient


async def main():
    """Run the example using a configuration file."""
    # Load environment variables
    load_dotenv()

    config = {"mcpServers": {"http": {"url": "http://localhost:8931/sse"}}}

    # Create MCPClient from config file
    client = MCPClient.from_dict(config)

    # Create LLM
    llm = ChatOpenAI(model="gpt-4o")

    # Create agent with the client
    agent = MCPAgent(llm=llm, client=client, max_steps=30)

    # Run the query
    result = await agent.run(
        "Find the best restaurant in San Francisco USING GOOGLE SEARCH",
        max_steps=30,
    )
    print(f"\nResult: {result}")


if __name__ == "__main__":
    # Run the appropriate example
    asyncio.run(main())



================================================
FILE: examples/mcp_everything.py
================================================
"""
This example shows how to test the different functionalities of MCPs using the MCP server from
anthropic.
"""

import asyncio

from dotenv import load_dotenv
from langchain_openai import ChatOpenAI

from mcp_use import MCPAgent, MCPClient

everything_server = {
    "mcpServers": {"everything": {"command": "npx", "args": ["-y", "@modelcontextprotocol/server-everything"]}}
}


async def main():
    """Run the example using a configuration file."""
    load_dotenv()
    client = MCPClient(config=everything_server)
    llm = ChatOpenAI(model="gpt-4o", temperature=0)
    agent = MCPAgent(llm=llm, client=client, max_steps=30)

    result = await agent.run(
        """
        Hello, you are a tester can you please answer the following questions:
        - Which resources do you have access to?
        - Which prompts do you have access to?
        - Which tools do you have access to?
        """,
        max_steps=30,
    )
    print(f"\nResult: {result}")


if __name__ == "__main__":
    # Run the appropriate example
    asyncio.run(main())



================================================
FILE: examples/multi_server_example.py
================================================
"""
Example demonstrating how to use MCPClient with multiple servers.

This example shows how to:
1. Configure multiple MCP servers
2. Create and manage sessions for each server
3. Use tools from different servers in a single agent
"""

import asyncio

from dotenv import load_dotenv
from langchain_anthropic import ChatAnthropic

from mcp_use import MCPAgent, MCPClient


async def run_multi_server_example():
    """Run an example using multiple MCP servers."""
    # Load environment variables
    load_dotenv()

    # Create a configuration with multiple servers
    config = {
        "mcpServers": {
            "airbnb": {
                "command": "npx",
                "args": ["-y", "@openbnb/mcp-server-airbnb", "--ignore-robots-txt"],
            },
            "playwright": {
                "command": "npx",
                "args": ["@playwright/mcp@latest"],
                "env": {"DISPLAY": ":1"},
            },
            "filesystem": {
                "command": "npx",
                "args": [
                    "-y",
                    "@modelcontextprotocol/server-filesystem",
                    "YOUR_DIRECTORY_HERE",
                ],
            },
        }
    }

    # Create MCPClient with the multi-server configuration
    client = MCPClient.from_dict(config)

    # Create LLM
    llm = ChatAnthropic(model="claude-3-5-sonnet-20240620")

    # Create agent with the client
    agent = MCPAgent(llm=llm, client=client, max_steps=30)

    # Example 1: Using tools from different servers in a single query
    result = await agent.run(
        "Search for a nice place to stay in Barcelona on Airbnb, "
        "then use Google to find nearby restaurants and attractions."
        "Write the result in the current directory in restaurant.txt",
        max_steps=30,
    )
    print(result)


if __name__ == "__main__":
    asyncio.run(run_multi_server_example())



================================================
FILE: examples/sandbox_everything.py
================================================
"""
This example shows how to test the different functionalities of MCPs using the MCP server from
OpenAI in a sandboxed environment using E2B.
"""

import asyncio
import os

from dotenv import load_dotenv
from langchain_openai import ChatOpenAI

import mcp_use
from mcp_use import MCPAgent, MCPClient
from mcp_use.types.sandbox import SandboxOptions

mcp_use.set_debug(debug=1)

# Server configuration (MCP standard compliant)
sandboxed_server = {
    "mcpServers": {
        "everything": {
            "command": "npx",
            "args": ["-y", "@modelcontextprotocol/server-everything"],
        }
    }
}


async def main():
    """Run the example using a sandboxed environment."""
    # Load environment variables (needs E2B_API_KEY)
    load_dotenv()

    # Ensure E2B API key is available
    if not os.getenv("E2B_API_KEY"):
        raise ValueError("E2B_API_KEY environment variable is required")

    # E2B sandbox options
    sandbox_options: SandboxOptions = {
        "api_key": os.getenv("E2B_API_KEY"),  # E2B API key to create the sandbox
        "sandbox_template_id": "code-interpreter-v1",  # Use code interpreter template
    }

    # Create client with sandboxed mode enabled and sandbox options
    client = MCPClient(config=sandboxed_server, sandbox=True, sandbox_options=sandbox_options)

    # Create LLM and agent
    llm = ChatOpenAI(model="gpt-4o-mini", temperature=0)
    agent = MCPAgent(llm=llm, client=client, max_steps=30)

    try:
        # Run the same test query
        result = await agent.run(
            """
            Run echo "test" and then echo "second test" again and then add 1 + 1
            """,
            max_steps=30,
        )
        print(f"\nResult: {result}")
    finally:
        # Ensure we clean up resources properly
        await client.close_all_sessions()


if __name__ == "__main__":
    asyncio.run(main())



================================================
FILE: examples/simple_server_manager_use.py
================================================
import asyncio
import sys
from pathlib import Path

from langchain_core.tools import BaseTool
from langchain_openai import ChatOpenAI
from pydantic import BaseModel

from mcp_use.agents.mcpagent import MCPAgent

# Add the project root to the Python path
sys.path.insert(0, str(Path(__file__).resolve().parents[1]))
from mcp_use.managers.base import BaseServerManager


class DynamicTool(BaseTool):
    """A tool that is created dynamically."""

    name: str
    description: str
    args_schema: type[BaseModel] | None = None

    def _run(self) -> str:
        return f"Hello from {self.name}!"

    async def _arun(self) -> str:
        return f"Hello from {self.name}!"


class HelloWorldTool(BaseTool):
    """A simple tool that returns a greeting and adds a new tool."""

    name: str = "hello_world"
    description: str = "Returns the string 'Hello, World!' and adds a new dynamic tool."
    args_schema: type[BaseModel] | None = None
    server_manager: "SimpleServerManager"

    def _run(self) -> str:
        new_tool = DynamicTool(
            name=f"dynamic_tool_{len(self.server_manager.tools)}", description="A dynamically created tool."
        )
        self.server_manager.add_tool(new_tool)
        return "Hello, World! I've added a new tool. You can use it now."

    async def _arun(self) -> str:
        new_tool = DynamicTool(
            name=f"dynamic_tool_{len(self.server_manager.tools)}", description="A dynamically created tool."
        )
        self.server_manager.add_tool(new_tool)
        return "Hello, World! I've added a new tool. You can use it now."


class SimpleServerManager(BaseServerManager):
    """A simple server manager that provides a HelloWorldTool."""

    def __init__(self):
        self._tools: list[BaseTool] = []
        self._initialized = False
        # Pass a reference to the server manager to the tool
        self._tools.append(HelloWorldTool(server_manager=self))

    def add_tool(self, tool: BaseTool):
        self._tools.append(tool)

    async def initialize(self) -> None:
        self._initialized = True

    @property
    def tools(self) -> list[BaseTool]:
        return self._tools

    def has_tool_changes(self, current_tool_names: set[str]) -> bool:
        new_tool_names = {tool.name for tool in self.tools}
        return new_tool_names != current_tool_names


async def main():
    # Initialize the LLM
    llm = ChatOpenAI(model="gpt-4o")

    # Instantiate the custom server manager
    simple_server_manager = SimpleServerManager()

    # Create an MCPAgent with the custom server manager
    agent = MCPAgent(
        llm=llm,
        use_server_manager=True,
        server_manager=simple_server_manager,
    )

    # Manually initialize the agent
    await agent.initialize()

    # Run the agent with a query that uses the custom tool
    print("--- First run: calling hello_world ---")
    result = await agent.run("Use the hello_world tool", manage_connector=False)
    print(result)

    # Clear the conversation history to avoid confusion
    agent.clear_conversation_history()

    # Run the agent again to show that the new tool is available
    print("\n--- Second run: calling the new dynamic tool ---")
    result = await agent.run("Use the dynamic_tool_1", manage_connector=False)
    print(result)

    # Manually close the agent
    await agent.close()


if __name__ == "__main__":
    asyncio.run(main())



================================================
FILE: examples/stream_example.py
================================================
"""
Basic usage example for streaming with mcp_use.

This example demonstrates how to use the mcp_use library with MCPClient
to connect any LLM to MCP tools through a unified interface.

Special thanks to https://github.com/microsoft/playwright-mcp for the server.
"""

import asyncio

from dotenv import load_dotenv
from langchain_openai import ChatOpenAI

from mcp_use import MCPAgent, MCPClient


async def main():
    """Run the example using a configuration file."""
    # Load environment variables
    load_dotenv()

    config = {
        "mcpServers": {"playwright": {"command": "npx", "args": ["@playwright/mcp@latest"], "env": {"DISPLAY": ":1"}}}
    }
    # Create MCPClient from config file
    client = MCPClient(config=config)
    # Create LLM
    llm = ChatOpenAI(model="gpt-4o")
    # Create agent with the client
    agent = MCPAgent(llm=llm, client=client, max_steps=30)
    # Run the query
    async for step in agent.stream(
        """
        Navigate to https://github.com/mcp-use/mcp-use, give a star to the project and write
        a summary of the project.
        """,
        max_steps=30,
    ):
        if isinstance(step, str):
            print("Result:", step)
        else:
            action, observation = step
            print("Observation:", observation[:20])
            print("Calling:", action.tool)
            print("Input:", action.tool_input)


if __name__ == "__main__":
    # Run the appropriate example
    asyncio.run(main())



================================================
FILE: examples/structured_output.py
================================================
"""
Structured Output Example - City Research with Playwright

This example demonstrates intelligent structured output by researching Padova, Italy.
"""

import asyncio

from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from pydantic import BaseModel, Field

from mcp_use import MCPAgent, MCPClient


class CityInfo(BaseModel):
    """Comprehensive information about a city"""

    name: str = Field(description="Official name of the city")
    country: str = Field(description="Country where the city is located")
    region: str = Field(description="Region or state within the country")
    population: int = Field(description="Current population count")
    area_km2: float = Field(description="Area in square kilometers")
    foundation_date: str = Field(description="When the city was founded (approximate year or period)")
    mayor: str = Field(description="Current mayor or city leader")
    famous_landmarks: list[str] = Field(description="List of famous landmarks, monuments, or attractions")
    universities: list[str] = Field(description="List of major universities or educational institutions")
    economy_sectors: list[str] = Field(description="Main economic sectors or industries")
    sister_cities: list[str] = Field(description="Twin cities or sister cities partnerships")
    historical_significance: str = Field(description="Brief description of historical importance")
    climate_type: str | None = Field(description="Type of climate (e.g., Mediterranean, Continental)", default=None)
    elevation_meters: int | None = Field(description="Elevation above sea level in meters", default=None)


async def main():
    """Research Padova using intelligent structured output."""
    load_dotenv()

    config = {
        "mcpServers": {"playwright": {"command": "npx", "args": ["@playwright/mcp@latest"], "env": {"DISPLAY": ":1"}}}
    }

    client = MCPClient(config=config)
    llm = ChatOpenAI(model="gpt-4o")
    agent = MCPAgent(llm=llm, client=client, max_steps=50)

    result: CityInfo = await agent.run(
        """
        Research comprehensive information about the city of Padova (also known as Padua) in Italy.

        Visit multiple reliable sources like Wikipedia, official city websites, tourism sites,
        and university websites to gather detailed information including demographics, history,
        governance, education, economy, landmarks, and international relationships.
        """,
        output_schema=CityInfo,
        max_steps=50,
    )

    print(f"Name: {result.name}")
    print(f"Country: {result.country}")
    print(f"Region: {result.region}")
    print(f"Population: {result.population:,}")
    print(f"Area: {result.area_km2} km²")
    print(f"Foundation: {result.foundation_date}")
    print(f"Mayor: {result.mayor}")
    print(f"Universities: {', '.join(result.universities)}")
    print(f"Economy: {', '.join(result.economy_sectors)}")
    print(f"Landmarks: {', '.join(result.famous_landmarks)}")
    print(f"Sister Cities: {', '.join(result.sister_cities) if result.sister_cities else 'None'}")
    print(f"Historical Significance: {result.historical_significance}")
    if result.climate_type:
        print(f"Climate: {result.climate_type}")
    if result.elevation_meters:
        print(f"Elevation: {result.elevation_meters} meters")


if __name__ == "__main__":
    asyncio.run(main())



================================================
FILE: mcp_use/__init__.py
================================================
"""
mcp_use - An MCP library for LLMs.

This library provides a unified interface for connecting different LLMs
to MCP tools through existing LangChain adapters.
"""

from importlib.metadata import version

# Import logging FIRST to ensure it's configured before other modules
# This MUST happen before importing observability to ensure loggers are configured
from .logging import MCP_USE_DEBUG, Logger, logger  # isort: skip

# Now import other modules - observability must come after logging
from . import observability  # noqa: E402
from .agents.mcpagent import MCPAgent
from .client import MCPClient
from .config import load_config_file
from .connectors import BaseConnector, HttpConnector, StdioConnector, WebSocketConnector
from .session import MCPSession

__version__ = version("mcp-use")

__all__ = [
    "MCPAgent",
    "MCPClient",
    "MCPSession",
    "BaseConnector",
    "StdioConnector",
    "WebSocketConnector",
    "HttpConnector",
    "load_config_file",
    "logger",
    "MCP_USE_DEBUG",
    "Logger",
    "set_debug",
    "observability",
]


# Helper function to set debug mode
def set_debug(debug=2):
    """Set the debug mode for mcp_use.

    Args:
        debug: Whether to enable debug mode (default: True)
    """
    Logger.set_debug(debug)



================================================
FILE: mcp_use/cli.py
================================================
#!/usr/bin/env python
"""
MCP-Use CLI Tool - All-in-one CLI for creating and deploying MCP projects.
"""

import argparse
import sys
import threading
import time
from pathlib import Path

from mcp_use import __version__

# ============= SPINNER CLASS =============


class Spinner:
    """Simple loading spinner similar to UV's style."""

    def __init__(self, message: str = "Loading"):
        self.message = message
        self.running = False
        self.thread = None
        self.frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        self.current = 0

    def start(self):
        """Start the spinner."""
        self.running = True
        self.thread = threading.Thread(target=self._spin)
        self.thread.daemon = True
        self.thread.start()

    def _spin(self):
        """Spin animation loop."""
        while self.running:
            frame = self.frames[self.current % len(self.frames)]
            print(f"\r{frame} {self.message}...", end="", flush=True)
            self.current += 1
            time.sleep(0.1)

    def stop(self, success_message=None):
        """Stop the spinner and optionally print success message."""
        self.running = False
        if self.thread:
            self.thread.join()
        if success_message:
            print(f"\r✓ {success_message}        ")
        else:
            print("\r" + " " * (len(self.message) + 10), end="\r")


# ============= PROJECT CREATION FUNCTIONS =============


def print_header():
    """Print the CLI header."""
    print("\n mcp-use create")
    print("━" * 50)
    print()


def get_project_name() -> str:
    """Get project name from user."""
    while True:
        name = input("📝 Project name: ").strip().replace("-", "_")
        if not name:
            print("   ⚠️  Project name cannot be empty")
            continue
        if " " in name:
            print("   ⚠️  Project name cannot contain spaces")
            continue
        if Path(name).exists():
            print(f"   ⚠️  Directory '{name}' already exists")
            continue
        return name


def get_project_type() -> str:
    """Get project type from user."""
    print("\n📦 What would you like to create?")
    print("   1) Server + Agent")
    print("   2) Server only")
    print("   3) Agent only")

    while True:
        choice = input("\n   Choice (1-3): ").strip()
        if choice == "1":
            return "server_agent"
        elif choice == "2":
            return "server"
        elif choice == "3":
            return "agent"
        else:
            print("   ⚠️  Please enter 1, 2, or 3")


def create_server_structure(project_dir: Path, project_name: str):
    """Create server file in nested project folder."""
    # Create nested project folder
    nested_dir = project_dir / project_name
    nested_dir.mkdir(parents=True)

    # Create server.py
    server_content = f'''"""
MCP Server for {project_name}
"""

from mcp.server import FastMCP

# Create server instance
server = FastMCP("{project_name}-server")


# ============= TOOLS =============


@server.tool()
async def add_numbers(a: float, b: float) -> str:
    """Add two numbers together."""
    result = a + b
    return f"{{result}}"


# ============= RESOURCES =============


@server.resource("config://app")
async def get_app_config() -> str:
    """Get the application configuration."""
    return "App: {project_name}, Version: 0.1.0, Status: Active"


# ============= PROMPTS =============


@server.prompt()
async def assistant_prompt() -> str:
    """Generate a helpful assistant prompt."""
    return "You are a helpful assistant for {project_name}. Be concise and friendly."


# ============= MAIN =============

if __name__ == "__main__":
    server.run("stdio")
'''
    (nested_dir / "server.py").write_text(server_content)


def create_agent_structure(project_dir: Path, project_name: str, project_type: str):
    """Create agent file in nested project folder."""
    # Create nested project folder if it doesn't exist
    nested_dir = project_dir / project_name
    if not nested_dir.exists():
        nested_dir.mkdir(parents=True)

    if project_type == "server_agent":
        # For server_agent mode, embed config directly in agent.py
        agent_content = f'''"""
MCP Agent implementation for {project_name}
"""

from langchain_openai import ChatOpenAI

from mcp_use import MCPAgent, MCPClient

config = {{
    "mcpServers": {{
        "{project_name}": {{
            "command": "python",
            "args": ["{project_name}/server.py"],
        }}
    }}
}}

client = MCPClient(config=config)
agent = MCPAgent(llm=ChatOpenAI(model="gpt-4o"), client=client, max_steps=10, memory_enabled=True)
'''
    else:
        # For agent-only mode, use external JSON config file
        agent_content = f'''"""
MCP Agent implementation for {project_name}
"""

from langchain_openai import ChatOpenAI

from mcp_use import MCPAgent, MCPClient

client = MCPClient.from_config_file("{project_name}/mcp_servers.json")
agent = MCPAgent(llm=ChatOpenAI(model="gpt-4o"), client=client, max_steps=10, memory_enabled=True)
'''
        # Create mcp_servers.json for agent-only mode
        mcp_servers_json = (
            '''{
    "mcpServers": {
        "'''
            + project_name
            + """": {
            "command": "npx",
            "args": ["-y", "@modelcontextprotocol/server-everything"]
        }
    }
}"""
        )
        (nested_dir / "mcp_servers.json").write_text(mcp_servers_json)

    (nested_dir / "agent.py").write_text(agent_content)


def create_common_files(project_dir: Path, project_name: str, project_type: str):
    """Create common project files."""

    # pyproject.toml
    pyproject = f"""[project]
name = "{project_name}"
version = "0.1.0"
description = "An MCP project"
requires-python = ">=3.10"
dependencies = [
    "mcp>=1.0.0",
    "mcp-use>=0.1.0",
    "langchain-openai>=0.1.0",
    "python-dotenv>=1.0.0",
]
"""
    (project_dir / "pyproject.toml").write_text(pyproject)

    # requirements.txt
    requirements = """mcp>=1.0.0
mcp-use>=0.1.0
langchain-openai>=0.1.0
python-dotenv>=1.0.0
"""
    (project_dir / "requirements.txt").write_text(requirements)

    # .gitignore
    gitignore = """__pycache__/
*.py[cod]
.env
venv/
.venv/
*.egg-info/
dist/
build/
.pytest_cache/
.coverage
"""
    (project_dir / ".gitignore").write_text(gitignore)

    # README.md
    readme = f"""# {project_name}

An MCP project created with mcp-use.

## Project Structure

```
{project_name}/
"""

    if project_type in ["server_agent", "server"]:
        readme += f"""├── {project_name}/
│   ├── server.py    # MCP server with all components
"""

    if project_type in ["server_agent", "agent"]:
        if project_type == "agent":
            readme += f"""├── {project_name}/
│   ├── agent.py     # MCP agent implementation
│   └── mcp_servers.json  # Server configuration
"""
        else:
            readme += """│   └── agent.py     # MCP agent implementation
"""

    if project_type in ["server_agent", "agent"]:
        readme += """├── run.py           # Simple example
├── chat.py          # Interactive chat
"""

    readme += """├── pyproject.toml
├── requirements.txt
├── .gitignore
└── README.md
```

## Setup

1. Install dependencies:
```bash
   pip install -r requirements.txt
```

2. Configure environment:
```bash
   export OPENAI_API_KEY=your-api-key-here
```
"""

    if project_type in ["server_agent", "server"]:
        readme += f"""
## Running the Server

```bash
python {project_name}/server.py
```

The server uses FastMCP and includes:
- **Tools**: Simple tool functions (e.g., add_numbers)
- **Resources**: Data resources (e.g., config)
- **Prompts**: Prompt templates for the LLM
"""

    if project_type in ["server_agent", "agent"]:
        readme += f"""
## Using the Agent

```python
from {project_name}.agent import agent

result = await agent.run("Your prompt")
```
"""

    (project_dir / "README.md").write_text(readme)


def create_example_files(project_dir: Path, project_name: str):
    """Create example files."""

    # run.py
    run_content = f'''"""
Example usage of {project_name}.
"""

import asyncio
import os

from dotenv import load_dotenv

from {project_name}.agent import agent


async def main():
    load_dotenv()

    if not os.getenv("OPENAI_API_KEY"):
        print("Error: OPENAI_API_KEY not found")
        return

    result = await agent.run("What tools are available?")
    print(f"Result: {{result}}")


if __name__ == "__main__":
    asyncio.run(main())
'''
    (project_dir / "run.py").write_text(run_content)

    # chat.py
    chat_content = f'''"""
Interactive chat for {project_name}.
"""

import asyncio
import os

from dotenv import load_dotenv

from {project_name}.agent import agent


async def chat():
    load_dotenv()

    if not os.getenv("OPENAI_API_KEY"):
        print("Error: OPENAI_API_KEY not found")
        return

    print("Chat started (type 'exit' to quit)")

    while True:
        user_input = input("\\nYou: ")
        if user_input.lower() == "exit":
            break

        print("Assistant: ", end="", flush=True)
        response = await agent.run(user_input)
        print(response)


if __name__ == "__main__":
    asyncio.run(chat())
'''
    (project_dir / "chat.py").write_text(chat_content)


def create_project(project_name: str, project_type: str) -> bool:
    """Create the project structure."""
    project_dir = Path.cwd() / project_name

    try:
        # Create main directory
        spinner = Spinner("Creating project directory")
        spinner.start()
        time.sleep(0.5)  # Simulate work
        project_dir.mkdir(parents=True)
        spinner.stop("Created project directory")

        # Create server if needed
        if project_type in ["server_agent", "server"]:
            spinner = Spinner("Creating server")
            spinner.start()
            time.sleep(0.3)
            create_server_structure(project_dir, project_name)
            spinner.stop("Created server structure")

        # Create agent if needed
        if project_type in ["server_agent", "agent"]:
            spinner = Spinner("Creating agent")
            spinner.start()
            time.sleep(0.3)
            create_agent_structure(project_dir, project_name, project_type)
            spinner.stop("Created agent structure")

        # Create common files
        spinner = Spinner("Creating configuration files")
        spinner.start()
        time.sleep(0.3)
        create_common_files(project_dir, project_name, project_type)
        spinner.stop("Created configuration files")

        # Create examples for server_agent and agent
        if project_type in ["server_agent", "agent"]:
            spinner = Spinner("Creating example files")
            spinner.start()
            time.sleep(0.3)
            create_example_files(project_dir, project_name)
            spinner.stop("Created example files")

        return True

    except Exception as e:
        print(f"\n❌ Error: {str(e)}")
        return False


# ============= MAIN CLI FUNCTIONS =============


def show_help():
    """Show the main help message."""
    help_text = """
╔══════════════════════════════════════════════════════════════════╗
║                       MCP-Use CLI Tool                           ║
║                                                                  ║
║  Create and deploy MCP servers and agents with ease              ║
╚══════════════════════════════════════════════════════════════════╝

Usage: uvx mcp-use <command> [options]

Available Commands:
  create     🚀 Create a new MCP project (server, agent, or both)
             Interactive wizard to scaffold your MCP project

  deploy     ☁️  Deploy your MCP project to the cloud
             (Coming soon - Cloud deployment from CLI)

Examples:
  uvx mcp-use create           # Start interactive project creation
  uvx mcp-use deploy           # Deploy to cloud (coming soon)
  uvx mcp-use --help           # Show this help message
  uvx mcp-use --version        # Show version information

For more information, visit: https://mcp-use.com
    """
    print(help_text)


def handle_create():
    """Handle the create command."""
    print_header()

    # Get project configuration
    project_name = get_project_name()
    project_type = get_project_type()

    print(f"\n⚙️  Creating {project_type.replace('_', ' + ')} project: {project_name}")
    print()

    # Create the project
    if create_project(project_name, project_type):
        print(f"\n✨ Successfully created '{project_name}'!")
        print("\n📋 Next steps:")
        print(f"   cd {project_name}")
        print("   pip install -r requirements.txt")
        print("   export OPENAI_API_KEY=your-api-key-here")

        if project_type in ["server_agent", "server"]:
            print("\n   # Test the server:")
            print(f"   python {project_name}/server.py")

        if project_type in ["server_agent", "agent"]:
            print("\n   # Run examples:")
            print("   python run.py    # Simple example")
            print("   python chat.py   # Interactive chat")

        print()
    else:
        sys.exit(1)


def handle_deploy():
    """Handle the deploy command (placeholder for future implementation)."""
    print("\n" + "=" * 60)
    print("🚀 MCP Cloud Deployment")
    print("=" * 60)

    print("\n📝 Please login to MCP Cloud to continue...")
    print("   Visit: https://cloud.mcp-use.com/login")
    print()

    # Simulate login prompt
    print("Enter your MCP Cloud credentials:")
    email = input("Email: ")

    if email:
        print(f"\n✨ Welcome {email}!")
        print()
        print("ℹ️  Deployment from CLI is coming soon!")
        print("   For now, please use the web interface at:")
        print("   https://cloud.mcp-use.com/deploy")
        print()
        print("Stay tuned for updates! 🎉")
    else:
        print("\n❌ Login cancelled")

    print("=" * 60)


def main(args=None):
    """Main entry point for the CLI."""
    parser = argparse.ArgumentParser(
        prog="mcp-use",
        description="MCP-Use CLI Tool - Create and deploy MCP projects",
        add_help=False,  # We'll handle help ourselves
    )

    # Add version argument
    parser.add_argument(
        "--version", "-v", action="version", version=f"mcp-use {__version__}", help="Show version information"
    )

    # Add help argument
    parser.add_argument("--help", "-h", action="store_true", help="Show help message")

    # Add subcommand as positional argument
    parser.add_argument("command", nargs="?", choices=["create", "deploy"], help="Command to execute")

    # Parse arguments
    parsed_args = parser.parse_args(args)

    # Handle help flag or no command
    if parsed_args.help or not parsed_args.command:
        show_help()
        sys.exit(0)

    # Handle commands
    if parsed_args.command == "create":
        handle_create()
    elif parsed_args.command == "deploy":
        handle_deploy()
    else:
        print(f"Unknown command: {parsed_args.command}")
        show_help()
        sys.exit(1)


if __name__ == "__main__":
    main()



================================================
FILE: mcp_use/client.py
================================================
"""
Client for managing MCP servers and sessions.

This module provides a high-level client that manages MCP servers, connectors,
and sessions from configuration.
"""

import json
import warnings
from typing import Any

from mcp.client.session import ElicitationFnT, LoggingFnT, MessageHandlerFnT, SamplingFnT

from mcp_use.types.sandbox import SandboxOptions

from .config import create_connector_from_config, load_config_file
from .logging import logger
from .session import MCPSession


class MCPClient:
    """Client for managing MCP servers and sessions.

    This class provides a unified interface for working with MCP servers,
    handling configuration, connector creation, and session management.
    """

    def __init__(
        self,
        config: str | dict[str, Any] | None = None,
        allowed_servers: list[str] | None = None,
        sandbox: bool = False,
        sandbox_options: SandboxOptions | None = None,
        sampling_callback: SamplingFnT | None = None,
        elicitation_callback: ElicitationFnT | None = None,
        message_handler: MessageHandlerFnT | None = None,
        logging_callback: LoggingFnT | None = None,
    ) -> None:
        """Initialize a new MCP client.

        Args:
            config: Either a dict containing configuration or a path to a JSON config file.
                   If None, an empty configuration is used.
            sandbox: Whether to use sandboxed execution mode for running MCP servers.
            sandbox_options: Optional sandbox configuration options.
            sampling_callback: Optional sampling callback function.
        """
        self.config: dict[str, Any] = {}
        self.allowed_servers: list[str] = allowed_servers
        self.sandbox = sandbox
        self.sandbox_options = sandbox_options
        self.sessions: dict[str, MCPSession] = {}
        self.active_sessions: list[str] = []
        self.sampling_callback = sampling_callback
        self.elicitation_callback = elicitation_callback
        self.message_handler = message_handler
        self.logging_callback = logging_callback
        # Load configuration if provided
        if config is not None:
            if isinstance(config, str):
                self.config = load_config_file(config)
            else:
                self.config = config

    @classmethod
    def from_dict(
        cls,
        config: dict[str, Any],
        sandbox: bool = False,
        sandbox_options: SandboxOptions | None = None,
        sampling_callback: SamplingFnT | None = None,
        elicitation_callback: ElicitationFnT | None = None,
        message_handler: MessageHandlerFnT | None = None,
        logging_callback: LoggingFnT | None = None,
    ) -> "MCPClient":
        """Create a MCPClient from a dictionary.

        Args:
            config: The configuration dictionary.
            sandbox: Whether to use sandboxed execution mode for running MCP servers.
            sandbox_options: Optional sandbox configuration options.
            sampling_callback: Optional sampling callback function.
            elicitation_callback: Optional elicitation callback function.
        """
        return cls(
            config=config,
            sandbox=sandbox,
            sandbox_options=sandbox_options,
            sampling_callback=sampling_callback,
            elicitation_callback=elicitation_callback,
            message_handler=message_handler,
            logging_callback=logging_callback,
        )

    @classmethod
    def from_config_file(
        cls,
        filepath: str,
        sandbox: bool = False,
        sandbox_options: SandboxOptions | None = None,
        sampling_callback: SamplingFnT | None = None,
        elicitation_callback: ElicitationFnT | None = None,
        message_handler: MessageHandlerFnT | None = None,
        logging_callback: LoggingFnT | None = None,
    ) -> "MCPClient":
        """Create a MCPClient from a configuration file.

        Args:
            filepath: The path to the configuration file.
            sandbox: Whether to use sandboxed execution mode for running MCP servers.
            sandbox_options: Optional sandbox configuration options.
            sampling_callback: Optional sampling callback function.
            elicitation_callback: Optional elicitation callback function.
        """
        return cls(
            config=load_config_file(filepath),
            sandbox=sandbox,
            sandbox_options=sandbox_options,
            sampling_callback=sampling_callback,
            elicitation_callback=elicitation_callback,
            message_handler=message_handler,
            logging_callback=logging_callback,
        )

    def add_server(
        self,
        name: str,
        server_config: dict[str, Any],
    ) -> None:
        """Add a server configuration.

        Args:
            name: The name to identify this server.
            server_config: The server configuration.
        """
        if "mcpServers" not in self.config:
            self.config["mcpServers"] = {}

        self.config["mcpServers"][name] = server_config

    def remove_server(self, name: str) -> None:
        """Remove a server configuration.

        Args:
            name: The name of the server to remove.
        """
        if "mcpServers" in self.config and name in self.config["mcpServers"]:
            del self.config["mcpServers"][name]

            # If we removed an active session, remove it from active_sessions
            if name in self.active_sessions:
                self.active_sessions.remove(name)

    def get_server_names(self) -> list[str]:
        """Get the list of configured server names.

        Returns:
            List of server names.
        """
        return list(self.config.get("mcpServers", {}).keys())

    def save_config(self, filepath: str) -> None:
        """Save the current configuration to a file.

        Args:
            filepath: The path to save the configuration to.
        """
        with open(filepath, "w") as f:
            json.dump(self.config, f, indent=2)

    async def create_session(self, server_name: str, auto_initialize: bool = True) -> MCPSession:
        """Create a session for the specified server.

        Args:
            server_name: The name of the server to create a session for.
            auto_initialize: Whether to automatically initialize the session.

        Returns:
            The created MCPSession.

        Raises:
            ValueError: If the specified server doesn't exist.
        """
        # Get server config
        servers = self.config.get("mcpServers", {})
        if not servers:
            warnings.warn("No MCP servers defined in config", UserWarning, stacklevel=2)
            return None

        if server_name not in servers:
            raise ValueError(f"Server '{server_name}' not found in config")

        server_config = servers[server_name]

        # Create connector with options
        connector = create_connector_from_config(
            server_config,
            sandbox=self.sandbox,
            sandbox_options=self.sandbox_options,
            sampling_callback=self.sampling_callback,
            elicitation_callback=self.elicitation_callback,
            message_handler=self.message_handler,
            logging_callback=self.logging_callback,
        )

        # Create the session
        session = MCPSession(connector)
        if auto_initialize:
            await session.initialize()
        self.sessions[server_name] = session

        # Add to active sessions
        if server_name not in self.active_sessions:
            self.active_sessions.append(server_name)

        return session

    async def create_all_sessions(
        self,
        auto_initialize: bool = True,
    ) -> dict[str, MCPSession]:
        """Create sessions for all configured servers.

        Args:
            auto_initialize: Whether to automatically initialize the sessions.

        Returns:
            Dictionary mapping server names to their MCPSession instances.

        Warns:
            UserWarning: If no servers are configured.
        """
        # Get server config
        servers = self.config.get("mcpServers", {})
        if not servers:
            warnings.warn("No MCP servers defined in config", UserWarning, stacklevel=2)
            return {}

        # Create sessions only for allowed servers if applicable else create for all servers
        for name in servers:
            if self.allowed_servers is None or name in self.allowed_servers:
                await self.create_session(name, auto_initialize)

        return self.sessions

    def get_session(self, server_name: str) -> MCPSession:
        """Get an existing session.

        Args:
            server_name: The name of the server to get the session for.
                        If None, uses the first active session.

        Returns:
            The MCPSession for the specified server.

        Raises:
            ValueError: If no active sessions exist or the specified session doesn't exist.
        """
        if server_name not in self.sessions:
            raise ValueError(f"No session exists for server '{server_name}'")

        return self.sessions[server_name]

    def get_all_active_sessions(self) -> dict[str, MCPSession]:
        """Get all active sessions.

        Returns:
            Dictionary mapping server names to their MCPSession instances.
        """
        return {name: self.sessions[name] for name in self.active_sessions if name in self.sessions}

    async def close_session(self, server_name: str) -> None:
        """Close a session.

        Args:
            server_name: The name of the server to close the session for.
                        If None, uses the first active session.

        Raises:
            ValueError: If no active sessions exist or the specified session doesn't exist.
        """
        # Check if the session exists
        if server_name not in self.sessions:
            logger.warning(f"No session exists for server '{server_name}', nothing to close")
            return

        # Get the session
        session = self.sessions[server_name]

        try:
            # Disconnect from the session
            logger.debug(f"Closing session for server '{server_name}'")
            await session.disconnect()
        except Exception as e:
            logger.error(f"Error closing session for server '{server_name}': {e}")
        finally:
            # Remove the session regardless of whether disconnect succeeded
            del self.sessions[server_name]

            # Remove from active_sessions
            if server_name in self.active_sessions:
                self.active_sessions.remove(server_name)

    async def close_all_sessions(self) -> None:
        """Close all active sessions.

        This method ensures all sessions are closed even if some fail.
        """
        # Get a list of all session names first to avoid modification during iteration
        server_names = list(self.sessions.keys())
        errors = []

        for server_name in server_names:
            try:
                logger.debug(f"Closing session for server '{server_name}'")
                await self.close_session(server_name)
            except Exception as e:
                error_msg = f"Failed to close session for server '{server_name}': {e}"
                logger.error(error_msg)
                errors.append(error_msg)

        # Log summary if there were errors
        if errors:
            logger.error(f"Encountered {len(errors)} errors while closing sessions")
        else:
            logger.debug("All sessions closed successfully")



================================================
FILE: mcp_use/config.py
================================================
"""
Configuration loader for MCP session.

This module provides functionality to load MCP configuration from JSON files.
"""

import json
from typing import Any

from mcp.client.session import ElicitationFnT, LoggingFnT, MessageHandlerFnT, SamplingFnT

from mcp_use.types.sandbox import SandboxOptions

from .connectors import BaseConnector, HttpConnector, SandboxConnector, StdioConnector, WebSocketConnector
from .connectors.utils import is_stdio_server


def load_config_file(filepath: str) -> dict[str, Any]:
    """Load a configuration file.

    Args:
        filepath: Path to the configuration file

    Returns:
        The parsed configuration
    """
    with open(filepath) as f:
        return json.load(f)


def create_connector_from_config(
    server_config: dict[str, Any],
    sandbox: bool = False,
    sandbox_options: SandboxOptions | None = None,
    sampling_callback: SamplingFnT | None = None,
    elicitation_callback: ElicitationFnT | None = None,
    message_handler: MessageHandlerFnT | None = None,
    logging_callback: LoggingFnT | None = None,
) -> BaseConnector:
    """Create a connector based on server configuration.
    This function can be called with just the server_config parameter:
    create_connector_from_config(server_config)
    Args:
        server_config: The server configuration section
        sandbox: Whether to use sandboxed execution mode for running MCP servers.
        sandbox_options: Optional sandbox configuration options.
        sampling_callback: Optional sampling callback function.
    Returns:
        A configured connector instance
    """

    # Stdio connector (command-based)
    if is_stdio_server(server_config) and not sandbox:
        return StdioConnector(
            command=server_config["command"],
            args=server_config["args"],
            env=server_config.get("env", None),
            sampling_callback=sampling_callback,
            elicitation_callback=elicitation_callback,
            message_handler=message_handler,
            logging_callback=logging_callback,
        )

    # Sandboxed connector
    elif is_stdio_server(server_config) and sandbox:
        return SandboxConnector(
            command=server_config["command"],
            args=server_config["args"],
            env=server_config.get("env", None),
            e2b_options=sandbox_options,
            sampling_callback=sampling_callback,
            elicitation_callback=elicitation_callback,
            message_handler=message_handler,
            logging_callback=logging_callback,
        )

    # HTTP connector
    elif "url" in server_config:
        return HttpConnector(
            base_url=server_config["url"],
            headers=server_config.get("headers", None),
            auth_token=server_config.get("auth_token", None),
            timeout=server_config.get("timeout", 5),
            sse_read_timeout=server_config.get("sse_read_timeout", 60 * 5),
            sampling_callback=sampling_callback,
            elicitation_callback=elicitation_callback,
            message_handler=message_handler,
            logging_callback=logging_callback,
        )

    # WebSocket connector
    elif "ws_url" in server_config:
        return WebSocketConnector(
            url=server_config["ws_url"],
            headers=server_config.get("headers", None),
            auth_token=server_config.get("auth_token", None),
        )

    raise ValueError("Cannot determine connector type from config")



================================================
FILE: mcp_use/logging.py
================================================
"""
Logger module for mcp_use.

This module provides a centralized logging configuration for the mcp_use library,
with customizable log levels and formatters.
"""

import logging
import os
import sys

from langchain.globals import set_debug as langchain_set_debug

# Global debug flag - can be set programmatically or from environment
MCP_USE_DEBUG = 1


class Logger:
    """Centralized logger for mcp_use.

    This class provides logging functionality with configurable levels,
    formatters, and handlers.
    """

    # Default log format
    DEFAULT_FORMAT = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

    # Module-specific loggers
    _loggers = {}

    @classmethod
    def get_logger(cls, name: str = "mcp_use") -> logging.Logger:
        """Get a logger instance for the specified name.

        Args:
            name: Logger name, usually the module name (defaults to 'mcp_use')

        Returns:
            Configured logger instance
        """
        if name in cls._loggers:
            return cls._loggers[name]

        # Create new logger
        logger = logging.getLogger(name)
        cls._loggers[name] = logger

        return logger

    @classmethod
    def configure(
        cls,
        level: int | str = None,
        format_str: str | None = None,
        log_to_console: bool = True,
        log_to_file: str | None = None,
    ) -> None:
        """Configure the root mcp_use logger.

        Args:
            level: Log level (default: DEBUG if MCP_USE_DEBUG is 2,
            INFO if MCP_USE_DEBUG is 1,
            otherwise WARNING)
            format_str: Log format string (default: DEFAULT_FORMAT)
            log_to_console: Whether to log to console (default: True)
            log_to_file: Path to log file (default: None)
        """
        root_logger = cls.get_logger()

        # Set level based on debug settings if not explicitly provided
        if level is None:
            if MCP_USE_DEBUG == 2:
                level = logging.DEBUG
            elif MCP_USE_DEBUG == 1:
                level = logging.INFO
            else:
                level = logging.WARNING
        elif isinstance(level, str):
            level = getattr(logging, level.upper())

        root_logger.setLevel(level)

        # Set propagate to True to ensure child loggers inherit settings
        root_logger.propagate = True

        # Clear existing handlers
        for handler in root_logger.handlers[:]:
            root_logger.removeHandler(handler)

        # Set formatter
        formatter = logging.Formatter(format_str or cls.DEFAULT_FORMAT)

        # Add console handler if requested
        if log_to_console:
            console_handler = logging.StreamHandler(sys.stdout)
            console_handler.setFormatter(formatter)
            console_handler.setLevel(level)  # Ensure handler respects the level
            root_logger.addHandler(console_handler)

        # Add file handler if requested
        if log_to_file:
            # Ensure directory exists
            log_dir = os.path.dirname(log_to_file)
            if log_dir and not os.path.exists(log_dir):
                os.makedirs(log_dir)

            file_handler = logging.FileHandler(log_to_file)
            file_handler.setFormatter(formatter)
            file_handler.setLevel(level)  # Ensure handler respects the level
            root_logger.addHandler(file_handler)

    @classmethod
    def set_debug(cls, debug_level: int = 2) -> None:
        """Set the debug flag and update the log level accordingly.

        Args:
            debug_level: Debug level (0=off, 1=info, 2=debug)
        """
        global MCP_USE_DEBUG
        MCP_USE_DEBUG = debug_level

        # Determine the target level
        if debug_level == 2:
            target_level = logging.DEBUG
            langchain_set_debug(True)
        elif debug_level == 1:
            target_level = logging.INFO
            langchain_set_debug(False)
        else:
            target_level = logging.WARNING
            langchain_set_debug(False)

        # Update log level for existing loggers in our registry
        for logger in cls._loggers.values():
            logger.setLevel(target_level)
            # Also update handler levels
            for handler in logger.handlers:
                handler.setLevel(target_level)

        # Also update all mcp_use child loggers that might exist
        # This ensures loggers created with logging.getLogger() are also updated
        base_logger = logging.getLogger("mcp_use")
        base_logger.setLevel(target_level)
        for handler in base_logger.handlers:
            handler.setLevel(target_level)


# Check environment variable for debug flag
debug_env = os.environ.get("MCP_USE_DEBUG", "").lower() or os.environ.get("DEBUG", "").lower()
if debug_env == "2":
    MCP_USE_DEBUG = 2
elif debug_env == "1":
    MCP_USE_DEBUG = 1

# Configure default logger
Logger.configure()

logger = Logger.get_logger()



================================================
FILE: mcp_use/session.py
================================================
"""
Session manager for MCP connections.

This module provides a session manager for MCP connections,
which handles authentication, initialization, and tool discovery.
"""

from datetime import timedelta
from typing import Any

from mcp.types import CallToolResult, GetPromptResult, Prompt, ReadResourceResult, Resource, Tool
from pydantic import AnyUrl

from .connectors.base import BaseConnector


class MCPSession:
    """Session manager for MCP connections.

    This class manages the lifecycle of an MCP connection, including
    authentication, initialization, and tool discovery.
    """

    def __init__(
        self,
        connector: BaseConnector,
        auto_connect: bool = True,
    ) -> None:
        """Initialize a new MCP session.

        Args:
            connector: The connector to use for communicating with the MCP implementation.
            auto_connect: Whether to automatically connect to the MCP implementation.
        """
        self.connector = connector
        self.session_info: dict[str, Any] | None = None
        self.auto_connect = auto_connect

    async def __aenter__(self) -> "MCPSession":
        """Enter the async context manager.

        Returns:
            The session instance.
        """
        await self.connect()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb) -> None:
        """Exit the async context manager.

        Args:
            exc_type: The exception type, if an exception was raised.
            exc_val: The exception value, if an exception was raised.
            exc_tb: The exception traceback, if an exception was raised.
        """
        await self.disconnect()

    async def connect(self) -> None:
        """Connect to the MCP implementation."""
        await self.connector.connect()

    async def disconnect(self) -> None:
        """Disconnect from the MCP implementation."""
        await self.connector.disconnect()

    async def initialize(self) -> dict[str, Any]:
        """Initialize the MCP session and discover available tools.

        Returns:
            The session information returned by the MCP implementation.
        """
        # Make sure we're connected
        if not self.is_connected and self.auto_connect:
            await self.connect()

        # Initialize the session
        self.session_info = await self.connector.initialize()

        return self.session_info

    @property
    def is_connected(self) -> bool:
        """Check if the connector is connected.

        Returns:
            True if the connector is connected, False otherwise.
        """
        return self.connector.is_connected

    # Convenience methods for MCP operations
    async def call_tool(
        self, name: str, arguments: dict[str, Any], read_timeout_seconds: timedelta | None = None
    ) -> CallToolResult:
        """Call an MCP tool.

        Args:
            name: The name of the tool to call.
            arguments: The arguments to pass to the tool.
            read_timeout_seconds: Optional timeout for the tool call.

        Returns:
            The result of the tool call.

        Raises:
            RuntimeError: If the connection is lost and cannot be reestablished.
        """
        return await self.connector.call_tool(name, arguments, read_timeout_seconds)

    async def list_tools(self) -> list[Tool]:
        """List all available tools from the MCP server.

        Returns:
            List of available tools.
        """
        return await self.connector.list_tools()

    async def list_resources(self) -> list[Resource]:
        """List all available resources from the MCP server.

        Returns:
            List of available resources.
        """
        return await self.connector.list_resources()

    async def read_resource(self, uri: AnyUrl) -> ReadResourceResult:
        """Read a resource by URI.

        Args:
            uri: The URI of the resource to read.

        Returns:
            The resource content.
        """
        return await self.connector.read_resource(uri)

    async def list_prompts(self) -> list[Prompt]:
        """List all available prompts from the MCP server.

        Returns:
            List of available prompts.
        """
        return await self.connector.list_prompts()

    async def get_prompt(self, name: str, arguments: dict[str, Any] | None = None) -> GetPromptResult:
        """Get a prompt by name.

        Args:
            name: The name of the prompt to get.
            arguments: Optional arguments for the prompt.

        Returns:
            The prompt result with messages.
        """
        return await self.connector.get_prompt(name, arguments)



================================================
FILE: mcp_use/utils.py
================================================
def singleton(cls):
    """A decorator that implements the singleton pattern for a class.

    This decorator ensures that only one instance of a class is ever created.
    Subsequent attempts to create a new instance will return the existing one.

    Usage:
        @singleton
        class MySingletonClass:
            def __init__(self):
                # ... initialization ...
                pass

    Args:
        cls: The class to be decorated.

    Returns:
        A wrapper function that handles instance creation.
    """
    instance = [None]

    def wrapper(*args, **kwargs):
        if instance[0] is None:
            instance[0] = cls(*args, **kwargs)
        return instance[0]

    return wrapper



================================================
FILE: mcp_use/adapters/__init__.py
================================================
"""
Adapters for converting MCP tools to different frameworks.

This package provides adapters for converting MCP tools to different frameworks.
"""

from .base import BaseAdapter
from .langchain_adapter import LangChainAdapter

__all__ = ["BaseAdapter", "LangChainAdapter"]



================================================
FILE: mcp_use/adapters/base.py
================================================
"""
Base adapter interface for MCP tools.

This module provides the abstract base class that all MCP tool adapters should inherit from.
"""

from abc import ABC, abstractmethod
from typing import TypeVar

from mcp.types import Prompt, Resource, Tool

from ..client import MCPClient
from ..connectors.base import BaseConnector
from ..logging import logger

# Generic type for the tools created by the adapter
T = TypeVar("T")


class BaseAdapter(ABC):
    """Abstract base class for converting MCP tools to other framework formats.

    This class defines the common interface that all adapter implementations
    should follow to ensure consistency across different frameworks.
    """

    def __init__(self, disallowed_tools: list[str] | None = None) -> None:
        """Initialize a new adapter.

        Args:
            disallowed_tools: list of tool names that should not be available.
        """
        self.disallowed_tools = disallowed_tools or []
        self._connector_tool_map: dict[BaseConnector, list[T]] = {}

    async def create_tools(self, client: "MCPClient") -> list[T]:
        """Create tools from an MCPClient instance.

        This is the recommended way to create tools from an MCPClient, as it handles
        session creation and connector extraction automatically.

        Args:
            client: The MCPClient to extract tools from.

        Returns:
            A list of tools in the target framework's format.

        Example:
            ```python
            from mcp_use.client import MCPClient
            from mcp_use.adapters import YourAdapter

            client = MCPClient.from_config_file("config.json")
            tools = await YourAdapter.create_tools(client)
            ```
        """
        # Ensure we have active sessions
        if not client.active_sessions:
            logger.info("No active sessions found, creating new ones...")
            await client.create_all_sessions()

        # Get all active sessions
        sessions = client.get_all_active_sessions()

        # Extract connectors from sessions
        connectors = [session.connector for session in sessions.values()]

        # Create tools from connectors
        return await self._create_tools_from_connectors(connectors)

    async def load_tools_for_connector(self, connector: BaseConnector) -> list[T]:
        """Dynamically load tools for a specific connector.

        Args:
            connector: The connector to load tools for.

        Returns:
            The list of tools that were loaded in the target framework's format.
        """
        # Check if we already have tools for this connector
        if connector in self._connector_tool_map:
            logger.debug(f"Returning {len(self._connector_tool_map[connector])} existing tools for connector")
            return self._connector_tool_map[connector]

        # Create tools for this connector

        # Make sure the connector is initialized and has tools
        success = await self._ensure_connector_initialized(connector)
        if not success:
            return []

        connector_tools = []
        # Now create tools for each MCP tool
        for tool in await connector.list_tools():
            # Convert the tool and add it to the list if conversion was successful
            converted_tool = self._convert_tool(tool, connector)
            if converted_tool:
                connector_tools.append(converted_tool)

        # Convert resources to tools so that agents can access resource content directly
        resources_list = await connector.list_resources() or []
        if resources_list:
            for resource in resources_list:
                converted_resource = self._convert_resource(resource, connector)
                if converted_resource:
                    connector_tools.append(converted_resource)

        # Convert prompts to tools so that agents can retrieve prompt content
        prompts_list = await connector.list_prompts() or []
        if prompts_list:
            for prompt in prompts_list:
                converted_prompt = self._convert_prompt(prompt, connector)
                if converted_prompt:
                    connector_tools.append(converted_prompt)
        # ------------------------------

        # Store the tools for this connector
        self._connector_tool_map[connector] = connector_tools

        # Log available tools for debugging
        logger.debug(
            f"Loaded {len(connector_tools)} new tools for connector: "
            f"{[getattr(tool, 'name', str(tool)) for tool in connector_tools]}"
        )

        return connector_tools

    @abstractmethod
    def _convert_tool(self, mcp_tool: Tool, connector: BaseConnector) -> T:
        """Convert an MCP tool to the target framework's tool format."""
        pass

    @abstractmethod
    def _convert_resource(self, mcp_resource: Resource, connector: BaseConnector) -> T:
        """Convert an MCP resource to the target framework's resource format."""
        pass

    @abstractmethod
    def _convert_prompt(self, mcp_prompt: Prompt, connector: BaseConnector) -> T:
        """Convert an MCP prompt to the target framework's prompt format."""
        pass

    async def _create_tools_from_connectors(self, connectors: list[BaseConnector]) -> list[T]:
        """Create tools from MCP tools in all provided connectors.

        Args:
            connectors: list of MCP connectors to create tools from.

        Returns:
            A list of tools in the target framework's format.
        """
        tools = []
        for connector in connectors:
            # Create tools for this connector
            connector_tools = await self.load_tools_for_connector(connector)
            tools.extend(connector_tools)

        # Log available tools for debugging
        logger.debug(f"Available tools: {len(tools)}")
        return tools

    def _check_connector_initialized(self, connector: BaseConnector) -> bool:
        """Check if a connector is initialized and has tools.

        Args:
            connector: The connector to check.

        Returns:
            True if the connector is initialized and has tools, False otherwise.
        """
        return hasattr(connector, "tools") and connector.tools

    async def _ensure_connector_initialized(self, connector: BaseConnector) -> bool:
        """Ensure a connector is initialized.

        Args:
            connector: The connector to initialize.

        Returns:
            True if initialization succeeded, False otherwise.
        """
        if not self._check_connector_initialized(connector):
            logger.debug("Connector doesn't have tools, initializing it")
            try:
                await connector.initialize()
                return True
            except Exception as e:
                logger.error(f"Error initializing connector: {e}")
                return False
        return True



================================================
FILE: mcp_use/adapters/langchain_adapter.py
================================================
"""
LangChain adapter for MCP tools.

This module provides utilities to convert MCP tools to LangChain tools.
"""

import re
from typing import Any, NoReturn

from jsonschema_pydantic import jsonschema_to_pydantic
from langchain_core.tools import BaseTool, ToolException
from mcp.types import (
    CallToolResult,
    EmbeddedResource,
    ImageContent,
    Prompt,
    ReadResourceRequestParams,
    Resource,
    TextContent,
)
from pydantic import BaseModel, Field, create_model

from ..connectors.base import BaseConnector
from ..errors.error_formatting import format_error
from ..logging import logger
from .base import BaseAdapter


class LangChainAdapter(BaseAdapter):
    """Adapter for converting MCP tools to LangChain tools."""

    def __init__(self, disallowed_tools: list[str] | None = None) -> None:
        """Initialize a new LangChain adapter.

        Args:
            disallowed_tools: list of tool names that should not be available.
        """
        super().__init__(disallowed_tools)
        self._connector_tool_map: dict[BaseConnector, list[BaseTool]] = {}

    def fix_schema(self, schema: dict) -> dict:
        """Convert JSON Schema 'type': ['string', 'null'] to 'anyOf' format.

        Args:
            schema: The JSON schema to fix.

        Returns:
            The fixed JSON schema.
        """
        if isinstance(schema, dict):
            if "type" in schema and isinstance(schema["type"], list):
                schema["anyOf"] = [{"type": t} for t in schema["type"]]
                del schema["type"]  # Remove 'type' and standardize to 'anyOf'
            for key, value in schema.items():
                schema[key] = self.fix_schema(value)  # Apply recursively
        return schema

    def _parse_mcp_tool_result(self, tool_result: CallToolResult) -> str:
        """Parse the content of a CallToolResult into a string.

        Args:
            tool_result: The result object from calling an MCP tool.

        Returns:
            A string representation of the tool result content.

        Raises:
            ToolException: If the tool execution failed, returned no content,
                        or contained unexpected content types.
        """
        if tool_result.isError:
            raise ToolException(f"Tool execution failed: {tool_result.content}")

        if not tool_result.content:
            raise ToolException("Tool execution returned no content")

        decoded_result = ""
        for item in tool_result.content:
            match item.type:
                case "text":
                    item: TextContent
                    decoded_result += item.text
                case "image":
                    item: ImageContent
                    decoded_result += item.data  # Assuming data is string-like or base64
                case "resource":
                    resource: EmbeddedResource = item.resource
                    if hasattr(resource, "text"):
                        decoded_result += resource.text
                    elif hasattr(resource, "blob"):
                        # Assuming blob needs decoding or specific handling; adjust as needed
                        decoded_result += (
                            resource.blob.decode() if isinstance(resource.blob, bytes) else str(resource.blob)
                        )
                    else:
                        raise ToolException(f"Unexpected resource type: {resource.type}")
                case _:
                    raise ToolException(f"Unexpected content type: {item.type}")

        return decoded_result

    def _convert_tool(self, mcp_tool: dict[str, Any], connector: BaseConnector) -> BaseTool:
        """Convert an MCP tool to LangChain's tool format.

        Args:
            mcp_tool: The MCP tool to convert.
            connector: The connector that provides this tool.

        Returns:
            A LangChain BaseTool.
        """
        # Skip disallowed tools
        if mcp_tool.name in self.disallowed_tools:
            return None

        # This is a dynamic class creation, we need to work with the self reference
        adapter_self = self

        class McpToLangChainAdapter(BaseTool):
            name: str = mcp_tool.name or "NO NAME"
            description: str = mcp_tool.description or ""
            # Convert JSON schema to Pydantic model for argument validation
            args_schema: type[BaseModel] = jsonschema_to_pydantic(
                adapter_self.fix_schema(mcp_tool.inputSchema)  # Apply schema conversion
            )
            tool_connector: BaseConnector = connector  # Renamed variable to avoid name conflict
            handle_tool_error: bool = True

            def __repr__(self) -> str:
                return f"MCP tool: {self.name}: {self.description}"

            def _run(self, **kwargs: Any) -> NoReturn:
                """Synchronous run method that always raises an error.

                Raises:
                    NotImplementedError: Always raises this error because MCP tools
                        only support async operations.
                """
                raise NotImplementedError("MCP tools only support async operations")

            async def _arun(self, **kwargs: Any) -> Any:
                """Asynchronously execute the tool with given arguments.

                Args:
                    kwargs: The arguments to pass to the tool.

                Returns:
                    The result of the tool execution.

                Raises:
                    ToolException: If tool execution fails.
                """
                logger.debug(f'MCP tool: "{self.name}" received input: {kwargs}')

                try:
                    tool_result: CallToolResult = await self.tool_connector.call_tool(self.name, kwargs)
                    try:
                        # Use the helper function to parse the result
                        return adapter_self._parse_mcp_tool_result(tool_result)
                    except Exception as e:
                        # Log the exception for debugging
                        logger.error(f"Error parsing tool result: {e}")
                        return format_error(e, tool=self.name, tool_content=tool_result.content)

                except Exception as e:
                    if self.handle_tool_error:
                        return format_error(e, tool=self.name)  # Format the error to make LLM understand it
                    raise

        return McpToLangChainAdapter()

    def _convert_resource(self, mcp_resource: Resource, connector: BaseConnector) -> BaseTool:
        """Convert an MCP resource to LangChain's tool format.

        Each resource becomes an async tool that returns its content when called.
        The tool takes **no** arguments because the resource URI is fixed.
        """

        def _sanitize(name: str) -> str:
            return re.sub(r"[^A-Za-z0-9_]+", "_", name).lower().strip("_")

        class ResourceTool(BaseTool):
            name: str = _sanitize(mcp_resource.name or f"resource_{mcp_resource.uri}")
            description: str = (
                mcp_resource.description or f"Return the content of the resource located at URI {mcp_resource.uri}."
            )
            args_schema: type[BaseModel] = ReadResourceRequestParams
            tool_connector: BaseConnector = connector
            handle_tool_error: bool = True

            def _run(self, **kwargs: Any) -> NoReturn:
                raise NotImplementedError("Resource tools only support async operations")

            async def _arun(self, **kwargs: Any) -> Any:
                logger.debug(f'Resource tool: "{self.name}" called')
                try:
                    result = await self.tool_connector.read_resource(mcp_resource.uri)
                    for content in result.contents:
                        # Attempt to decode bytes if necessary
                        if isinstance(content, bytes):
                            content_decoded = content.decode()
                        else:
                            content_decoded = str(content)

                    return content_decoded
                except Exception as e:
                    if self.handle_tool_error:
                        return format_error(e, tool=self.name)  # Format the error to make LLM understand it
                    raise

        return ResourceTool()

    def _convert_prompt(self, mcp_prompt: Prompt, connector: BaseConnector) -> BaseTool:
        """Convert an MCP prompt to LangChain's tool format.

        The resulting tool executes `get_prompt` on the connector with the prompt's name and
        the user-provided arguments (if any). The tool returns the decoded prompt content.
        """
        prompt_arguments = mcp_prompt.arguments

        # Sanitize the prompt name to create a valid Python identifier for the model name
        base_model_name = re.sub(r"[^a-zA-Z0-9_]", "_", mcp_prompt.name)
        if not base_model_name or base_model_name[0].isdigit():
            base_model_name = "PromptArgs_" + base_model_name
        dynamic_model_name = f"{base_model_name}_InputSchema"

        if prompt_arguments:
            field_definitions_for_create: dict[str, Any] = {}
            for arg in prompt_arguments:
                param_type: type = getattr(arg, "type", str)
                if arg.required:
                    field_definitions_for_create[arg.name] = (
                        param_type,
                        Field(description=arg.description),
                    )
                else:
                    field_definitions_for_create[arg.name] = (
                        param_type | None,
                        Field(None, description=arg.description),
                    )

            InputSchema = create_model(dynamic_model_name, **field_definitions_for_create, __base__=BaseModel)
        else:
            # Create an empty Pydantic model if there are no arguments
            InputSchema = create_model(dynamic_model_name, __base__=BaseModel)

        class PromptTool(BaseTool):
            name: str = mcp_prompt.name
            description: str = mcp_prompt.description

            args_schema: type[BaseModel] = InputSchema
            tool_connector: BaseConnector = connector
            handle_tool_error: bool = True

            def _run(self, **kwargs: Any) -> NoReturn:
                raise NotImplementedError("Prompt tools only support async operations")

            async def _arun(self, **kwargs: Any) -> Any:
                logger.debug(f'Prompt tool: "{self.name}" called with args: {kwargs}')
                try:
                    result = await self.tool_connector.get_prompt(self.name, kwargs)
                    return result.messages
                except Exception as e:
                    if self.handle_tool_error:
                        return format_error(e, tool=self.name)  # Format the error to make LLM understand it
                    raise

        return PromptTool()



================================================
FILE: mcp_use/agents/__init__.py
================================================
"""
Agent implementations for using MCP tools.

This module provides ready-to-use agent implementations
that are pre-configured for using MCP tools.
"""

from .mcpagent import MCPAgent
from .remote import RemoteAgent

__all__ = [
    "MCPAgent",
    "RemoteAgent",
]



================================================
FILE: mcp_use/agents/base.py
================================================
"""
Base agent interface for MCP tools.

This module provides a base class for agents that use MCP tools.
"""

from abc import ABC, abstractmethod
from typing import Any

from ..session import MCPSession


class BaseAgent(ABC):
    """Base class for agents that use MCP tools.

    This abstract class defines the interface for agents that use MCP tools.
    Agents are responsible for integrating LLMs with MCP tools.
    """

    def __init__(self, session: MCPSession):
        """Initialize a new agent.

        Args:
            session: The MCP session to use for tool calls.
        """
        self.session = session

    @abstractmethod
    async def initialize(self) -> None:
        """Initialize the agent.

        This method should prepare the agent for use, including initializing
        the MCP session and setting up any necessary components.
        """
        pass

    @abstractmethod
    async def run(self, query: str, max_steps: int = 10) -> dict[str, Any]:
        """Run the agent with a query.

        Args:
            query: The query to run.
            max_steps: The maximum number of steps to run.

        Returns:
            The final result from the agent.
        """
        pass

    @abstractmethod
    async def step(self, query: str, previous_steps: list[dict[str, Any]] | None = None) -> dict[str, Any]:
        """Perform a single step of the agent.

        Args:
            query: The query to run.
            previous_steps: Optional list of previous steps.

        Returns:
            The result of the step.
        """
        pass



================================================
FILE: mcp_use/agents/mcpagent.py
================================================
"""
MCP: Main integration module with customizable system prompt.

This module provides the main MCPAgent class that integrates all components
to provide a simple interface for using MCP tools with different LLMs.
"""

import logging
import time
from collections.abc import AsyncGenerator, AsyncIterator
from typing import TypeVar

from langchain.agents import AgentExecutor, create_tool_calling_agent
from langchain.agents.output_parsers.tools import ToolAgentAction
from langchain.globals import set_debug
from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain.schema import AIMessage, BaseMessage, HumanMessage, SystemMessage
from langchain.schema.language_model import BaseLanguageModel
from langchain_core.agents import AgentAction, AgentFinish
from langchain_core.exceptions import OutputParserException
from langchain_core.runnables.schema import StreamEvent
from langchain_core.tools import BaseTool
from langchain_core.utils.input import get_color_mapping
from pydantic import BaseModel

from mcp_use.client import MCPClient
from mcp_use.connectors.base import BaseConnector
from mcp_use.telemetry.telemetry import Telemetry
from mcp_use.telemetry.utils import extract_model_info

from ..adapters.langchain_adapter import LangChainAdapter
from ..logging import logger
from ..managers.base import BaseServerManager
from ..managers.server_manager import ServerManager

# Import observability manager
from ..observability import ObservabilityManager
from .prompts.system_prompt_builder import create_system_message
from .prompts.templates import DEFAULT_SYSTEM_PROMPT_TEMPLATE, SERVER_MANAGER_SYSTEM_PROMPT_TEMPLATE
from .remote import RemoteAgent

set_debug(logger.level == logging.DEBUG)

# Type variable for structured output
T = TypeVar("T", bound=BaseModel)


class MCPAgent:
    """Main class for using MCP tools with various LLM providers.

    This class provides a unified interface for using MCP tools with different LLM providers
    through LangChain's agent framework, with customizable system prompts and conversation memory.
    """

    def __init__(
        self,
        llm: BaseLanguageModel | None = None,
        client: MCPClient | None = None,
        connectors: list[BaseConnector] | None = None,
        max_steps: int = 5,
        auto_initialize: bool = False,
        memory_enabled: bool = True,
        system_prompt: str | None = None,
        system_prompt_template: str | None = None,  # User can still override the template
        additional_instructions: str | None = None,
        disallowed_tools: list[str] | None = None,
        tools_used_names: list[str] | None = None,
        use_server_manager: bool = False,
        server_manager: BaseServerManager | None = None,
        verbose: bool = False,
        agent_id: str | None = None,
        api_key: str | None = None,
        base_url: str = "https://cloud.mcp-use.com",
        callbacks: list | None = None,
        chat_id: str | None = None,
        retry_on_error: bool = True,
        max_retries_per_step: int = 2,
    ):
        """Initialize a new MCPAgent instance.

        Args:
            llm: The LangChain LLM to use. Not required if agent_id is provided for remote execution.
            client: The MCPClient to use. If provided, connector is ignored.
            connectors: A list of MCP connectors to use if client is not provided.
            max_steps: The maximum number of steps to take.
            auto_initialize: Whether to automatically initialize the agent when run is called.
            memory_enabled: Whether to maintain conversation history for context.
            system_prompt: Complete system prompt to use (overrides template if provided).
            system_prompt_template: Template for system prompt with {tool_descriptions} placeholder.
            additional_instructions: Extra instructions to append to the system prompt.
            disallowed_tools: List of tool names that should not be available to the agent.
            use_server_manager: Whether to use server manager mode instead of exposing all tools.
            agent_id: Remote agent ID for remote execution. If provided, creates a remote agent.
            api_key: API key for remote execution. If None, checks MCP_USE_API_KEY env var.
            base_url: Base URL for remote API calls.
            callbacks: List of LangChain callbacks to use. If None and Langfuse is configured, uses langfuse_handler.
            retry_on_error: Whether to retry tool calls that fail due to validation errors.
            max_retries_per_step: Maximum number of retries for validation errors per step.
        """
        # Handle remote execution
        if agent_id is not None:
            self._remote_agent = RemoteAgent(agent_id=agent_id, api_key=api_key, base_url=base_url, chat_id=chat_id)
            self._is_remote = True
            return

        self._is_remote = False
        self._remote_agent = None

        # Validate requirements for local execution
        if llm is None:
            raise ValueError("llm is required for local execution. For remote execution, provide agent_id instead.")

        self.llm = llm
        self.client = client
        self.connectors = connectors or []
        self.max_steps = max_steps
        self.auto_initialize = auto_initialize
        self.memory_enabled = memory_enabled
        self._initialized = False
        self._conversation_history: list[BaseMessage] = []
        self.disallowed_tools = disallowed_tools or []
        self.tools_used_names = tools_used_names or []
        self.use_server_manager = use_server_manager
        self.server_manager = server_manager
        self.verbose = verbose
        self.retry_on_error = retry_on_error
        self.max_retries_per_step = max_retries_per_step
        # System prompt configuration
        self.system_prompt = system_prompt  # User-provided full prompt override
        # User can provide a template override, otherwise use the imported default
        self.system_prompt_template_override = system_prompt_template
        self.additional_instructions = additional_instructions

        # Set up observability callbacks using the ObservabilityManager
        self.observability_manager = ObservabilityManager(custom_callbacks=callbacks)
        self.callbacks = self.observability_manager.get_callbacks()

        # Either client or connector must be provided
        if not client and len(self.connectors) == 0:
            raise ValueError("Either client or connector must be provided")

        # Create the adapter for tool conversion
        self.adapter = LangChainAdapter(disallowed_tools=self.disallowed_tools)

        # Initialize telemetry
        self.telemetry = Telemetry()

        if self.use_server_manager and self.server_manager is None:
            if not self.client:
                raise ValueError("Client must be provided when using server manager")
            self.server_manager = ServerManager(self.client, self.adapter)

        # State tracking - initialize _tools as empty list
        self._agent_executor: AgentExecutor | None = None
        self._system_message: SystemMessage | None = None
        self._tools: list[BaseTool] = []

        # Track model info for telemetry
        self._model_provider, self._model_name = extract_model_info(self.llm)

    async def initialize(self) -> None:
        """Initialize the MCP client and agent."""
        logger.info("🚀 Initializing MCP agent and connecting to services...")
        # If using server manager, initialize it
        if self.use_server_manager and self.server_manager:
            await self.server_manager.initialize()
            # Get server management tools
            management_tools = self.server_manager.tools
            self._tools = management_tools
            logger.info(f"🔧 Server manager mode active with {len(management_tools)} management tools")

            # Create the system message based on available tools
            await self._create_system_message_from_tools(self._tools)
        else:
            # Standard initialization - if using client, get or create sessions
            if self.client:
                # First try to get existing sessions
                self._sessions = self.client.get_all_active_sessions()
                logger.info(f"🔌 Found {len(self._sessions)} existing sessions")

                # If no active sessions exist, create new ones
                if not self._sessions:
                    logger.info("🔄 No active sessions found, creating new ones...")
                    self._sessions = await self.client.create_all_sessions()
                    self.connectors = [session.connector for session in self._sessions.values()]
                    logger.info(f"✅ Created {len(self._sessions)} new sessions")

                # Create LangChain tools directly from the client using the adapter
                self._tools = await self.adapter.create_tools(self.client)
                logger.info(f"🛠️ Created {len(self._tools)} LangChain tools from client")
            else:
                # Using direct connector - only establish connection
                # LangChainAdapter will handle initialization
                connectors_to_use = self.connectors
                logger.info(f"🔗 Connecting to {len(connectors_to_use)} direct connectors...")
                for connector in connectors_to_use:
                    if not hasattr(connector, "client_session") or connector.client_session is None:
                        await connector.connect()

                # Create LangChain tools using the adapter with connectors
                self._tools = await self.adapter._create_tools_from_connectors(connectors_to_use)
                logger.info(f"🛠️ Created {len(self._tools)} LangChain tools from connectors")

            # Get all tools for system message generation
            all_tools = self._tools
            logger.info(f"🧰 Found {len(all_tools)} tools across all connectors")

            # Create the system message based on available tools
            await self._create_system_message_from_tools(all_tools)

        # Create the agent
        self._agent_executor = self._create_agent()
        self._initialized = True
        logger.info("✨ Agent initialization complete")

    async def _create_system_message_from_tools(self, tools: list[BaseTool]) -> None:
        """Create the system message based on provided tools using the builder."""
        # Use the override if provided, otherwise use the imported default
        default_template = self.system_prompt_template_override or DEFAULT_SYSTEM_PROMPT_TEMPLATE
        # Server manager template is now also imported
        server_template = SERVER_MANAGER_SYSTEM_PROMPT_TEMPLATE

        # Delegate creation to the imported function
        self._system_message = create_system_message(
            tools=tools,
            system_prompt_template=default_template,
            server_manager_template=server_template,  # Pass the imported template
            use_server_manager=self.use_server_manager,
            disallowed_tools=self.disallowed_tools,
            user_provided_prompt=self.system_prompt,
            additional_instructions=self.additional_instructions,
        )

        # Update conversation history if memory is enabled
        if self.memory_enabled:
            history_without_system = [msg for msg in self._conversation_history if not isinstance(msg, SystemMessage)]
            self._conversation_history = [self._system_message] + history_without_system

    def _create_agent(self) -> AgentExecutor:
        """Create the LangChain agent with the configured system message.

        Returns:
            An initialized AgentExecutor.
        """
        logger.debug(f"Creating new agent with {len(self._tools)} tools")

        system_content = "You are a helpful assistant"
        if self._system_message:
            system_content = self._system_message.content

        prompt = ChatPromptTemplate.from_messages(
            [
                ("system", system_content),
                MessagesPlaceholder(variable_name="chat_history"),
                ("human", "{input}"),
                MessagesPlaceholder(variable_name="agent_scratchpad"),
            ]
        )

        tool_names = [tool.name for tool in self._tools]
        logger.info(f"🧠 Agent ready with tools: {', '.join(tool_names)}")

        # Use the standard create_tool_calling_agent
        agent = create_tool_calling_agent(llm=self.llm, tools=self._tools, prompt=prompt)

        # Use the standard AgentExecutor with callbacks
        executor = AgentExecutor(
            agent=agent,
            tools=self._tools,
            max_iterations=self.max_steps,
            verbose=self.verbose,
            callbacks=self.callbacks,
        )
        logger.debug(f"Created agent executor with max_iterations={self.max_steps} and {len(self.callbacks)} callbacks")
        return executor

    def get_conversation_history(self) -> list[BaseMessage]:
        """Get the current conversation history.

        Returns:
            The list of conversation messages.
        """
        return self._conversation_history

    def clear_conversation_history(self) -> None:
        """Clear the conversation history."""
        self._conversation_history = []

        # Re-add the system message if it exists
        if self._system_message and self.memory_enabled:
            self._conversation_history = [self._system_message]

    def add_to_history(self, message: BaseMessage) -> None:
        """Add a message to the conversation history.

        Args:
            message: The message to add.
        """
        if self.memory_enabled:
            self._conversation_history.append(message)

    def get_system_message(self) -> SystemMessage | None:
        """Get the current system message.

        Returns:
            The current system message, or None if not set.
        """
        return self._system_message

    def set_system_message(self, message: str) -> None:
        """Set a new system message.

        Args:
            message: The new system message content.
        """
        self._system_message = SystemMessage(content=message)

        # Update conversation history if memory is enabled
        if self.memory_enabled:
            # Remove old system message if it exists
            history_without_system = [msg for msg in self._conversation_history if not isinstance(msg, SystemMessage)]
            self._conversation_history = history_without_system

            # Add new system message
            self._conversation_history.insert(0, self._system_message)

        # Recreate the agent with the new system message if initialized
        if self._initialized and self._tools:
            self._agent_executor = self._create_agent()
            logger.debug("Agent recreated with new system message")

    def set_disallowed_tools(self, disallowed_tools: list[str]) -> None:
        """Set the list of tools that should not be available to the agent.

        This will take effect the next time the agent is initialized.

        Args:
            disallowed_tools: List of tool names that should not be available.
        """
        self.disallowed_tools = disallowed_tools
        self.adapter.disallowed_tools = disallowed_tools

        # If the agent is already initialized, we need to reinitialize it
        # to apply the changes to the available tools
        if self._initialized:
            logger.debug("Agent already initialized. Changes will take effect on next initialization.")
            # We don't automatically reinitialize here as it could be disruptive
            # to ongoing operations. The user can call initialize() explicitly if needed.

    def get_disallowed_tools(self) -> list[str]:
        """Get the list of tools that are not available to the agent.

        Returns:
            List of tool names that are not available.
        """
        return self.disallowed_tools

    async def _consume_and_return(
        self,
        generator: AsyncGenerator[tuple[AgentAction, str] | str | T, None],
    ) -> tuple[str | T, int]:
        """Consume the generator and return the final result.

        This method manually iterates through the generator to consume the steps.
        In Python, async generators cannot return values directly, so we expect
        the final result to be yielded as a special marker.

        Args:
            generator: The async generator that yields steps and a final result.

        Returns:
            A tuple of (final_result, steps_taken). final_result can be a string
            for regular output or a Pydantic model instance for structured output.
        """
        final_result = ""
        steps_taken = 0
        async for item in generator:
            # If it's a string, it's the final result (regular output)
            if isinstance(item, str):
                final_result = item
                break
            # If it's not a tuple, it might be structured output (Pydantic model)
            elif not isinstance(item, tuple):
                final_result = item
                break
            # Otherwise it's a step tuple, just consume it
            else:
                steps_taken += 1
        return final_result, steps_taken

    async def stream(
        self,
        query: str,
        max_steps: int | None = None,
        manage_connector: bool = True,
        external_history: list[BaseMessage] | None = None,
        track_execution: bool = True,
        output_schema: type[T] | None = None,
    ) -> AsyncGenerator[tuple[AgentAction, str] | str | T, None]:
        """Run the agent and yield intermediate steps as an async generator.

        Args:
            query: The query to run.
            max_steps: Optional maximum number of steps to take.
            manage_connector: Whether to handle the connector lifecycle internally.
            external_history: Optional external history to use instead of the
                internal conversation history.
            track_execution: Whether to track execution for telemetry.
            output_schema: Optional Pydantic BaseModel class for structured output.
                If provided, the agent will attempt structured output at finish points
                and continue execution if required information is missing.

        Yields:
            Intermediate steps as (AgentAction, str) tuples, followed by the final result.
            If output_schema is provided, yields structured output as instance of the schema.
        """
        # Delegate to remote agent if in remote mode
        if self._is_remote and self._remote_agent:
            async for item in self._remote_agent.stream(
                query, max_steps, manage_connector, external_history, track_execution, output_schema
            ):
                yield item
            return

        result = ""
        initialized_here = False
        start_time = time.time()
        steps_taken = 0
        success = False

        # Schema-aware setup for structured output
        structured_llm = None
        schema_description = ""
        if output_schema:
            query = self._enhance_query_with_schema(query, output_schema)
            structured_llm = self.llm.with_structured_output(output_schema)
            # Get schema description for feedback
            schema_fields = []
            try:
                for field_name, field_info in output_schema.model_fields.items():
                    description = getattr(field_info, "description", "") or field_name
                    required = not hasattr(field_info, "default") or field_info.default is None
                    schema_fields.append(f"- {field_name}: {description} {'(required)' if required else '(optional)'}")

                schema_description = "\n".join(schema_fields)
            except Exception as e:
                logger.warning(f"Could not extract schema details: {e}")
                schema_description = f"Schema: {output_schema.__name__}"

        try:
            # Initialize if needed
            if manage_connector and not self._initialized:
                await self.initialize()
                initialized_here = True
            elif not self._initialized and self.auto_initialize:
                await self.initialize()
                initialized_here = True

            # Check if initialization succeeded
            if not self._agent_executor:
                raise RuntimeError("MCP agent failed to initialize")

            steps = max_steps or self.max_steps
            if self._agent_executor:
                self._agent_executor.max_iterations = steps

            display_query = query[:50].replace("\n", " ") + "..." if len(query) > 50 else query.replace("\n", " ")
            logger.info(f"💬 Received query: '{display_query}'")

            # Add the user query to conversation history if memory is enabled
            if self.memory_enabled:
                self.add_to_history(HumanMessage(content=query))

            # Use the provided history or the internal history
            history_to_use = external_history if external_history is not None else self._conversation_history

            # Convert messages to format expected by LangChain agent input
            # Exclude the main system message as it's part of the agent's prompt
            langchain_history = []
            for msg in history_to_use:
                if isinstance(msg, HumanMessage):
                    langchain_history.append(msg)
                elif isinstance(msg, AIMessage):
                    langchain_history.append(msg)

            intermediate_steps: list[tuple[AgentAction, str]] = []
            inputs = {"input": query, "chat_history": langchain_history}

            # Construct a mapping of tool name to tool for easy lookup
            name_to_tool_map = {tool.name: tool for tool in self._tools}
            color_mapping = get_color_mapping([tool.name for tool in self._tools], excluded_colors=["green", "red"])

            logger.info(f"🏁 Starting agent execution with max_steps={steps}")

            # Create a run manager with our callbacks if we have any - ONCE for the entire execution
            run_manager = None
            if self.callbacks:
                # Create an async callback manager with our callbacks
                from langchain_core.callbacks.manager import AsyncCallbackManager

                callback_manager = AsyncCallbackManager.configure(
                    inheritable_callbacks=self.callbacks,
                    local_callbacks=self.callbacks,
                )
                # Create a run manager for this chain execution
                run_manager = await callback_manager.on_chain_start(
                    {"name": "MCPAgent (mcp-use)"},
                    inputs,
                )

            for step_num in range(steps):
                steps_taken = step_num + 1
                # --- Check for tool updates if using server manager ---
                if self.use_server_manager and self.server_manager:
                    current_tools = self.server_manager.tools
                    current_tool_names = {tool.name for tool in current_tools}
                    existing_tool_names = {tool.name for tool in self._tools}

                    if current_tool_names != existing_tool_names:
                        logger.info(
                            f"🔄 Tools changed before step {step_num + 1}, updating agent."
                            f"New tools: {', '.join(current_tool_names)}"
                        )
                        self._tools = current_tools
                        # Regenerate system message with ALL current tools
                        await self._create_system_message_from_tools(self._tools)
                        # Recreate the agent executor with the new tools and system message
                        self._agent_executor = self._create_agent()
                        self._agent_executor.max_iterations = steps
                        # Update maps for this iteration
                        name_to_tool_map = {tool.name: tool for tool in self._tools}
                        color_mapping = get_color_mapping(
                            [tool.name for tool in self._tools], excluded_colors=["green", "red"]
                        )

                logger.info(f"👣 Step {step_num + 1}/{steps}")

                # --- Plan and execute the next step ---
                try:
                    retry_count = 0
                    next_step_output = None

                    while retry_count <= self.max_retries_per_step:
                        try:
                            # Use the internal _atake_next_step which handles planning and execution
                            # This requires providing the necessary context like maps and intermediate steps
                            next_step_output = await self._agent_executor._atake_next_step(
                                name_to_tool_map=name_to_tool_map,
                                color_mapping=color_mapping,
                                inputs=inputs,
                                intermediate_steps=intermediate_steps,
                                run_manager=run_manager,
                            )

                            # If we get here, the step succeeded, break out of retry loop
                            break

                        except Exception as e:
                            if not self.retry_on_error or retry_count >= self.max_retries_per_step:
                                logger.error(f"❌ Validation error during step {step_num + 1}: {e}")
                                result = f"Agent stopped due to a validation error: {str(e)}"
                                success = False
                                yield result
                                return

                            retry_count += 1
                            logger.warning(
                                f"⚠️ Validation error, retrying ({retry_count}/{self.max_retries_per_step}): {e}"
                            )

                            # Create concise feedback for the LLM about the validation error
                            error_message = f"Error: {str(e)}"
                            inputs["input"] = error_message

                            # Continue to next iteration of retry loop
                            continue

                    # Process the output
                    if isinstance(next_step_output, AgentFinish):
                        logger.info(f"✅ Agent finished at step {step_num + 1}")
                        result = next_step_output.return_values.get("output", "No output generated")
                        # End the chain if we have a run manager
                        if run_manager:
                            await run_manager.on_chain_end({"output": result})

                        # If structured output is requested, attempt to create it
                        if output_schema and structured_llm:
                            try:
                                logger.info("🔧 Attempting structured output...")
                                structured_result = await self._attempt_structured_output(
                                    result, structured_llm, output_schema, schema_description
                                )

                                # Add the final response to conversation history if memory is enabled
                                if self.memory_enabled:
                                    self.add_to_history(AIMessage(content=f"Structured result: {structured_result}"))

                                logger.info("✅ Structured output successful")
                                success = True
                                yield structured_result
                                return

                            except Exception as e:
                                logger.warning(f"⚠️ Structured output failed: {e}")
                                # Continue execution to gather missing information
                                missing_info_prompt = f"""
                                The current result cannot be formatted into the required structure.
                                Error: {str(e)}

                                Current information: {result}

                                Please continue working to gather the missing information needed for:
                                {schema_description}

                                Focus on finding the specific missing details.
                                """

                                # Add this as feedback and continue the loop
                                inputs["input"] = missing_info_prompt
                                if self.memory_enabled:
                                    self.add_to_history(HumanMessage(content=missing_info_prompt))

                                logger.info("🔄 Continuing execution to gather missing information...")
                                continue
                        else:
                            # Regular execution without structured output
                            break

                    # If it's actions/steps, add to intermediate steps and yield them
                    intermediate_steps.extend(next_step_output)

                    # Yield each step and track tool usage
                    for agent_step in next_step_output:
                        yield agent_step
                        action, observation = agent_step
                        reasoning = getattr(action, "log", "")
                        if reasoning:
                            reasoning_str = reasoning.replace("\n", " ")
                            if len(reasoning_str) > 300:
                                reasoning_str = reasoning_str[:297] + "..."
                            logger.info(f"💭 Reasoning: {reasoning_str}")
                        tool_name = action.tool
                        self.tools_used_names.append(tool_name)
                        tool_input_str = str(action.tool_input)
                        # Truncate long inputs for readability
                        if len(tool_input_str) > 100:
                            tool_input_str = tool_input_str[:97] + "..."
                        logger.info(f"🔧 Tool call: {tool_name} with input: {tool_input_str}")
                        # Truncate long outputs for readability
                        observation_str = str(observation)
                        if len(observation_str) > 100:
                            observation_str = observation_str[:97] + "..."
                        observation_str = observation_str.replace("\n", " ")
                        logger.info(f"📄 Tool result: {observation_str}")

                    # Check for return_direct on the last action taken
                    if len(next_step_output) > 0:
                        last_step: tuple[AgentAction, str] = next_step_output[-1]
                        tool_return = self._agent_executor._get_tool_return(last_step)
                        if tool_return is not None:
                            logger.info(f"🏆 Tool returned directly at step {step_num + 1}")
                            result = tool_return.return_values.get("output", "No output generated")
                            break

                except OutputParserException as e:
                    logger.error(f"❌ Output parsing error during step {step_num + 1}: {e}")
                    result = f"Agent stopped due to a parsing error: {str(e)}"
                    if run_manager:
                        await run_manager.on_chain_error(e)
                    break
                except Exception as e:
                    logger.error(f"❌ Error during agent execution step {step_num + 1}: {e}")
                    import traceback

                    traceback.print_exc()
                    # End the chain with error if we have a run manager
                    if run_manager:
                        await run_manager.on_chain_error(e)
                    result = f"Agent stopped due to an error: {str(e)}"
                    break

            # --- Loop finished ---
            if not result:
                logger.warning(f"⚠️ Agent stopped after reaching max iterations ({steps})")
                result = f"Agent stopped after reaching the maximum number of steps ({steps})."
                if run_manager:
                    await run_manager.on_chain_end({"output": result})

            # If structured output was requested but not achieved, attempt one final time
            if output_schema and structured_llm and not success:
                try:
                    logger.info("🔧 Final attempt at structured output...")
                    structured_result = await self._attempt_structured_output(
                        result, structured_llm, output_schema, schema_description
                    )

                    # Add the final response to conversation history if memory is enabled
                    if self.memory_enabled:
                        self.add_to_history(AIMessage(content=f"Structured result: {structured_result}"))

                    logger.info("✅ Final structured output successful")
                    success = True
                    yield structured_result
                    return

                except Exception as e:
                    logger.error(f"❌ Final structured output attempt failed: {e}")
                    raise RuntimeError(f"Failed to generate structured output after {steps} steps: {str(e)}") from e

            if self.memory_enabled and not output_schema:
                self.add_to_history(AIMessage(content=result))

            logger.info(f"🎉 Agent execution complete in {time.time() - start_time} seconds")
            if not success:
                success = True

            # Yield the final result (only for non-structured output)
            if not output_schema:
                yield result

        except Exception as e:
            logger.error(f"❌ Error running query: {e}")
            if initialized_here and manage_connector:
                logger.info("🧹 Cleaning up resources after initialization error in stream")
                await self.close()
            raise

        finally:
            # Track comprehensive execution data
            execution_time_ms = int((time.time() - start_time) * 1000)

            server_count = 0
            if self.client:
                server_count = len(self.client.get_all_active_sessions())
            elif self.connectors:
                server_count = len(self.connectors)

            conversation_history_length = len(self._conversation_history) if self.memory_enabled else 0

            # Safely access _tools in case initialization failed
            tools_available = getattr(self, "_tools", [])

            if track_execution:
                self.telemetry.track_agent_execution(
                    execution_method="stream",
                    query=query,
                    success=success,
                    model_provider=self._model_provider,
                    model_name=self._model_name,
                    server_count=server_count,
                    server_identifiers=[connector.public_identifier for connector in self.connectors],
                    total_tools_available=len(tools_available),
                    tools_available_names=[tool.name for tool in tools_available],
                    max_steps_configured=self.max_steps,
                    memory_enabled=self.memory_enabled,
                    use_server_manager=self.use_server_manager,
                    max_steps_used=max_steps,
                    manage_connector=manage_connector,
                    external_history_used=external_history is not None,
                    steps_taken=steps_taken,
                    tools_used_count=len(self.tools_used_names),
                    tools_used_names=self.tools_used_names,
                    response=result,
                    execution_time_ms=execution_time_ms,
                    error_type=None if success else "execution_error",
                    conversation_history_length=conversation_history_length,
                )

            # Clean up if necessary (e.g., if not using client-managed sessions)
            if manage_connector and not self.client and initialized_here:
                logger.info("🧹 Closing agent after stream completion")
                await self.close()

    async def run(
        self,
        query: str,
        max_steps: int | None = None,
        manage_connector: bool = True,
        external_history: list[BaseMessage] | None = None,
        output_schema: type[T] | None = None,
    ) -> str | T:
        """Run a query using the MCP tools and return the final result.

        This method uses the streaming implementation internally and returns
        the final result after consuming all intermediate steps. If output_schema
        is provided, the agent will be schema-aware and return structured output.

        Args:
            query: The query to run.
            max_steps: Optional maximum number of steps to take.
            manage_connector: Whether to handle the connector lifecycle internally.
                If True, this method will connect, initialize, and disconnect from
                the connector automatically. If False, the caller is responsible
                for managing the connector lifecycle.
            external_history: Optional external history to use instead of the
                internal conversation history.
            output_schema: Optional Pydantic BaseModel class for structured output.
                If provided, the agent will attempt to return an instance of this model.

        Returns:
            The result of running the query as a string, or if output_schema is provided,
            an instance of the specified Pydantic model.

        Example:
            ```python
            # Regular usage
            result = await agent.run("What's the weather like?")

            # Structured output usage
            from pydantic import BaseModel, Field

            class WeatherInfo(BaseModel):
                temperature: float = Field(description="Temperature in Celsius")
                condition: str = Field(description="Weather condition")

            weather: WeatherInfo = await agent.run(
                "What's the weather like?",
                output_schema=WeatherInfo
            )
            ```
        """
        # Delegate to remote agent if in remote mode
        if self._is_remote and self._remote_agent:
            result = await self._remote_agent.run(query, max_steps, external_history, output_schema)
            return result

        success = True
        start_time = time.time()

        generator = self.stream(
            query, max_steps, manage_connector, external_history, track_execution=False, output_schema=output_schema
        )
        error = None
        steps_taken = 0
        result = None
        try:
            result, steps_taken = await self._consume_and_return(generator)

        except Exception as e:
            success = False
            error = str(e)
            logger.error(f"❌ Error during agent execution: {e}")
            raise
        finally:
            self.telemetry.track_agent_execution(
                execution_method="run",
                query=query,
                success=success,
                model_provider=self._model_provider,
                model_name=self._model_name,
                server_count=len(self.client.get_all_active_sessions()) if self.client else len(self.connectors),
                server_identifiers=[connector.public_identifier for connector in self.connectors],
                total_tools_available=len(self._tools) if self._tools else 0,
                tools_available_names=[tool.name for tool in self._tools],
                max_steps_configured=self.max_steps,
                memory_enabled=self.memory_enabled,
                use_server_manager=self.use_server_manager,
                max_steps_used=max_steps,
                manage_connector=manage_connector,
                external_history_used=external_history is not None,
                steps_taken=steps_taken,
                tools_used_count=len(self.tools_used_names),
                tools_used_names=self.tools_used_names,
                response=str(result),
                execution_time_ms=int((time.time() - start_time) * 1000),
                error_type=error,
                conversation_history_length=len(self._conversation_history),
            )
        return result

    async def _attempt_structured_output(
        self, raw_result: str, structured_llm, output_schema: type[T], schema_description: str
    ) -> T:
        """Attempt to create structured output from raw result with validation."""
        format_prompt = f"""
        Please format the following information according to the specified schema.
        Extract and structure the relevant information from the content below.

        Required schema fields:
        {schema_description}

        Content to format:
        {raw_result}

        Please provide the information in the requested structured format.
        If any required information is missing, you must indicate this clearly.
        """

        structured_result = await structured_llm.ainvoke(format_prompt)

        try:
            for field_name, field_info in output_schema.model_fields.items():
                required = not hasattr(field_info, "default") or field_info.default is None
                if required:
                    value = getattr(structured_result, field_name, None)
                    if value is None or (isinstance(value, str) and not value.strip()):
                        raise ValueError(f"Required field '{field_name}' is missing or empty")
                    if isinstance(value, list) and len(value) == 0:
                        raise ValueError(f"Required field '{field_name}' is an empty list")
        except Exception as e:
            logger.debug(f"Validation details: {e}")
            raise  # Re-raise to trigger retry logic

        return structured_result

    def _enhance_query_with_schema(self, query: str, output_schema: type[T]) -> str:
        """Enhance the query with schema information to make the agent aware of required fields."""
        schema_fields = []

        try:
            for field_name, field_info in output_schema.model_fields.items():
                description = getattr(field_info, "description", "") or field_name
                required = not hasattr(field_info, "default") or field_info.default is None
                schema_fields.append(f"- {field_name}: {description} {'(required)' if required else '(optional)'}")

            schema_description = "\n".join(schema_fields)
        except Exception as e:
            logger.warning(f"Could not extract schema details: {e}")
            schema_description = f"Schema: {output_schema.__name__}"

        # Enhance the query with schema awareness
        enhanced_query = f"""
        {query}

        IMPORTANT: Your response must include sufficient information to populate the following structured output:

        {schema_description}

        Make sure you gather ALL the required information during your task execution.
        If any required information is missing, continue working to find it.
        """

        return enhanced_query

    async def _generate_response_chunks_async(
        self,
        query: str,
        max_steps: int | None = None,
        manage_connector: bool = True,
        external_history: list[BaseMessage] | None = None,
    ) -> AsyncIterator[StreamEvent]:
        """Internal async generator yielding response chunks.

        The implementation purposefully keeps the logic compact:
        1. Ensure the agent is initialised (optionally handling connector
           lifecycle).
        2. Forward the *same* inputs we use for ``run`` to LangChain's
           ``AgentExecutor.astream``.
        3. Diff the growing ``output`` field coming from LangChain and yield
           only the new part so the caller receives *incremental* chunks.
        4. Persist conversation history when memory is enabled.
        """

        # 1. Initialise on-demand ------------------------------------------------
        initialised_here = False
        if (manage_connector and not self._initialized) or (not self._initialized and self.auto_initialize):
            await self.initialize()
            initialised_here = True

        if not self._agent_executor:
            raise RuntimeError("MCP agent failed to initialise – call initialise() first?")

        # 2. Build inputs --------------------------------------------------------
        effective_max_steps = max_steps or self.max_steps
        self._agent_executor.max_iterations = effective_max_steps

        if self.memory_enabled:
            self.add_to_history(HumanMessage(content=query))

        history_to_use = external_history if external_history is not None else self._conversation_history
        inputs = {"input": query, "chat_history": history_to_use}

        # 3. Stream & diff -------------------------------------------------------
        async for event in self._agent_executor.astream_events(inputs):
            if event.get("event") == "on_chain_end":
                output = event["data"]["output"]
                if isinstance(output, list):
                    for message in output:
                        if not isinstance(message, ToolAgentAction):
                            self.add_to_history(message)
            yield event
        # 5. House-keeping -------------------------------------------------------
        # Restrict agent cleanup in _generate_response_chunks_async to only occur
        #  when the agent was initialized in this generator and is not client-managed
        #  and the user does want us to manage the connection.
        if not self.client and initialised_here and manage_connector:
            logger.info("🧹 Closing agent after generator completion")
            await self.close()

    async def stream_events(
        self,
        query: str,
        max_steps: int | None = None,
        manage_connector: bool = True,
        external_history: list[BaseMessage] | None = None,
    ) -> AsyncIterator[str]:
        """Asynchronous streaming interface.

        Example::

            async for chunk in agent.astream("hello"):
                print(chunk, end="|", flush=True)
        """
        start_time = time.time()
        success = False
        chunk_count = 0
        total_response_length = 0

        try:
            async for chunk in self._generate_response_chunks_async(
                query=query,
                max_steps=max_steps,
                manage_connector=manage_connector,
                external_history=external_history,
            ):
                chunk_count += 1
                if isinstance(chunk, str):
                    total_response_length += len(chunk)
                yield chunk
            success = True
        finally:
            # Track comprehensive execution data for streaming
            execution_time_ms = int((time.time() - start_time) * 1000)

            server_count = 0
            if self.client:
                server_count = len(self.client.get_all_active_sessions())
            elif self.connectors:
                server_count = len(self.connectors)

            conversation_history_length = len(self._conversation_history) if self.memory_enabled else 0

            self.telemetry.track_agent_execution(
                execution_method="stream_events",
                query=query,
                success=success,
                model_provider=self._model_provider,
                model_name=self._model_name,
                server_count=server_count,
                server_identifiers=[connector.public_identifier for connector in self.connectors],
                total_tools_available=len(self._tools) if self._tools else 0,
                tools_available_names=[tool.name for tool in self._tools],
                max_steps_configured=self.max_steps,
                memory_enabled=self.memory_enabled,
                use_server_manager=self.use_server_manager,
                max_steps_used=max_steps,
                manage_connector=manage_connector,
                external_history_used=external_history is not None,
                response=f"[STREAMED RESPONSE - {total_response_length} chars]",
                execution_time_ms=execution_time_ms,
                error_type=None if success else "streaming_error",
                conversation_history_length=conversation_history_length,
            )

    async def close(self) -> None:
        """Close the MCP connection with improved error handling."""
        # Delegate to remote agent if in remote mode
        if self._is_remote and self._remote_agent:
            await self._remote_agent.close()
            return

        logger.info("🔌 Closing agent and cleaning up resources...")
        try:
            # Clean up the agent first
            self._agent_executor = None
            self._tools = []

            # If using client with session, close the session through client
            if self.client:
                logger.info("🔄 Closing sessions through client")
                await self.client.close_all_sessions()
                if hasattr(self, "_sessions"):
                    self._sessions = {}
            # If using direct connector, disconnect
            elif self.connectors:
                for connector in self.connectors:
                    logger.info("🔄 Disconnecting connector")
                    await connector.disconnect()

            # Clear adapter tool cache
            if hasattr(self.adapter, "_connector_tool_map"):
                self.adapter._connector_tool_map = {}

            self._initialized = False
            logger.info("👋 Agent closed successfully")

        except Exception as e:
            logger.error(f"❌ Error during agent closure: {e}")
            # Still try to clean up references even if there was an error
            self._agent_executor = None
            if hasattr(self, "_tools"):
                self._tools = []
            if hasattr(self, "_sessions"):
                self._sessions = {}
            self._initialized = False



================================================
FILE: mcp_use/agents/remote.py
================================================
"""
Remote agent implementation for executing agents via API.
"""

import json
import os
from typing import Any, TypeVar
from uuid import UUID

import httpx
from langchain.schema import BaseMessage
from pydantic import BaseModel

from ..logging import logger

T = TypeVar("T", bound=BaseModel)

# API endpoint constants
API_CHATS_ENDPOINT = "/api/v1/chats/get-or-create"
API_CHAT_EXECUTE_ENDPOINT = "/api/v1/chats/{chat_id}/execute"
API_CHAT_DELETE_ENDPOINT = "/api/v1/chats/{chat_id}"

UUID_ERROR_MESSAGE = """A UUID is a 36 character string of the format xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx \n
Example: 123e4567-e89b-12d3-a456-426614174000
To generate a UUID, you can use the following command:
import uuid

# Generate a random UUID
my_uuid = uuid.uuid4()
print(my_uuid)
"""


class RemoteAgent:
    """Agent that executes remotely via API."""

    def __init__(
        self,
        agent_id: str,
        chat_id: str | None = None,
        api_key: str | None = None,
        base_url: str = "https://cloud.mcp-use.com",
    ):
        """Initialize remote agent.

        Args:
            agent_id: The ID of the remote agent to execute
            chat_id: The ID of the chat session to use. If None, a new chat session will be created.
            api_key: API key for authentication. If None, will check MCP_USE_API_KEY env var
            base_url: Base URL for the remote API
        """

        if chat_id is not None:
            try:
                chat_id = str(UUID(chat_id))
            except ValueError as e:
                raise ValueError(
                    f"Invalid chat ID: {chat_id}, make sure to provide a valid UUID.\n{UUID_ERROR_MESSAGE}"
                ) from e

        self.agent_id = agent_id
        self.chat_id = chat_id
        self._session_established = False
        self.base_url = base_url

        # Handle API key validation
        if api_key is None:
            api_key = os.getenv("MCP_USE_API_KEY")
        if not api_key:
            raise ValueError(
                "API key is required for remote execution. "
                "Please provide it as a parameter or set the MCP_USE_API_KEY environment variable. "
                "You can get an API key from https://cloud.mcp-use.com"
            )

        self.api_key = api_key
        # Configure client with reasonable timeouts for agent execution
        self._client = httpx.AsyncClient(
            timeout=httpx.Timeout(
                connect=10.0,  # 10 seconds to establish connection
                read=300.0,  # 5 minutes to read response (agents can take time)
                write=10.0,  # 10 seconds to send request
                pool=10.0,  # 10 seconds to get connection from pool
            )
        )

    def _pydantic_to_json_schema(self, model_class: type[T]) -> dict[str, Any]:
        """Convert a Pydantic model to JSON schema for API transmission.

        Args:
            model_class: The Pydantic model class to convert

        Returns:
            JSON schema representation of the model
        """
        return model_class.model_json_schema()

    def _parse_structured_response(self, response_data: Any, output_schema: type[T]) -> T:
        """Parse the API response into the structured output format.

        Args:
            response_data: Raw response data from the API
            output_schema: The Pydantic model to parse into

        Returns:
            Parsed structured output
        """
        # Handle different response formats
        if isinstance(response_data, dict):
            if "result" in response_data:
                outer_result = response_data["result"]
                # Check if this is a nested result structure (agent execution response)
                if isinstance(outer_result, dict) and "result" in outer_result:
                    # Extract the actual structured output from the nested result
                    result_data = outer_result["result"]
                else:
                    # Use the outer result directly
                    result_data = outer_result
            else:
                result_data = response_data
        elif isinstance(response_data, str):
            try:
                result_data = json.loads(response_data)
            except json.JSONDecodeError:
                # If it's not valid JSON, try to create the model from the string content
                result_data = {"content": response_data}
        else:
            result_data = response_data

        # Parse into the Pydantic model
        try:
            return output_schema.model_validate(result_data)
        except Exception as e:
            logger.warning(f"Failed to parse structured output: {e}")
            # Fallback: try to parse it as raw content if the model has a content field
            if hasattr(output_schema, "model_fields") and "content" in output_schema.model_fields:
                return output_schema.model_validate({"content": str(result_data)})
            raise

    async def _upsert_chat_session(self) -> str:
        """Create or resume a persistent chat session for the agent via upsert.

        Returns:
            The chat session ID
        """
        chat_payload = {
            "id": self.chat_id,  # Include chat_id for resuming or None for creating
            "title": f"Remote Agent Session - {self.agent_id}",
            "agent_id": self.agent_id,
            "type": "agent_execution",
        }

        headers = {"Content-Type": "application/json", "x-api-key": self.api_key}
        chat_url = f"{self.base_url}{API_CHATS_ENDPOINT}"

        logger.info(f"📝 Upserting chat session for agent {self.agent_id}")

        try:
            chat_response = await self._client.post(chat_url, json=chat_payload, headers=headers)
            chat_response.raise_for_status()

            chat_data = chat_response.json()
            chat_id = chat_data["id"]
            if chat_response.status_code == 201:
                logger.info(f"✅ New chat session created: {chat_id}")
            else:
                logger.info(f"✅ Resumed chat session: {chat_id}")

            return chat_id

        except httpx.HTTPStatusError as e:
            status_code = e.response.status_code
            response_text = e.response.text

            if status_code == 404:
                raise RuntimeError(
                    f"Agent not found: Agent '{self.agent_id}' does not exist or you don't have access to it. "
                    "Please verify the agent ID and ensure it exists in your account."
                ) from e
            else:
                raise RuntimeError(f"Failed to create chat session: {status_code} - {response_text}") from e
        except Exception as e:
            raise RuntimeError(f"Failed to create chat session: {str(e)}") from e

    async def run(
        self,
        query: str,
        max_steps: int | None = None,
        external_history: list[BaseMessage] | None = None,
        output_schema: type[T] | None = None,
    ) -> str | T:
        """Run a query on the remote agent.

        Args:
            query: The query to execute
            max_steps: Maximum number of steps (default: 10)
            external_history: External history (not supported yet for remote execution)
            output_schema: Optional Pydantic model for structured output

        Returns:
            The result from the remote agent execution (string or structured output)
        """
        if external_history is not None:
            logger.warning("External history is not yet supported for remote execution")

        try:
            logger.info(f"🌐 Executing query on remote agent {self.agent_id}")

            # Step 1: Ensure chat session exists on the backend by upserting.
            # This happens once per agent instance.
            if not self._session_established:
                logger.info(f"🔧 Establishing chat session for agent {self.agent_id}")
                self.chat_id = await self._upsert_chat_session()
                self._session_established = True

            chat_id = self.chat_id

            # Step 2: Execute the agent within the chat context
            execution_payload = {"query": query, "max_steps": max_steps or 10}

            # Add structured output schema if provided
            if output_schema is not None:
                execution_payload["output_schema"] = self._pydantic_to_json_schema(output_schema)
                logger.info(f"🔧 Using structured output with schema: {output_schema.__name__}")

            headers = {"Content-Type": "application/json", "x-api-key": self.api_key}
            execution_url = f"{self.base_url}{API_CHAT_EXECUTE_ENDPOINT.format(chat_id=chat_id)}"
            logger.info(f"🚀 Executing agent in chat {chat_id}")

            response = await self._client.post(execution_url, json=execution_payload, headers=headers)
            response.raise_for_status()

            result = response.json()
            logger.info(f"🔧 Response: {result}")
            logger.info("✅ Remote execution completed successfully")

            # Check for error responses (even with 200 status)
            if isinstance(result, dict):
                # Check for actual error conditions (not just presence of error field)
                if result.get("status") == "error" or (result.get("error") is not None):
                    error_msg = result.get("error", str(result))
                    logger.error(f"❌ Remote agent execution failed: {error_msg}")
                    raise RuntimeError(f"Remote agent execution failed: {error_msg}")

                # Check if the response indicates agent initialization failure
                if "failed to initialize" in str(result):
                    logger.error(f"❌ Agent initialization failed: {result}")
                    raise RuntimeError(
                        f"Agent initialization failed on remote server. "
                        f"This usually indicates:\n"
                        f"• Invalid agent configuration (LLM model, system prompt)\n"
                        f"• Missing or invalid MCP server configurations\n"
                        f"• Network connectivity issues with MCP servers\n"
                        f"• Missing environment variables or credentials\n"
                        f"Raw error: {result}"
                    )

            # Handle structured output
            if output_schema is not None:
                return self._parse_structured_response(result, output_schema)

            # Regular string output
            if isinstance(result, dict) and "result" in result:
                return result["result"]
            elif isinstance(result, str):
                return result
            else:
                return str(result)

        except httpx.HTTPStatusError as e:
            status_code = e.response.status_code
            response_text = e.response.text

            # Provide specific error messages based on status code
            if status_code == 401:
                logger.error(f"❌ Authentication failed: {response_text}")
                raise RuntimeError(
                    "Authentication failed: Invalid or missing API key. "
                    "Please check your API key and ensure the MCP_USE_API_KEY environment variable is set correctly."
                ) from e
            elif status_code == 403:
                logger.error(f"❌ Access forbidden: {response_text}")
                raise RuntimeError(
                    f"Access denied: You don't have permission to execute agent '{self.agent_id}'. "
                    "Check if the agent exists and you have the necessary permissions."
                ) from e
            elif status_code == 404:
                logger.error(f"❌ Agent not found: {response_text}")
                raise RuntimeError(
                    f"Agent not found: Agent '{self.agent_id}' does not exist or you don't have access to it. "
                    "Please verify the agent ID and ensure it exists in your account."
                ) from e
            elif status_code == 422:
                logger.error(f"❌ Validation error: {response_text}")
                raise RuntimeError(
                    f"Request validation failed: {response_text}. "
                    "Please check your query parameters and output schema format."
                ) from e
            elif status_code == 500:
                logger.error(f"❌ Server error: {response_text}")
                raise RuntimeError(
                    "Internal server error occurred during agent execution. "
                    "Please try again later or contact support if the issue persists."
                ) from e
            else:
                logger.error(f"❌ Remote execution failed with status {status_code}: {response_text}")
                raise RuntimeError(f"Remote agent execution failed: {status_code} - {response_text}") from e
        except httpx.TimeoutException as e:
            logger.error(f"❌ Remote execution timed out: {e}")
            raise RuntimeError(
                "Remote agent execution timed out. The server may be overloaded or the query is taking too long to "
                "process. Try again or use a simpler query."
            ) from e
        except httpx.ConnectError as e:
            logger.error(f"❌ Remote execution connection error: {e}")
            raise RuntimeError(
                f"Remote agent connection failed: Cannot connect to {self.base_url}. "
                f"Check if the server is running and the URL is correct."
            ) from e
        except Exception as e:
            logger.error(f"❌ Remote execution error: {e}")
            raise RuntimeError(f"Remote agent execution failed: {str(e)}") from e

    async def close(self) -> None:
        """Close the HTTP client."""
        await self._client.aclose()
        logger.info("🔌 Remote agent client closed")



================================================
FILE: mcp_use/agents/prompts/system_prompt_builder.py
================================================
from langchain.schema import SystemMessage
from langchain_core.tools import BaseTool


def generate_tool_descriptions(tools: list[BaseTool], disallowed_tools: list[str] | None = None) -> list[str]:
    """
    Generates a list of formatted tool descriptions, excluding disallowed tools.

    Args:
        tools: The list of available BaseTool objects.
        disallowed_tools: A list of tool names to exclude.

    Returns:
        A list of strings, each describing a tool in the format "- tool_name: description".
    """
    disallowed_set = set(disallowed_tools or [])
    tool_descriptions_list = []
    for tool in tools:
        if tool.name in disallowed_set:
            continue
        # Escape curly braces for formatting
        escaped_desc = tool.description.replace("{", "{{").replace("}", "}}")
        description = f"- {tool.name}: {escaped_desc}"
        tool_descriptions_list.append(description)
    return tool_descriptions_list


def build_system_prompt_content(
    template: str, tool_description_lines: list[str], additional_instructions: str | None = None
) -> str:
    """
    Builds the final system prompt string using a template, tool descriptions,
    and optional additional instructions.

    Args:
        template: The system prompt template string (must contain '{tool_descriptions}').
        tool_description_lines: A list of formatted tool description strings.
        additional_instructions: Optional extra instructions to append.

    Returns:
        The fully formatted system prompt content string.
    """
    tool_descriptions_block = "\n".join(tool_description_lines)
    # Add a check for missing placeholder to prevent errors
    if "{tool_descriptions}" not in template:
        # Handle this case: maybe append descriptions at the end or raise an error
        # For now, let's append if placeholder is missing
        print("Warning: '{tool_descriptions}' placeholder not found in template.")
        system_prompt_content = template + "\n\nAvailable tools:\n" + tool_descriptions_block
    else:
        system_prompt_content = template.format(tool_descriptions=tool_descriptions_block)

    if additional_instructions:
        system_prompt_content += f"\n\n{additional_instructions}"

    return system_prompt_content


def create_system_message(
    tools: list[BaseTool],
    system_prompt_template: str,
    server_manager_template: str,
    use_server_manager: bool,
    disallowed_tools: list[str] | None = None,
    user_provided_prompt: str | None = None,
    additional_instructions: str | None = None,
) -> SystemMessage:
    """
    Creates the final SystemMessage object for the agent.

    Handles selecting the correct template, generating tool descriptions,
    and incorporating user overrides and additional instructions.

    Args:
        tools: List of available tools.
        system_prompt_template: The default system prompt template.
        server_manager_template: The template to use when server manager is active.
        use_server_manager: Flag indicating if server manager mode is enabled.
        disallowed_tools: List of tool names to exclude.
        user_provided_prompt: A complete system prompt provided by the user, overriding templates.
        additional_instructions: Extra instructions to append to the template-based prompt.

    Returns:
        A SystemMessage object containing the final prompt content.
    """
    # If a complete user prompt is given, use it directly
    if user_provided_prompt:
        return SystemMessage(content=user_provided_prompt)

    # Select the appropriate template
    template_to_use = server_manager_template if use_server_manager else system_prompt_template

    # Generate tool descriptions
    tool_description_lines = generate_tool_descriptions(tools, disallowed_tools)

    # Build the final prompt content
    final_prompt_content = build_system_prompt_content(
        template=template_to_use,
        tool_description_lines=tool_description_lines,
        additional_instructions=additional_instructions,
    )

    return SystemMessage(content=final_prompt_content)



================================================
FILE: mcp_use/agents/prompts/templates.py
================================================
# mcp_use/agents/prompts/templates.py

DEFAULT_SYSTEM_PROMPT_TEMPLATE = """You are a helpful AI assistant.
You have access to the following tools:

{tool_descriptions}

Use the following format:

Question: the input question you must answer
Thought: you should always think about what to do
Action: the action to take, should be one of the available tools
Action Input: the input to the action
Observation: the result of the action
... (this Thought/Action/Action Input/Observation can repeat N times)
Thought: I now know the final answer
Final Answer: the final answer to the original input question"""


SERVER_MANAGER_SYSTEM_PROMPT_TEMPLATE = """You are a helpful assistant designed
to interact with MCP (Model Context Protocol) servers. You can manage connections
 to different servers and use the tools provided by the currently active server.

Important: The available tools change dynamically based on which server is active.

- When you connect to a server using 'connect_to_mcp_server', that server's tools are automatically added to
your available tools with their full schemas
- When you disconnect using 'disconnect_from_mcp_server', the server's tools are removed from your available tools
- The tool list below will automatically update when you connect/disconnect from servers

If a request requires tools not currently listed below (e.g., file operations, web browsing, image manipulation),
you MUST first connect to the appropriate server using 'connect_to_mcp_server'. Use 'list_mcp_servers' to find
available servers if you are unsure which one to connect to.

After connecting to a server, you can immediately use its tools - they will be directly available to you with their
proper schemas and validation. No additional steps are needed.

Here are the tools currently available to you (this list dynamically updates when
connecting/disconnecting from servers):
{tool_descriptions}
"""



================================================
FILE: mcp_use/connectors/__init__.py
================================================
"""
Connectors for various MCP transports.

This module provides interfaces for connecting to MCP implementations
through different transport mechanisms.
"""

from .base import BaseConnector  # noqa: F401
from .http import HttpConnector  # noqa: F401
from .sandbox import SandboxConnector  # noqa: F401
from .stdio import StdioConnector  # noqa: F401
from .websocket import WebSocketConnector  # noqa: F401

__all__ = [
    "BaseConnector",
    "StdioConnector",
    "HttpConnector",
    "WebSocketConnector",
    "SandboxConnector",
]



================================================
FILE: mcp_use/connectors/base.py
================================================
"""
Base connector for MCP implementations.

This module provides the base connector interface that all MCP connectors
must implement.
"""

import warnings
from abc import ABC, abstractmethod
from datetime import timedelta
from typing import Any

from mcp import ClientSession, Implementation
from mcp.client.session import ElicitationFnT, LoggingFnT, MessageHandlerFnT, SamplingFnT
from mcp.shared.exceptions import McpError
from mcp.types import (
    CallToolResult,
    GetPromptResult,
    Prompt,
    PromptListChangedNotification,
    ReadResourceResult,
    Resource,
    ResourceListChangedNotification,
    ServerCapabilities,
    ServerNotification,
    Tool,
    ToolListChangedNotification,
)
from pydantic import AnyUrl

import mcp_use

from ..logging import logger
from ..task_managers import ConnectionManager


class BaseConnector(ABC):
    """Base class for MCP connectors.

    This class defines the interface that all MCP connectors must implement.
    """

    def __init__(
        self,
        sampling_callback: SamplingFnT | None = None,
        elicitation_callback: ElicitationFnT | None = None,
        message_handler: MessageHandlerFnT | None = None,
        logging_callback: LoggingFnT | None = None,
    ):
        """Initialize base connector with common attributes."""
        self.client_session: ClientSession | None = None
        self._connection_manager: ConnectionManager | None = None
        self._tools: list[Tool] | None = None
        self._resources: list[Resource] | None = None
        self._prompts: list[Prompt] | None = None
        self._connected = False
        self._initialized = False  # Track if client_session.initialize() has been called
        self.auto_reconnect = True  # Whether to automatically reconnect on connection loss (not configurable for now)
        self.sampling_callback = sampling_callback
        self.elicitation_callback = elicitation_callback
        self.message_handler = message_handler
        self.logging_callback = logging_callback
        self.capabilities: ServerCapabilities | None = None

    @property
    def client_info(self) -> Implementation:
        """Get the client info for the connector."""
        return Implementation(
            name="mcp-use",
            version=mcp_use.__version__,
            url="https://github.com/mcp-use/mcp-use",
        )

    async def _internal_message_handler(self, message: Any) -> None:
        """Wrap the user-provided message handler."""
        if isinstance(message, ServerNotification):
            if isinstance(message.root, ToolListChangedNotification):
                logger.debug("Received tool list changed notification")
            elif isinstance(message.root, ResourceListChangedNotification):
                logger.debug("Received resource list changed notification")
            elif isinstance(message.root, PromptListChangedNotification):
                logger.debug("Received prompt list changed notification")

        # Call the user's handler
        if self.message_handler:
            await self.message_handler(message)

    @abstractmethod
    async def connect(self) -> None:
        """Establish a connection to the MCP implementation."""
        pass

    @property
    @abstractmethod
    def public_identifier(self) -> str:
        """Get the identifier for the connector."""
        pass

    async def disconnect(self) -> None:
        """Close the connection to the MCP implementation."""
        if not self._connected:
            logger.debug("Not connected to MCP implementation")
            return

        logger.debug("Disconnecting from MCP implementation")
        await self._cleanup_resources()
        self._connected = False
        logger.debug("Disconnected from MCP implementation")

    async def _cleanup_resources(self) -> None:
        """Clean up all resources associated with this connector."""
        errors = []

        # First close the client session
        if self.client_session:
            try:
                logger.debug("Closing client session")
                await self.client_session.__aexit__(None, None, None)
            except Exception as e:
                error_msg = f"Error closing client session: {e}"
                logger.warning(error_msg)
                errors.append(error_msg)
            finally:
                self.client_session = None

        # Then stop the connection manager
        if self._connection_manager:
            try:
                logger.debug("Stopping connection manager")
                await self._connection_manager.stop()
            except Exception as e:
                error_msg = f"Error stopping connection manager: {e}"
                logger.warning(error_msg)
                errors.append(error_msg)
            finally:
                self._connection_manager = None

        # Reset tools
        self._tools = None
        self._resources = None
        self._prompts = None
        self._initialized = False  # Reset initialization flag

        if errors:
            logger.warning(f"Encountered {len(errors)} errors during resource cleanup")

    async def initialize(self) -> dict[str, Any]:
        """Initialize the MCP session and return session information."""
        if not self.client_session:
            raise RuntimeError("MCP client is not connected")

        # Check if already initialized
        if self._initialized:
            return {"status": "already_initialized"}

        # Initialize the session
        result = await self.client_session.initialize()
        self._initialized = True  # Mark as initialized

        self.capabilities = result.capabilities

        if self.capabilities.tools:
            # Get available tools directly from client session
            try:
                tools_result = await self.client_session.list_tools()
                self._tools = tools_result.tools if tools_result else []
            except Exception as e:
                logger.error(f"Error listing tools for connector {self.public_identifier}: {e}")
                self._tools = []
        else:
            self._tools = []

        if self.capabilities.resources:
            # Get available resources directly from client session
            try:
                resources_result = await self.client_session.list_resources()
                self._resources = resources_result.resources if resources_result else []
            except Exception as e:
                logger.error(f"Error listing resources for connector {self.public_identifier}: {e}")
                self._resources = []
        else:
            self._resources = []

        if self.capabilities.prompts:
            # Get available prompts directly from client session
            try:
                prompts_result = await self.client_session.list_prompts()
                self._prompts = prompts_result.prompts if prompts_result else []
            except Exception as e:
                logger.error(f"Error listing prompts for connector {self.public_identifier}: {e}")
                self._prompts = []
        else:
            self._prompts = []

        logger.debug(
            f"MCP session initialized with {len(self._tools)} tools, "
            f"{len(self._resources)} resources, "
            f"and {len(self._prompts)} prompts"
        )

        return result

    @property
    def tools(self) -> list[Tool]:
        """Get the list of available tools.

        .. deprecated::
            This property is deprecated because it may return stale data when the server
            sends list change notifications. Use `await list_tools()` instead to ensure
            you always get the latest data.
        """
        warnings.warn(
            "The 'tools' property is deprecated and may return stale data. "
            "Use 'await list_tools()' instead to ensure fresh data.",
            DeprecationWarning,
            stacklevel=2,
        )
        if self._tools is None:
            raise RuntimeError("MCP client is not initialized")
        return self._tools

    @property
    def resources(self) -> list[Resource]:
        """Get the list of available resources.

        .. deprecated::
            This property is deprecated because it may return stale data when the server
            sends list change notifications. Use `await list_resources()` instead to ensure
            you always get the latest data.
        """
        warnings.warn(
            "The 'resources' property is deprecated and may return stale data. "
            "Use 'await list_resources()' instead to ensure fresh data.",
            DeprecationWarning,
            stacklevel=2,
        )
        if self._resources is None:
            raise RuntimeError("MCP client is not initialized")
        return self._resources

    @property
    def prompts(self) -> list[Prompt]:
        """Get the list of available prompts.

        .. deprecated::
            This property is deprecated because it may return stale data when the server
            sends list change notifications. Use `await list_prompts()' instead to ensure
            you always get the latest data.
        """
        warnings.warn(
            "The 'prompts' property is deprecated and may return stale data. "
            "Use 'await list_prompts()' instead to ensure fresh data.",
            DeprecationWarning,
            stacklevel=2,
        )
        if self._prompts is None:
            raise RuntimeError("MCP client is not initialized")
        return self._prompts

    @property
    def is_connected(self) -> bool:
        """Check if the connector is actually connected and the connection is alive.

        This property checks not only the connected flag but also verifies that
        the underlying connection manager and streams are still active.

        Returns:
            True if the connector is connected and the connection is alive, False otherwise.
        """

        # Check if we have a client session
        if not self.client_session:
            # Update the connected flag since we don't have a client session
            self._connected = False
            return False

        # First check the basic connected flag
        if not self._connected:
            return False

        # Check if we have a connection manager and if its task is still running
        if self._connection_manager:
            try:
                # Check if the connection manager task is done (indicates disconnection)
                if hasattr(self._connection_manager, "_task") and self._connection_manager._task:
                    if self._connection_manager._task.done():
                        logger.debug("Connection manager task is done, marking as disconnected")
                        self._connected = False
                        return False

                # For HTTP-based connectors, also check if streams are still open
                # Use the get_streams method to get the current connection
                streams = self._connection_manager.get_streams()
                if streams:
                    # Connection should be a tuple of (read_stream, write_stream)
                    if isinstance(streams, tuple) and len(streams) == 2:
                        read_stream, write_stream = streams
                        # Check if streams are closed using getattr with default value
                        if getattr(read_stream, "_closed", False):
                            logger.debug("Read stream is closed, marking as disconnected")
                            self._connected = False
                            return False
                        if getattr(write_stream, "_closed", False):
                            logger.debug("Write stream is closed, marking as disconnected")
                            self._connected = False
                            return False

            except Exception as e:
                # If we can't check the connection state, assume disconnected for safety
                logger.debug(f"Error checking connection state: {e}, marking as disconnected")
                self._connected = False
                return False

        return True

    async def _ensure_connected(self) -> None:
        """Ensure the connector is connected, reconnecting if necessary.

        Raises:
            RuntimeError: If connection cannot be established and auto_reconnect is False.
        """
        if not self.client_session:
            raise RuntimeError("MCP client is not connected")

        if not self.is_connected:
            if self.auto_reconnect:
                logger.debug("Connection lost, attempting to reconnect...")
                try:
                    await self.connect()
                    logger.debug("Reconnection successful")
                except Exception as e:
                    raise RuntimeError(f"Failed to reconnect to MCP server: {e}") from e
            else:
                raise RuntimeError(
                    "Connection to MCP server has been lost. Auto-reconnection is disabled. Please reconnect manually."
                )

    async def call_tool(
        self, name: str, arguments: dict[str, Any], read_timeout_seconds: timedelta | None = None
    ) -> CallToolResult:
        """Call an MCP tool with automatic reconnection handling.

        Args:
            name: The name of the tool to call.
            arguments: The arguments to pass to the tool.
            read_timeout_seconds: timeout seconds when calling tool

        Returns:
            The result of the tool call.

        Raises:
            RuntimeError: If the connection is lost and cannot be reestablished.
        """

        # Ensure we're connected
        await self._ensure_connected()

        logger.debug(f"Calling tool '{name}' with arguments: {arguments}")
        try:
            result = await self.client_session.call_tool(name, arguments, read_timeout_seconds)
            logger.debug(f"Tool '{name}' called with result: {result}")
            return result
        except Exception as e:
            # Check if the error might be due to connection loss
            if not self.is_connected:
                raise RuntimeError(f"Tool call '{name}' failed due to connection loss: {e}") from e
            else:
                # Re-raise the original error if it's not connection-related
                raise

    async def list_tools(self) -> list[Tool]:
        """List all available tools from the MCP implementation."""

        if self.capabilities and not self.capabilities.tools:
            logger.debug(f"Server {self.public_identifier} does not support tools")
            return []

        # Ensure we're connected
        await self._ensure_connected()

        logger.debug("Listing tools")
        try:
            result = await self.client_session.list_tools()
            self._tools = result.tools
            return result.tools
        except McpError as e:
            logger.error(f"Error listing tools for connector {self.public_identifier}: {e}")
            return []

    async def list_resources(self) -> list[Resource]:
        """List all available resources from the MCP implementation."""

        if self.capabilities and not self.capabilities.resources:
            logger.debug(f"Server {self.public_identifier} does not support resources")
            return []

        # Ensure we're connected
        await self._ensure_connected()

        logger.debug("Listing resources")
        try:
            result = await self.client_session.list_resources()
            self._resources = result.resources
            return result.resources
        except McpError as e:
            logger.warning(f"Error listing resources for connector {self.public_identifier}: {e}")
            return []

    async def read_resource(self, uri: AnyUrl) -> ReadResourceResult:
        """Read a resource by URI."""
        await self._ensure_connected()

        logger.debug(f"Reading resource: {uri}")
        result = await self.client_session.read_resource(uri)
        return result

    async def list_prompts(self) -> list[Prompt]:
        """List all available prompts from the MCP implementation."""

        if self.capabilities and not self.capabilities.prompts:
            logger.debug(f"Server {self.public_identifier} does not support prompts")
            return []

        await self._ensure_connected()

        logger.debug("Listing prompts")
        try:
            result = await self.client_session.list_prompts()
            self._prompts = result.prompts
            return result.prompts
        except McpError as e:
            logger.error(f"Error listing prompts for connector {self.public_identifier}: {e}")
            return []

    async def get_prompt(self, name: str, arguments: dict[str, Any] | None = None) -> GetPromptResult:
        """Get a prompt by name."""
        await self._ensure_connected()

        logger.debug(f"Getting prompt: {name}")
        result = await self.client_session.get_prompt(name, arguments)
        return result

    async def request(self, method: str, params: dict[str, Any] | None = None) -> Any:
        """Send a raw request to the MCP implementation."""
        await self._ensure_connected()

        logger.debug(f"Sending request: {method} with params: {params}")
        return await self.client_session.request({"method": method, "params": params or {}})



================================================
FILE: mcp_use/connectors/http.py
================================================
"""
HTTP connector for MCP implementations.

This module provides a connector for communicating with MCP implementations
through HTTP APIs with SSE or Streamable HTTP for transport.
"""

import httpx
from mcp import ClientSession
from mcp.client.session import ElicitationFnT, LoggingFnT, MessageHandlerFnT, SamplingFnT

from ..logging import logger
from ..task_managers import SseConnectionManager, StreamableHttpConnectionManager
from .base import BaseConnector


class HttpConnector(BaseConnector):
    """Connector for MCP implementations using HTTP transport with SSE or streamable HTTP.

    This connector uses HTTP/SSE or streamable HTTP to communicate with remote MCP implementations,
    using a connection manager to handle the proper lifecycle management.
    """

    def __init__(
        self,
        base_url: str,
        auth_token: str | None = None,
        headers: dict[str, str] | None = None,
        timeout: float = 5,
        sse_read_timeout: float = 60 * 5,
        sampling_callback: SamplingFnT | None = None,
        elicitation_callback: ElicitationFnT | None = None,
        message_handler: MessageHandlerFnT | None = None,
        logging_callback: LoggingFnT | None = None,
    ):
        """Initialize a new HTTP connector.

        Args:
            base_url: The base URL of the MCP HTTP API.
            auth_token: Optional authentication token.
            headers: Optional additional headers.
            timeout: Timeout for HTTP operations in seconds.
            sse_read_timeout: Timeout for SSE read operations in seconds.
            sampling_callback: Optional sampling callback.
            elicitation_callback: Optional elicitation callback.
        """
        super().__init__(
            sampling_callback=sampling_callback,
            elicitation_callback=elicitation_callback,
            message_handler=message_handler,
            logging_callback=logging_callback,
        )
        self.base_url = base_url.rstrip("/")
        self.auth_token = auth_token
        self.headers = headers or {}
        if auth_token:
            self.headers["Authorization"] = f"Bearer {auth_token}"
        self.timeout = timeout
        self.sse_read_timeout = sse_read_timeout

    async def connect(self) -> None:
        """Establish a connection to the MCP implementation."""
        if self._connected:
            logger.debug("Already connected to MCP implementation")
            return

        # Try streamable HTTP first (new transport), fall back to SSE (old transport)
        # This implements backwards compatibility per MCP specification
        self.transport_type = None
        connection_manager = None

        try:
            # First, try the new streamable HTTP transport
            logger.debug(f"Attempting streamable HTTP connection to: {self.base_url}")
            connection_manager = StreamableHttpConnectionManager(
                self.base_url, self.headers, self.timeout, self.sse_read_timeout
            )

            # Test if this is a streamable HTTP server by attempting initialization
            read_stream, write_stream = await connection_manager.start()

            # Test if this actually works by trying to create a client session and initialize it
            test_client = ClientSession(
                read_stream,
                write_stream,
                sampling_callback=self.sampling_callback,
                elicitation_callback=self.elicitation_callback,
                message_handler=self._internal_message_handler,
                logging_callback=self.logging_callback,
                client_info=self.client_info,
            )
            await test_client.__aenter__()

            try:
                # Try to initialize - this is where streamable HTTP vs SSE difference should show up
                result = await test_client.initialize()

                # If we get here, streamable HTTP works

                self.client_session = test_client
                self.transport_type = "streamable HTTP"
                self._initialized = True  # Mark as initialized since we just called initialize()

                # Populate tools, resources, and prompts since we've initialized
                server_capabilities = result.capabilities

                if server_capabilities.tools:
                    # Get available tools directly from client session
                    tools_result = await self.client_session.list_tools()
                    self._tools = tools_result.tools if tools_result else []
                else:
                    self._tools = []

                if server_capabilities.resources:
                    # Get available resources directly from client session
                    resources_result = await self.client_session.list_resources()
                    self._resources = resources_result.resources if resources_result else []
                else:
                    self._resources = []

                if server_capabilities.prompts:
                    # Get available prompts directly from client session
                    prompts_result = await self.client_session.list_prompts()
                    self._prompts = prompts_result.prompts if prompts_result else []
                else:
                    self._prompts = []

            except Exception as init_error:
                # Clean up the test client
                try:
                    await test_client.__aexit__(None, None, None)
                except Exception:
                    pass
                raise init_error

        except Exception as streamable_error:
            logger.debug(f"Streamable HTTP failed: {streamable_error}")

            # Clean up the failed streamable HTTP connection manager
            if connection_manager:
                try:
                    await connection_manager.close()
                except Exception:
                    pass

            # Check if this is a 4xx error that indicates we should try SSE fallback
            should_fallback = False
            if isinstance(streamable_error, httpx.HTTPStatusError):
                if streamable_error.response.status_code in [404, 405]:
                    should_fallback = True
            elif "405 Method Not Allowed" in str(streamable_error) or "404 Not Found" in str(streamable_error):
                should_fallback = True
            else:
                # For other errors, still try fallback but they might indicate
                # real connectivity issues
                should_fallback = True

            if should_fallback:
                try:
                    # Fall back to the old SSE transport
                    logger.debug(f"Attempting SSE fallback connection to: {self.base_url}")
                    connection_manager = SseConnectionManager(
                        self.base_url, self.headers, self.timeout, self.sse_read_timeout
                    )

                    read_stream, write_stream = await connection_manager.start()

                    # Create the client session for SSE
                    self.client_session = ClientSession(
                        read_stream,
                        write_stream,
                        sampling_callback=self.sampling_callback,
                        elicitation_callback=self.elicitation_callback,
                        message_handler=self._internal_message_handler,
                        logging_callback=self.logging_callback,
                        client_info=self.client_info,
                    )
                    await self.client_session.__aenter__()
                    self.transport_type = "SSE"

                except Exception as sse_error:
                    logger.error(
                        f"Both transport methods failed. Streamable HTTP: {streamable_error}, SSE: {sse_error}"
                    )
                    raise sse_error
            else:
                raise streamable_error

        # Store the successful connection manager and mark as connected
        self._connection_manager = connection_manager
        self._connected = True
        logger.debug(f"Successfully connected to MCP implementation via {self.transport_type}: {self.base_url}")

    @property
    def public_identifier(self) -> str:
        """Get the identifier for the connector."""
        return {"type": self.transport_type, "base_url": self.base_url}



================================================
FILE: mcp_use/connectors/sandbox.py
================================================
"""
Sandbox connector for MCP implementations.

This module provides a connector for communicating with MCP implementations
that are executed inside a sandbox environment (currently using E2B).
"""

import asyncio
import os
import sys
import time

import aiohttp
from mcp import ClientSession
from mcp.client.session import ElicitationFnT, LoggingFnT, MessageHandlerFnT, SamplingFnT

from ..logging import logger
from ..task_managers import SseConnectionManager

# Import E2B SDK components (optional dependency)
try:
    logger.debug("Attempting to import e2b_code_interpreter...")
    from e2b_code_interpreter import CommandHandle, Sandbox

    logger.debug("Successfully imported e2b_code_interpreter")
except ImportError as e:
    logger.debug(f"Failed to import e2b_code_interpreter: {e}")
    CommandHandle = None
    Sandbox = None

from ..types.sandbox import SandboxOptions
from .base import BaseConnector


class SandboxConnector(BaseConnector):
    """Connector for MCP implementations running in a sandbox environment.

    This connector runs a user-defined stdio command within a sandbox environment,
    currently implemented using E2B, potentially wrapped by a utility like 'supergateway'
    to expose its stdio.
    """

    def __init__(
        self,
        command: str,
        args: list[str],
        env: dict[str, str] | None = None,
        e2b_options: SandboxOptions | None = None,
        timeout: float = 5,
        sse_read_timeout: float = 60 * 5,
        sampling_callback: SamplingFnT | None = None,
        elicitation_callback: ElicitationFnT | None = None,
        message_handler: MessageHandlerFnT | None = None,
        logging_callback: LoggingFnT | None = None,
    ):
        """Initialize a new sandbox connector.

        Args:
            command: The user's MCP server command to execute in the sandbox.
            args: Command line arguments for the user's MCP server command.
            env: Environment variables for the user's MCP server command.
            e2b_options: Configuration options for the E2B sandbox environment.
                        See SandboxOptions for available options and defaults.
            timeout: Timeout for the sandbox process in seconds.
            sse_read_timeout: Timeout for the SSE connection in seconds.
            sampling_callback: Optional sampling callback.
            elicitation_callback: Optional elicitation callback.
        """
        super().__init__(
            sampling_callback=sampling_callback,
            elicitation_callback=elicitation_callback,
            message_handler=message_handler,
            logging_callback=logging_callback,
        )
        if Sandbox is None:
            raise ImportError(
                "E2B SDK (e2b-code-interpreter) not found. Please install it with "
                "'pip install mcp-use[e2b]' (or 'pip install e2b-code-interpreter')."
            )

        self.user_command = command
        self.user_args = args or []
        self.user_env = env or {}

        _e2b_options = e2b_options or {}

        self.api_key = _e2b_options.get("api_key") or os.environ.get("E2B_API_KEY")
        if not self.api_key:
            raise ValueError(
                "E2B API key is required. Provide it via 'sandbox_options.api_key'"
                " or the E2B_API_KEY environment variable."
            )

        self.sandbox_template_id = _e2b_options.get("sandbox_template_id", "base")
        self.supergateway_cmd_parts = _e2b_options.get("supergateway_command", "npx -y supergateway")

        self.sandbox: Sandbox | None = None
        self.process: CommandHandle | None = None
        self.client_session: ClientSession | None = None
        self.errlog = sys.stderr
        self.base_url: str | None = None
        self._connected = False
        self._connection_manager: SseConnectionManager | None = None

        # SSE connection parameters
        self.headers = {}
        self.timeout = timeout
        self.sse_read_timeout = sse_read_timeout

        self.stdout_lines: list[str] = []
        self.stderr_lines: list[str] = []
        self._server_ready = asyncio.Event()

    def _handle_stdout(self, data: str) -> None:
        """Handle stdout data from the sandbox process."""
        self.stdout_lines.append(data)
        logger.debug(f"[SANDBOX STDOUT] {data}", end="", flush=True)

    def _handle_stderr(self, data: str) -> None:
        """Handle stderr data from the sandbox process."""
        self.stderr_lines.append(data)
        logger.debug(f"[SANDBOX STDERR] {data}", file=self.errlog, end="", flush=True)

    async def wait_for_server_response(self, base_url: str, timeout: int = 30) -> bool:
        """Wait for the server to respond to HTTP requests.
        Args:
            base_url: The base URL to check for server readiness
            timeout: Maximum time to wait in seconds
        Returns:
            True if server is responding, raises TimeoutError otherwise
        """
        logger.info(f"Waiting for server at {base_url} to respond...")
        sys.stdout.flush()

        start_time = time.time()
        ping_url = f"{base_url}/sse"

        # Try to connect to the server
        while time.time() - start_time < timeout:
            try:
                async with aiohttp.ClientSession() as session:
                    try:
                        # First try the endpoint
                        async with session.get(ping_url, timeout=2) as response:
                            if response.status == 200:
                                elapsed = time.time() - start_time
                                logger.info(f"Server is ready! SSE endpoint responded with 200 after {elapsed:.1f}s")
                                return True
                    except Exception:
                        # If sse endpoint doesn't work, try the base URL
                        async with session.get(base_url, timeout=2) as response:
                            if response.status < 500:  # Accept any non-server error
                                elapsed = time.time() - start_time
                                logger.info(
                                    f"Server is ready! Base URL responded with {response.status} after {elapsed:.1f}s"
                                )
                                return True
            except Exception:
                # Wait a bit before trying again
                await asyncio.sleep(0.5)
                continue

            # If we get here, the request failed
            await asyncio.sleep(0.5)

            # Log status every 5 seconds
            elapsed = time.time() - start_time
            if int(elapsed) % 5 == 0:
                logger.info(f"Still waiting for server to respond... ({elapsed:.1f}s elapsed)")
                sys.stdout.flush()

        # If we get here, we timed out
        raise TimeoutError(f"Timeout waiting for server to respond (waited {timeout} seconds)")

    async def connect(self):
        """Connect to the sandbox and start the MCP server."""

        if self._connected:
            logger.debug("Already connected to MCP implementation")
            return

        logger.debug("Connecting to MCP implementation in sandbox")

        try:
            # Create and start the sandbox
            self.sandbox = Sandbox(
                template=self.sandbox_template_id,
                api_key=self.api_key,
            )

            # Get the host for the sandbox
            host = self.sandbox.get_host(3000)
            self.base_url = f"https://{host}".rstrip("/")

            # Append command with args
            command = f"{self.user_command} {' '.join(self.user_args)}"

            # Construct the full command with supergateway
            full_command = f'{self.supergateway_cmd_parts} \
                --base-url {self.base_url} \
                --port 3000 \
                --cors \
                --stdio "{command}"'

            logger.debug(f"Full command: {full_command}")

            # Start the process in the sandbox with our stdout/stderr handlers
            self.process: CommandHandle = self.sandbox.commands.run(
                full_command,
                envs=self.user_env,
                timeout=1000 * 60 * 10,  # 10 minutes timeout
                background=True,
                on_stdout=self._handle_stdout,
                on_stderr=self._handle_stderr,
            )

            # Wait for the server to be ready
            await self.wait_for_server_response(self.base_url, timeout=30)
            logger.debug("Initializing connection manager...")

            # Create the SSE connection URL
            sse_url = f"{self.base_url}/sse"

            # Create and start the connection manager
            self._connection_manager = SseConnectionManager(sse_url, self.headers, self.timeout, self.sse_read_timeout)
            read_stream, write_stream = await self._connection_manager.start()

            # Create the client session
            self.client_session = ClientSession(
                read_stream,
                write_stream,
                sampling_callback=self.sampling_callback,
                elicitation_callback=self.elicitation_callback,
                message_handler=self._internal_message_handler,
                logging_callback=self.logging_callback,
                client_info=self.client_info,
            )
            await self.client_session.__aenter__()

            # Mark as connected
            self._connected = True
            logger.debug(f"Successfully connected to MCP implementation via HTTP/SSE: {self.base_url}")

        except Exception as e:
            logger.error(f"Failed to connect to MCP implementation: {e}")

            # Clean up any resources if connection failed
            await self._cleanup_resources()

            raise e

    async def _cleanup_resources(self) -> None:
        """Clean up all resources associated with this connector, including the sandbox.
        This method extends the base implementation to also terminate the sandbox instance
        and clean up any processes running in the sandbox.
        """
        logger.debug("Cleaning up sandbox resources")

        # Terminate any running process
        if self.process:
            try:
                logger.debug("Terminating sandbox process")
                self.process.kill()
            except Exception as e:
                logger.warning(f"Error terminating sandbox process: {e}")
            finally:
                self.process = None

        # Close the sandbox
        if self.sandbox:
            try:
                logger.debug("Closing sandbox instance")
                self.sandbox.kill()
                logger.debug("Sandbox instance closed successfully")
            except Exception as e:
                logger.warning(f"Error closing sandbox: {e}")
            finally:
                self.sandbox = None

        # Then call the parent method to clean up the rest
        await super()._cleanup_resources()

        # Clear any collected output
        self.stdout_lines = []
        self.stderr_lines = []
        self.base_url = None

    async def disconnect(self) -> None:
        """Close the connection to the MCP implementation."""
        if not self._connected:
            logger.debug("Not connected to MCP implementation")
            return

        logger.debug("Disconnecting from MCP implementation")
        await self._cleanup_resources()
        self._connected = False
        logger.debug("Disconnected from MCP implementation")

    @property
    def public_identifier(self) -> str:
        """Get the identifier for the connector."""
        return {"type": "sandbox", "command": self.user_command, "args": self.user_args}



================================================
FILE: mcp_use/connectors/stdio.py
================================================
"""
StdIO connector for MCP implementations.

This module provides a connector for communicating with MCP implementations
through the standard input/output streams.
"""

import sys

from mcp import ClientSession, StdioServerParameters
from mcp.client.session import ElicitationFnT, LoggingFnT, MessageHandlerFnT, SamplingFnT

from ..logging import logger
from ..task_managers import StdioConnectionManager
from .base import BaseConnector


class StdioConnector(BaseConnector):
    """Connector for MCP implementations using stdio transport.

    This connector uses the stdio transport to communicate with MCP implementations
    that are executed as child processes. It uses a connection manager to handle
    the proper lifecycle management of the stdio client.
    """

    def __init__(
        self,
        command: str = "npx",
        args: list[str] | None = None,
        env: dict[str, str] | None = None,
        errlog=sys.stderr,
        sampling_callback: SamplingFnT | None = None,
        elicitation_callback: ElicitationFnT | None = None,
        message_handler: MessageHandlerFnT | None = None,
        logging_callback: LoggingFnT | None = None,
    ):
        """Initialize a new stdio connector.

        Args:
            command: The command to execute.
            args: Optional command line arguments.
            env: Optional environment variables.
            errlog: Stream to write error output to.
            sampling_callback: Optional callback to sample the client.
            elicitation_callback: Optional callback to elicit the client.
        """
        super().__init__(
            sampling_callback=sampling_callback,
            elicitation_callback=elicitation_callback,
            message_handler=message_handler,
            logging_callback=logging_callback,
        )
        self.command = command
        self.args = args or []  # Ensure args is never None
        self.env = env
        self.errlog = errlog

    async def connect(self) -> None:
        """Establish a connection to the MCP implementation."""
        if self._connected:
            logger.debug("Already connected to MCP implementation")
            return

        logger.debug(f"Connecting to MCP implementation: {self.command}")
        try:
            # Create server parameters
            server_params = StdioServerParameters(command=self.command, args=self.args, env=self.env)

            # Create and start the connection manager
            self._connection_manager = StdioConnectionManager(server_params, self.errlog)
            read_stream, write_stream = await self._connection_manager.start()

            # Create the client session
            self.client_session = ClientSession(
                read_stream,
                write_stream,
                sampling_callback=self.sampling_callback,
                elicitation_callback=self.elicitation_callback,
                message_handler=self._internal_message_handler,
                logging_callback=self.logging_callback,
                client_info=self.client_info,
            )
            await self.client_session.__aenter__()

            # Mark as connected
            self._connected = True
            logger.debug(f"Successfully connected to MCP implementation: {self.command}")

        except Exception as e:
            logger.error(f"Failed to connect to MCP implementation: {e}")

            # Clean up any resources if connection failed
            await self._cleanup_resources()

            # Re-raise the original exception
            raise

    @property
    def public_identifier(self) -> str:
        """Get the identifier for the connector."""
        return {"type": "stdio", "command&args": f"{self.command} {' '.join(self.args)}"}



================================================
FILE: mcp_use/connectors/utils.py
================================================
from typing import Any


def is_stdio_server(server_config: dict[str, Any]) -> bool:
    """Check if the server configuration is for a stdio server.

    Args:
        server_config: The server configuration section

    Returns:
        True if the server is a stdio server, False otherwise
    """
    return "command" in server_config and "args" in server_config



================================================
FILE: mcp_use/connectors/websocket.py
================================================
"""
WebSocket connector for MCP implementations.

This module provides a connector for communicating with MCP implementations
through WebSocket connections.
"""

import asyncio
import json
import uuid
from typing import Any

from mcp.types import Tool
from websockets import ClientConnection

from ..logging import logger
from ..task_managers import ConnectionManager, WebSocketConnectionManager
from .base import BaseConnector


class WebSocketConnector(BaseConnector):
    """Connector for MCP implementations using WebSocket transport.

    This connector uses WebSockets to communicate with remote MCP implementations,
    using a connection manager to handle the proper lifecycle management.
    """

    def __init__(
        self,
        url: str,
        auth_token: str | None = None,
        headers: dict[str, str] | None = None,
    ):
        """Initialize a new WebSocket connector.

        Args:
            url: The WebSocket URL to connect to.
            auth_token: Optional authentication token.
            headers: Optional additional headers.
        """
        self.url = url
        self.auth_token = auth_token
        self.headers = headers or {}
        if auth_token:
            self.headers["Authorization"] = f"Bearer {auth_token}"

        self.ws: ClientConnection | None = None
        self._connection_manager: ConnectionManager | None = None
        self._receiver_task: asyncio.Task | None = None
        self.pending_requests: dict[str, asyncio.Future] = {}
        self._tools: list[Tool] | None = None
        self._connected = False

    async def connect(self) -> None:
        """Establish a connection to the MCP implementation."""
        if self._connected:
            logger.debug("Already connected to MCP implementation")
            return

        logger.debug(f"Connecting to MCP implementation via WebSocket: {self.url}")
        try:
            # Create and start the connection manager
            self._connection_manager = WebSocketConnectionManager(self.url, self.headers)
            self.ws = await self._connection_manager.start()

            # Start the message receiver task
            self._receiver_task = asyncio.create_task(self._receive_messages(), name="websocket_receiver_task")

            # Mark as connected
            self._connected = True
            logger.debug(f"Successfully connected to MCP implementation via WebSocket: {self.url}")

        except Exception as e:
            logger.error(f"Failed to connect to MCP implementation via WebSocket: {e}")

            # Clean up any resources if connection failed
            await self._cleanup_resources()

            # Re-raise the original exception
            raise

    async def _receive_messages(self) -> None:
        """Continuously receive and process messages from the WebSocket."""
        if not self.ws:
            raise RuntimeError("WebSocket is not connected")

        try:
            async for message in self.ws:
                # Parse the message
                data = json.loads(message)

                # Check if this is a response to a pending request
                request_id = data.get("id")
                if request_id and request_id in self.pending_requests:
                    future = self.pending_requests.pop(request_id)
                    if "result" in data:
                        future.set_result(data["result"])
                    elif "error" in data:
                        future.set_exception(Exception(data["error"]))

                    logger.debug(f"Received response for request {request_id}")
                else:
                    logger.debug(f"Received message: {data}")
        except Exception as e:
            logger.error(f"Error in WebSocket message receiver: {e}")
            # If the websocket connection was closed or errored,
            # reject all pending requests
            for future in self.pending_requests.values():
                if not future.done():
                    future.set_exception(e)

    async def disconnect(self) -> None:
        """Close the connection to the MCP implementation."""
        if not self._connected:
            logger.debug("Not connected to MCP implementation")
            return

        logger.debug("Disconnecting from MCP implementation")
        await self._cleanup_resources()
        self._connected = False
        logger.debug("Disconnected from MCP implementation")

    async def _cleanup_resources(self) -> None:
        """Clean up all resources associated with this connector."""
        errors = []

        # First cancel the receiver task
        if self._receiver_task and not self._receiver_task.done():
            try:
                logger.debug("Cancelling WebSocket receiver task")
                self._receiver_task.cancel()
                try:
                    await self._receiver_task
                except asyncio.CancelledError:
                    logger.debug("WebSocket receiver task cancelled successfully")
                except Exception as e:
                    logger.warning(f"Error during WebSocket receiver task cancellation: {e}")
            except Exception as e:
                error_msg = f"Error cancelling WebSocket receiver task: {e}"
                logger.warning(error_msg)
                errors.append(error_msg)
            finally:
                self._receiver_task = None

        # Reject any pending requests
        if self.pending_requests:
            logger.debug(f"Rejecting {len(self.pending_requests)} pending requests")
            for future in self.pending_requests.values():
                if not future.done():
                    future.set_exception(ConnectionError("WebSocket disconnected"))
            self.pending_requests.clear()

        # Then stop the connection manager
        if self._connection_manager:
            try:
                logger.debug("Stopping connection manager")
                await self._connection_manager.stop()
            except Exception as e:
                error_msg = f"Error stopping connection manager: {e}"
                logger.warning(error_msg)
                errors.append(error_msg)
            finally:
                self._connection_manager = None
                self.ws = None

        # Reset tools
        self._tools = None

        if errors:
            logger.warning(f"Encountered {len(errors)} errors during resource cleanup")

    async def _send_request(self, method: str, params: dict[str, Any] | None = None) -> Any:
        """Send a request and wait for a response."""
        if not self.ws:
            raise RuntimeError("WebSocket is not connected")

        # Create a request ID
        request_id = str(uuid.uuid4())

        # Create a future to receive the response
        future = asyncio.Future()
        self.pending_requests[request_id] = future

        # Send the request
        await self.ws.send(json.dumps({"id": request_id, "method": method, "params": params or {}}))

        logger.debug(f"Sent request {request_id} method: {method}")

        # Wait for the response
        try:
            return await future
        except Exception as e:
            # Remove the request from pending requests
            self.pending_requests.pop(request_id, None)
            logger.error(f"Error waiting for response to request {request_id}: {e}")
            raise

    async def initialize(self) -> dict[str, Any]:
        """Initialize the MCP session and return session information."""
        logger.debug("Initializing MCP session")
        result = await self._send_request("initialize")

        # Get available tools
        tools_result = await self.list_tools()
        self._tools = [Tool(**tool) for tool in tools_result]

        logger.debug(f"MCP session initialized with {len(self._tools)} tools")
        return result

    async def list_tools(self) -> list[dict[str, Any]]:
        """List all available tools from the MCP implementation."""
        logger.debug("Listing tools")
        result = await self._send_request("tools/list")
        return result.get("tools", [])

    @property
    def tools(self) -> list[Tool]:
        """Get the list of available tools."""
        if not self._tools:
            raise RuntimeError("MCP client is not initialized")
        return self._tools

    async def call_tool(self, name: str, arguments: dict[str, Any]) -> Any:
        """Call an MCP tool with the given arguments."""
        logger.debug(f"Calling tool '{name}' with arguments: {arguments}")
        return await self._send_request("tools/call", {"name": name, "arguments": arguments})

    async def list_resources(self) -> list[dict[str, Any]]:
        """List all available resources from the MCP implementation."""
        logger.debug("Listing resources")
        result = await self._send_request("resources/list")
        return result

    async def read_resource(self, uri: str) -> tuple[bytes, str]:
        """Read a resource by URI."""
        logger.debug(f"Reading resource: {uri}")
        result = await self._send_request("resources/read", {"uri": uri})
        return result.get("content", b""), result.get("mimeType", "")

    async def request(self, method: str, params: dict[str, Any] | None = None) -> Any:
        """Send a raw request to the MCP implementation."""
        logger.debug(f"Sending request: {method} with params: {params}")
        return await self._send_request(method, params)

    @property
    def public_identifier(self) -> str:
        """Get the identifier for the connector."""
        return {"type": "websocket", "url": self.url}



================================================
FILE: mcp_use/errors/__init__.py
================================================




================================================
FILE: mcp_use/errors/error_formatting.py
================================================
import traceback

from ..logging import logger

retryable_exceptions = (TimeoutError, ConnectionError)  # We can add more exceptions here


def format_error(error: Exception, **context) -> dict:
    """
    Formats an exception into a structured format that can be understood by LLMs.

    Args:
        error: The exception to format.
        **context: Additional context to include in the formatted error.

    Returns:
        A dictionary containing the formatted error.
    """
    formatted_context = {
        "error": type(error).__name__,
        "details": str(error),
        "isRetryable": isinstance(error, retryable_exceptions),
        "stack": traceback.format_exc(),
        "code": getattr(error, "code", "UNKNOWN"),
    }
    formatted_context.update(context)

    logger.error(f"Structured error: {formatted_context}")  # For observability (maybe remove later)
    return formatted_context



================================================
FILE: mcp_use/managers/__init__.py
================================================
from .server_manager import ServerManager
from .tools import (
    ConnectServerTool,
    DisconnectServerTool,
    GetActiveServerTool,
    ListServersTool,
    MCPServerTool,
    SearchToolsTool,
)

__all__ = [
    "ServerManager",
    "MCPServerTool",
    "ConnectServerTool",
    "DisconnectServerTool",
    "GetActiveServerTool",
    "ListServersTool",
    "SearchToolsTool",
]



================================================
FILE: mcp_use/managers/base.py
================================================
from abc import ABC, abstractmethod

from langchain_core.tools import BaseTool


class BaseServerManager(ABC):
    """Abstract base class for server managers.

    This class defines the interface for server managers that can be used with MCPAgent.
    Custom server managers should inherit from this class and implement the required methods.
    """

    @abstractmethod
    async def initialize(self) -> None:
        """Initialize the server manager."""
        raise NotImplementedError

    @property
    @abstractmethod
    def tools(self) -> list[BaseTool]:
        """Get all server management tools and tools from the active server.

        Returns:
            list of LangChain tools for server management plus tools from active server
        """
        raise NotImplementedError

    @abstractmethod
    def has_tool_changes(self, current_tool_names: set[str]) -> bool:
        """Check if the available tools have changed.
        Args:
            current_tool_names: Set of currently known tool names
        Returns:
            True if tools have changed, False otherwise
        """
        raise NotImplementedError



================================================
FILE: mcp_use/managers/server_manager.py
================================================
from langchain_core.tools import BaseTool

from mcp_use.client import MCPClient
from mcp_use.logging import logger

from ..adapters.base import BaseAdapter
from .base import BaseServerManager
from .tools import ConnectServerTool, DisconnectServerTool, GetActiveServerTool, ListServersTool, SearchToolsTool


class ServerManager(BaseServerManager):
    """Manages MCP servers and provides tools for server selection and management.

    This class allows an agent to discover and select which MCP server to use,
    dynamically activating the tools for the selected server.
    """

    def __init__(self, client: MCPClient, adapter: BaseAdapter) -> None:
        """Initialize the server manager.

        Args:
            client: The MCPClient instance managing server connections
            adapter: The LangChainAdapter for converting MCP tools to LangChain tools
        """
        self.client = client
        self.adapter = adapter
        self.active_server: str | None = None
        self.initialized_servers: dict[str, bool] = {}
        self._server_tools: dict[str, list[BaseTool]] = {}

    async def initialize(self) -> None:
        """Initialize the server manager and prepare server management tools."""
        # Make sure we have server configurations
        if not self.client.get_server_names():
            logger.warning("No MCP servers defined in client configuration")

    async def _prefetch_server_tools(self) -> None:
        """Pre-fetch tools for all servers to populate the tool search index."""
        servers = self.client.get_server_names()
        for server_name in servers:
            try:
                # Only create session if needed, don't set active
                session = None
                try:
                    session = self.client.get_session(server_name)
                    logger.debug(f"Using existing session for server '{server_name}' to prefetch tools.")
                except ValueError:
                    try:
                        session = await self.client.create_session(server_name)
                        logger.debug(f"Temporarily created session for '{server_name}' to prefetch tools")
                    except Exception:
                        logger.warning(f"Could not create session for '{server_name}' during prefetch")
                        continue

                # Fetch tools if session is available
                if session:
                    connector = session.connector
                    tools = await self.adapter._create_tools_from_connectors([connector])

                    # Check if this server's tools have changed
                    if server_name not in self._server_tools or self._server_tools[server_name] != tools:
                        self._server_tools[server_name] = tools  # Cache tools
                        self.initialized_servers[server_name] = True  # Mark as initialized
                        logger.debug(f"Prefetched {len(tools)} tools for server '{server_name}'.")
                    else:
                        logger.debug(f"Tools for server '{server_name}' unchanged, using cached version.")
            except Exception as e:
                logger.error(f"Error prefetching tools for server '{server_name}': {e}")

    def get_active_server_tools(self) -> list[BaseTool]:
        """Get tools from the currently active server.

        Returns:
            List of tools from the active server, or empty list if no server is active
        """
        if self.active_server and self.active_server in self._server_tools:
            return self._server_tools[self.active_server]
        return []

    def get_management_tools(self) -> list[BaseTool]:
        """Get the server management tools.

        Returns:
            List of server management tools
        """
        return [
            ListServersTool(self),
            ConnectServerTool(self),
            GetActiveServerTool(self),
            DisconnectServerTool(self),
            SearchToolsTool(self),
        ]

    def has_tool_changes(self, current_tool_names: set[str]) -> bool:
        """Check if the available tools have changed.

        Args:
            current_tool_names: Set of currently known tool names

        Returns:
            True if tools have changed, False otherwise
        """
        new_tool_names = {tool.name for tool in self.tools}
        return new_tool_names != current_tool_names

    @property
    def tools(self) -> list[BaseTool]:
        """Get all server management tools and tools from the active server.

        Returns:
            list of LangChain tools for server management plus tools from active server
        """
        management_tools = self.get_management_tools()

        # Add tools from the active server if available
        if self.active_server and self.active_server in self._server_tools:
            server_tools = self._server_tools[self.active_server]
            logger.debug(f"Including {len(server_tools)} tools from active server '{self.active_server}'")
            logger.debug(f"Server tools: {[tool.name for tool in server_tools]}")
            return management_tools + server_tools
        else:
            logger.debug("No active server - returning only management tools")

        return management_tools



================================================
FILE: mcp_use/managers/tools/__init__.py
================================================
from .base_tool import MCPServerTool
from .connect_server import ConnectServerTool
from .disconnect_server import DisconnectServerTool
from .get_active_server import GetActiveServerTool
from .list_servers_tool import ListServersTool
from .search_tools import SearchToolsTool

__all__ = [
    "MCPServerTool",
    "ConnectServerTool",
    "DisconnectServerTool",
    "GetActiveServerTool",
    "ListServersTool",
    "SearchToolsTool",
]



================================================
FILE: mcp_use/managers/tools/base_tool.py
================================================
from typing import ClassVar

from langchain_core.tools import BaseTool


class MCPServerTool(BaseTool):
    """Base tool for MCP server operations."""

    name: ClassVar[str] = "mcp_server_tool"
    description: ClassVar[str] = "Base tool for MCP server operations."

    def __init__(self, server_manager):
        """Initialize with server manager."""
        super().__init__()
        self._server_manager = server_manager

    @property
    def server_manager(self):
        return self._server_manager



================================================
FILE: mcp_use/managers/tools/connect_server.py
================================================
from typing import ClassVar

from pydantic import BaseModel, Field

from mcp_use.errors.error_formatting import format_error
from mcp_use.logging import logger

from .base_tool import MCPServerTool


class ServerActionInput(BaseModel):
    """Base input for server-related actions"""

    server_name: str = Field(description="The name of the MCP server")


class ConnectServerTool(MCPServerTool):
    """Tool for connecting to a specific MCP server."""

    name: ClassVar[str] = "connect_to_mcp_server"
    description: ClassVar[str] = (
        "Connect to a specific MCP (Model Context Protocol) server to use its "
        "tools. Use this tool to connect to a specific server and use its tools."
    )
    args_schema: ClassVar[type[BaseModel]] = ServerActionInput

    async def _arun(self, server_name: str) -> str:
        """Connect to a specific MCP server."""
        # Check if server exists
        servers = self.server_manager.client.get_server_names()
        if server_name not in servers:
            available = ", ".join(servers) if servers else "none"
            return f"Server '{server_name}' not found. Available servers: {available}"

        # If we're already connected to this server, just return
        if self.server_manager.active_server == server_name:
            return f"Already connected to MCP server '{server_name}'"

        try:
            # Create or get session for this server
            try:
                session = self.server_manager.client.get_session(server_name)
                logger.debug(f"Using existing session for server '{server_name}'")
            except ValueError:
                logger.debug(f"Creating new session for server '{server_name}'")
                session = await self.server_manager.client.create_session(server_name)

            # Set as active server
            self.server_manager.active_server = server_name

            # Initialize server tools if not already initialized
            if server_name not in self.server_manager._server_tools:
                connector = session.connector
                self.server_manager._server_tools[
                    server_name
                ] = await self.server_manager.adapter._create_tools_from_connectors([connector])
                self.server_manager.initialized_servers[server_name] = True

            server_tools = self.server_manager._server_tools.get(server_name, [])
            num_tools = len(server_tools)

            return f"Connected to MCP server '{server_name}'. {num_tools} tools are now available."

        except Exception as e:
            logger.error(f"Error connecting to server '{server_name}': {e}")
            return format_error(e, server_name=server_name)

    def _run(self, server_name: str) -> str:
        """Synchronous version that raises a NotImplementedError - use _arun instead."""
        raise NotImplementedError("ConnectServerTool requires async execution. Use _arun instead.")



================================================
FILE: mcp_use/managers/tools/disconnect_server.py
================================================
from typing import ClassVar

from pydantic import BaseModel

from mcp_use.errors.error_formatting import format_error
from mcp_use.logging import logger

from .base_tool import MCPServerTool


class DisconnectServerInput(BaseModel):
    """Empty input for disconnecting from the current server"""

    pass


class DisconnectServerTool(MCPServerTool):
    """Tool for disconnecting from the currently active MCP server."""

    name: ClassVar[str] = "disconnect_from_mcp_server"
    description: ClassVar[str] = "Disconnect from the currently active MCP (Model Context Protocol) server"
    args_schema: ClassVar[type[BaseModel]] = DisconnectServerInput

    def _run(self, **kwargs) -> str:
        """Disconnect from the currently active MCP server."""
        if not self.server_manager.active_server:
            return "No MCP server is currently active, so there's nothing to disconnect from."

        server_name = self.server_manager.active_server
        try:
            # Clear the active server
            self.server_manager.active_server = None

            # Note: We're not actually closing the session here, just 'deactivating'
            # This way we keep the session cache without requiring reconnection if needed again

            return f"Successfully disconnected from MCP server '{server_name}'."
        except Exception as e:
            logger.error(f"Error disconnecting from server '{server_name}': {e}")
            return format_error(e, server_name=server_name)

    async def _arun(self, **kwargs) -> str:
        """Async implementation of _run."""
        return self._run(**kwargs)



================================================
FILE: mcp_use/managers/tools/get_active_server.py
================================================
from typing import ClassVar

from pydantic import BaseModel

from .base_tool import MCPServerTool


class CurrentServerInput(BaseModel):
    """Empty input for checking current server"""

    pass


class GetActiveServerTool(MCPServerTool):
    """Tool for getting the currently active MCP server."""

    name: ClassVar[str] = "get_active_mcp_server"
    description: ClassVar[str] = "Get the currently active MCP (Model Context Protocol) server"
    args_schema: ClassVar[type[BaseModel]] = CurrentServerInput

    def _run(self, **kwargs) -> str:
        """Get the currently active MCP server."""
        if not self.server_manager.active_server:
            return "No MCP server is currently active. Use connect_to_mcp_server to connect to a server."
        return f"Currently active MCP server: {self.server_manager.active_server}"

    async def _arun(self, **kwargs) -> str:
        """Async implementation of _run."""
        return self._run(**kwargs)



================================================
FILE: mcp_use/managers/tools/list_servers_tool.py
================================================
from typing import ClassVar

from pydantic import BaseModel

from mcp_use.errors.error_formatting import format_error
from mcp_use.logging import logger

from .base_tool import MCPServerTool


class listServersInput(BaseModel):
    """Empty input for listing available servers"""

    pass


class ListServersTool(MCPServerTool):
    """Tool for listing available MCP servers."""

    name: ClassVar[str] = "list_mcp_servers"
    description: ClassVar[str] = (
        "Lists all available MCP (Model Context Protocol) servers that can be "
        "connected to, along with the tools available on each server. "
        "Use this tool to discover servers and see what functionalities they offer."
    )
    args_schema: ClassVar[type[BaseModel]] = listServersInput

    def _run(self, **kwargs) -> str:
        """List all available MCP servers along with their available tools."""
        servers = self.server_manager.client.get_server_names()
        if not servers:
            return "No MCP servers are currently defined."

        result = "Available MCP servers:\n"
        for i, server_name in enumerate(servers):
            active_marker = " (ACTIVE)" if server_name == self.server_manager.active_server else ""
            result += f"{i + 1}. {server_name}{active_marker}\n"

            tools: list = []
            try:
                # Check cache first
                if server_name in self.server_manager._server_tools:
                    tools = self.server_manager._server_tools[server_name]
                    tool_count = len(tools)
                    result += f"   {tool_count} tools available for this server\n"
            except Exception as e:
                logger.error(f"Unexpected error listing tools for server '{server_name}': {e}")
                return format_error(e, server=server_name, operation="list_tools")

        return result

    async def _arun(self, **kwargs) -> str:
        """Async implementation of _run - calls the synchronous version."""
        return self._run(**kwargs)



================================================
FILE: mcp_use/managers/tools/search_tools.py
================================================
import asyncio
import math
import time
from typing import ClassVar

from langchain_core.tools import BaseTool
from pydantic import BaseModel, Field

from ...logging import logger
from .base_tool import MCPServerTool


class ToolSearchInput(BaseModel):
    """Input for searching for tools across MCP servers"""

    query: str = Field(description="The search query to find relevant tools")
    top_k: int = Field(
        default=100,
        description="The maximum number of tools to return (defaults to 100)",
    )


class SearchToolsTool(MCPServerTool):
    """Tool for searching for tools across all MCP servers using semantic search."""

    name: ClassVar[str] = "search_mcp_tools"
    description: ClassVar[str] = (
        "Search for relevant tools across all MCP servers using semantic search. "
        "Provide a description of the tool you think you might need to be able to perform "
        "the task you are assigned. Do not be too specific, the search will give you many "
        "options. It is important you search for the tool, not for the goal. "
        "If your first search doesn't yield relevant results, try using different keywords "
        "or more general terms."
    )
    args_schema: ClassVar[type[BaseModel]] = ToolSearchInput

    def __init__(self, server_manager):
        """Initialize with server manager and create a search tool."""
        super().__init__(server_manager)
        self._search_tool = ToolSearchEngine(server_manager=server_manager)

    async def _arun(self, query: str, top_k: int = 100) -> str:
        """Search for tools across all MCP servers using semantic search."""
        # Make sure the index is ready, and if not, allow the search_tools method to handle it
        # No need to manually check or build the index here as the search_tools method will do that

        # Perform search using our search tool instance
        results = await self._search_tool.search_tools(
            query, top_k=top_k, active_server=self.server_manager.active_server
        )
        return results

    def _run(self, query: str, top_k: int = 100) -> str:
        """Synchronous version that raises a NotImplementedError - use _arun instead."""
        raise NotImplementedError("SearchToolsTool requires async execution. Use _arun instead.")


class ToolSearchEngine:
    """
    Provides semantic search capabilities for MCP tools.
    Uses vector similarity for semantic search with optional result caching.
    """

    def __init__(self, server_manager=None, use_caching: bool = True):
        """
        Initialize the tool search engine.

        Args:
            server_manager: The ServerManager instance to get tools from
            use_caching: Whether to cache query results
        """
        self.server_manager = server_manager
        self.use_caching = use_caching
        self.is_indexed = False

        # Initialize model components (loaded on demand)
        self.model = None
        self.embedding_function = None

        # Data storage
        self.tool_embeddings = {}  # Maps tool name to embedding vector
        self.tools_by_name = {}  # Maps tool name to tool instance
        self.server_by_tool = {}  # Maps tool name to server name
        self.tool_texts = {}  # Maps tool name to searchable text
        self.query_cache = {}  # Caches search results by query

    def _load_model(self) -> bool:
        """Load the embedding model for semantic search if not already loaded."""
        if self.model is not None:
            return True

        try:
            from fastembed import TextEmbedding  # optional dependency install with [search]
        except ImportError as exc:
            logger.error(
                "The 'fastembed' library is not installed. "
                "To use the search functionality, please install it by running: "
                "pip install mcp-use[search]"
            )
            raise ImportError(
                "The 'fastembed' library is not installed. "
                "To use the server_manager functionality, please install it by running: "
                "pip install mcp-use[search] "
                "or disable the server_manager by setting use_server_manager=False in the MCPAgent constructor."
            ) from exc

        try:
            self.model = TextEmbedding(model_name="BAAI/bge-small-en-v1.5")
            self.embedding_function = lambda texts: list(self.model.embed(texts))
            return True
        except Exception as e:
            logger.error(f"Failed to load the embedding model: {e}")
            return False

    async def start_indexing(self) -> None:
        """Index the tools from the server manager."""
        if not self.server_manager:
            return

        # Get tools from server manager
        server_tools = self.server_manager._server_tools

        if not server_tools:
            # Try to prefetch tools first
            if hasattr(self.server_manager, "_prefetch_server_tools"):
                await self.server_manager._prefetch_server_tools()
                server_tools = self.server_manager._server_tools

        if server_tools:
            await self.index_tools(server_tools)

    async def index_tools(self, server_tools: dict[str, list[BaseTool]]) -> None:
        """
        Index all tools from all servers for search.

        Args:
            server_tools: dictionary mapping server names to their tools
        """
        # Clear previous indexes
        self.tool_embeddings = {}
        self.tools_by_name = {}
        self.server_by_tool = {}
        self.tool_texts = {}
        self.query_cache = {}
        self.is_indexed = False

        # Collect all tools and their descriptions
        for server_name, tools in server_tools.items():
            for tool in tools:
                # Create text representation for search
                tool_text = f"{tool.name}: {tool.description}"

                # Store tool information
                self.tools_by_name[tool.name] = tool
                self.server_by_tool[tool.name] = server_name
                self.tool_texts[tool.name] = tool_text.lower()  # For case-insensitive search

        if not self.tool_texts:
            return

        # Generate embeddings
        if self._load_model():
            tool_names = list(self.tool_texts.keys())
            tool_texts = [self.tool_texts[name] for name in tool_names]

            try:
                embeddings = self.embedding_function(tool_texts)
                for name, embedding in zip(tool_names, embeddings, strict=True):
                    self.tool_embeddings[name] = embedding

                # Mark as indexed if we successfully embedded tools
                self.is_indexed = len(self.tool_embeddings) > 0
            except Exception:
                return

    def search(self, query: str, top_k: int = 5) -> list[tuple[BaseTool, str, float]]:
        """
        Search for tools that match the query using semantic search.

        Args:
            query: The search query
            top_k: Number of top results to return

        Returns:
            list of tuples containing (tool, server_name, score)
        """
        if not self.is_indexed:
            return []

        # Check cache first
        cache_key = f"semantic:{query}:{top_k}"
        if self.use_caching and cache_key in self.query_cache:
            return self.query_cache[cache_key]

        # Ensure model and embeddings exist
        if not self._load_model() or not self.tool_embeddings:
            return []

        # Generate embedding for the query
        try:
            query_embedding = self.embedding_function([query])[0]
        except Exception:
            return []

        # Calculate similarity scores
        scores = {}
        for tool_name, embedding in self.tool_embeddings.items():
            # Calculate cosine similarity using pure Python
            similarity = self._cosine_similarity(query_embedding, embedding)
            scores[tool_name] = float(similarity)

        # Sort by score and get top_k results
        sorted_results = sorted(scores.items(), key=lambda x: x[1], reverse=True)[:top_k]

        # Format results
        results = []
        for tool_name, score in sorted_results:
            tool = self.tools_by_name.get(tool_name)
            server_name = self.server_by_tool.get(tool_name)
            if tool and server_name:
                results.append((tool, server_name, score))

        # Cache results
        if self.use_caching:
            self.query_cache[cache_key] = results

        return results

    async def search_tools(self, query: str, top_k: int = 100, active_server: str = None) -> str:
        """
        Search for tools across all MCP servers using semantic search.

        Args:
            query: The search query to find relevant tools
            top_k: Number of top results to return
            active_server: Name of the currently active server (for highlighting)

        Returns:
            String with formatted search results
        """
        # Ensure the index is built or build it
        if not self.is_indexed:
            # Try to build the index
            if self.server_manager and self.server_manager._server_tools:
                await self.index_tools(self.server_manager._server_tools)
            else:
                # If we don't have server_manager or tools, try to index directly
                await self.start_indexing()

            # Wait for indexing to complete (maximum 10 seconds)
            start_time = time.time()
            timeout = 10  # seconds
            while not self.is_indexed and (time.time() - start_time) < timeout:
                await asyncio.sleep(0.5)

            # If still not indexed, return a friendly message
            if not self.is_indexed:
                return (
                    "I'm still preparing the tool index. Please try your search again in a moment. "
                    "This usually takes just a few seconds to complete."
                )

        # If the server manager has an active server but it wasn't provided, use it
        if active_server is None and self.server_manager and hasattr(self.server_manager, "active_server"):
            active_server = self.server_manager.active_server

        results = self.search(query, top_k=top_k)
        if not results:
            return (
                "No relevant tools found. The search provided no results. "
                "You can try searching again with different keywords. "
                "Try using more general terms or focusing on the capability you need."
            )

        # If there's an active server, mark it in the results
        if active_server:
            # Create a new results list with marked active server
            marked_results = []
            for tool, server_name, score in results:
                # If this is the active server, add "(ACTIVE)" marker
                display_server = f"{server_name} (ACTIVE)" if server_name == active_server else server_name
                marked_results.append((tool, display_server, score))
            results = marked_results

        # Format and return the results
        return self._format_search_results(results)

    def _format_search_results(self, results: list[tuple[BaseTool, str, float]]) -> str:
        """Format search results in a consistent format."""
        formatted_output = "Search results\n\n"

        for i, (tool, server_name, score) in enumerate(results):
            # Format score as percentage
            score_pct = f"{score * 100:.1f}%"
            if i < 5:
                logger.info(f"{i}: {tool.name} ({score_pct} match)")
            formatted_output += f"[{i + 1}] Tool: {tool.name} ({score_pct} match)\n"
            formatted_output += f"    Server: {server_name}\n"
            formatted_output += f"    Description: {tool.description}\n\n"

        # Add footer with information about how to use the results
        formatted_output += "\nTo use a tool, connect to the appropriate server first, then invoke the tool."

        return formatted_output

    def _cosine_similarity(self, vec1: list[float], vec2: list[float]) -> float:
        """Calculate cosine similarity between two vectors.

        Args:
            vec1: First vector
            vec2: Second vector

        Returns:
            Cosine similarity between the vectors
        """
        # Calculate dot product
        dot_product = sum(a * b for a, b in zip(vec1, vec2, strict=False))

        # Calculate magnitudes
        magnitude1 = math.sqrt(sum(a * a for a in vec1))
        magnitude2 = math.sqrt(sum(b * b for b in vec2))

        # Avoid division by zero
        if magnitude1 == 0 or magnitude2 == 0:
            return 0.0

        # Calculate cosine similarity
        return dot_product / (magnitude1 * magnitude2)



================================================
FILE: mcp_use/observability/__init__.py
================================================
from dotenv import load_dotenv

# Load environment variables once for all observability modules
load_dotenv()

from . import laminar, langfuse  # noqa
from .callbacks_manager import ObservabilityManager, get_default_manager, create_manager  # noqa

__all__ = ["laminar", "langfuse", "ObservabilityManager", "get_default_manager", "create_manager"]



================================================
FILE: mcp_use/observability/callbacks_manager.py
================================================
"""
Observability callbacks manager for MCP-use.

This module provides a centralized manager for handling observability callbacks
from various platforms (Langfuse, Laminar, etc.) in a clean and extensible way.
"""

import logging

logger = logging.getLogger(__name__)


class ObservabilityManager:
    """
    Manages observability callbacks for MCP agents.

    This class provides a centralized way to collect and manage callbacks
    from various observability platforms (Langfuse, Laminar, etc.).
    """

    def __init__(self, custom_callbacks: list | None = None):
        """
        Initialize the ObservabilityManager.

        Args:
            custom_callbacks: Optional list of custom callbacks to use instead of defaults.
        """
        self.custom_callbacks = custom_callbacks
        self._available_handlers = []
        self._handler_names = []
        self._initialized = False

    def _collect_available_handlers(self) -> None:
        """Collect all available observability handlers from configured platforms."""
        if self._initialized:
            return

        # Import handlers lazily to avoid circular imports
        try:
            from .langfuse import langfuse_handler

            if langfuse_handler is not None:
                self._available_handlers.append(langfuse_handler)
                self._handler_names.append("Langfuse")
                logger.debug("ObservabilityManager: Langfuse handler available")
        except ImportError:
            logger.debug("ObservabilityManager: Langfuse module not available")

        try:
            from .laminar import laminar_initialized

            if laminar_initialized:
                # Laminar is initialized with automatic instrumentation only
                self._handler_names.append("Laminar (auto-instrumentation)")
                logger.debug("ObservabilityManager: Laminar auto-instrumentation active")
        except ImportError:
            logger.debug("ObservabilityManager: Laminar module not available")

        # Future: Add more platforms here...

        self._initialized = True

    def get_callbacks(self) -> list:
        """
        Get the list of callbacks to use.

        Returns:
            List of callbacks - either custom callbacks if provided,
            or all available observability handlers.
        """
        # If custom callbacks were provided, use those
        if self.custom_callbacks is not None:
            logger.debug(f"ObservabilityManager: Using {len(self.custom_callbacks)} custom callbacks")
            return self.custom_callbacks

        # Otherwise, collect and return all available handlers
        self._collect_available_handlers()

        if self._available_handlers:
            logger.debug(f"ObservabilityManager: Using {len(self._available_handlers)} handlers")
        else:
            logger.debug("ObservabilityManager: No callbacks configured")

        return self._available_handlers

    def get_handler_names(self) -> list[str]:
        """
        Get the names of available handlers.

        Returns:
            List of handler names (e.g., ["Langfuse", "Laminar"])
        """
        if self.custom_callbacks is not None:
            # For custom callbacks, try to get their class names
            return [type(cb).__name__ for cb in self.custom_callbacks]

        self._collect_available_handlers()
        return self._handler_names

    def has_callbacks(self) -> bool:
        """
        Check if any callbacks are available.

        Returns:
            True if callbacks are available, False otherwise.
        """
        callbacks = self.get_callbacks()
        return len(callbacks) > 0

    def add_callback(self, callback) -> None:
        """
        Add a callback to the custom callbacks list.

        Args:
            callback: The callback to add.
        """
        if self.custom_callbacks is None:
            self.custom_callbacks = []
        self.custom_callbacks.append(callback)
        logger.debug(f"ObservabilityManager: Added custom callback: {type(callback).__name__}")

    def clear_callbacks(self) -> None:
        """Clear all custom callbacks."""
        self.custom_callbacks = []
        logger.debug("ObservabilityManager: Cleared all custom callbacks")

    def __repr__(self) -> str:
        """String representation of the ObservabilityManager."""
        handler_names = self.get_handler_names()
        if handler_names:
            return f"ObservabilityManager(handlers={handler_names})"
        return "ObservabilityManager(no handlers)"


# Singleton instance for easy access
_default_manager = None


def get_default_manager() -> ObservabilityManager:
    """
    Get the default ObservabilityManager instance.

    Returns:
        The default ObservabilityManager instance (singleton).
    """
    global _default_manager
    if _default_manager is None:
        _default_manager = ObservabilityManager()
    return _default_manager


def create_manager(custom_callbacks: list | None = None) -> ObservabilityManager:
    """
    Create a new ObservabilityManager instance.

    Args:
        custom_callbacks: Optional list of custom callbacks.

    Returns:
        A new ObservabilityManager instance.
    """
    return ObservabilityManager(custom_callbacks=custom_callbacks)



================================================
FILE: mcp_use/observability/laminar.py
================================================
"""
Laminar observability integration for MCP-use.

This module provides automatic instrumentation for Laminar AI observability platform.
"""

import logging
import os

logger = logging.getLogger(__name__)

# Check if Laminar is disabled via environment variable
_laminar_disabled = os.getenv("MCP_USE_LAMINAR", "").lower() == "false"

# Track if Laminar is initialized for other modules to check
laminar_initialized = False

# Only initialize if not disabled and API key is present
if _laminar_disabled:
    logger.debug("Laminar tracing disabled via MCP_USE_LAMINAR environment variable")
elif not os.getenv("LAMINAR_PROJECT_API_KEY"):
    logger.debug("Laminar API key not found - tracing disabled. Set LAMINAR_PROJECT_API_KEY to enable")
else:
    try:
        from lmnr import Instruments, Laminar

        # Initialize Laminar with LangChain instrumentation
        logger.debug("Laminar: Initializing automatic instrumentation for LangChain")

        # Initialize with specific instruments
        instruments = {Instruments.LANGCHAIN, Instruments.OPENAI}
        logger.debug(f"Laminar: Enabling instruments: {[i.name for i in instruments]}")

        Laminar.initialize(project_api_key=os.getenv("LAMINAR_PROJECT_API_KEY"), instruments=instruments)

        laminar_initialized = True
        logger.debug("Laminar observability initialized successfully with LangChain instrumentation")

    except ImportError:
        logger.debug("Laminar package not installed - tracing disabled. Install with: pip install lmnr")
    except Exception as e:
        logger.error(f"Failed to initialize Laminar: {e}")



================================================
FILE: mcp_use/observability/langfuse.py
================================================
import logging
import os

logger = logging.getLogger(__name__)

# Check if Langfuse is disabled via environment variable
_langfuse_disabled = os.getenv("MCP_USE_LANGFUSE", "").lower() == "false"

# Only initialize if not disabled and required keys are present
if _langfuse_disabled:
    logger.debug("Langfuse tracing disabled via MCP_USE_LANGFUSE environment variable")
    langfuse = None
    langfuse_handler = None
elif not os.getenv("LANGFUSE_PUBLIC_KEY") or not os.getenv("LANGFUSE_SECRET_KEY"):
    logger.debug(
        "Langfuse API keys not found - tracing disabled. Set LANGFUSE_PUBLIC_KEY and LANGFUSE_SECRET_KEY to enable"
    )
    langfuse = None
    langfuse_handler = None
else:
    try:
        from langfuse import Langfuse
        from langfuse.langchain import CallbackHandler as LangfuseCallbackHandler

        # Create a custom CallbackHandler wrapper to add logging
        class LoggingCallbackHandler(LangfuseCallbackHandler):
            """Custom Langfuse CallbackHandler that logs intercepted requests."""

            def on_llm_start(self, *args, **kwargs):
                """Log when an LLM request is intercepted."""
                logger.debug(f"Langfuse: LLM start args: {args}, kwargs: {kwargs}")
                return super().on_llm_start(*args, **kwargs)

            def on_chain_start(self, *args, **kwargs):
                """Log when a chain request is intercepted."""
                logger.debug(f"Langfuse: Chain start args: {args}, kwargs: {kwargs}")
                return super().on_chain_start(*args, **kwargs)

            def on_tool_start(self, *args, **kwargs):
                """Log when a tool request is intercepted."""
                logger.debug(f"Langfuse: Tool start args: {args}, kwargs: {kwargs}")
                return super().on_tool_start(*args, **kwargs)

            def on_retriever_start(self, *args, **kwargs):
                """Log when a retriever request is intercepted."""
                logger.debug(f"Langfuse: Retriever start args: {args}, kwargs: {kwargs}")
                return super().on_retriever_start(*args, **kwargs)

        langfuse = Langfuse(
            public_key=os.getenv("LANGFUSE_PUBLIC_KEY"),
            secret_key=os.getenv("LANGFUSE_SECRET_KEY"),
            host=os.getenv("LANGFUSE_HOST", "https://cloud.langfuse.com"),
        )
        langfuse_handler = LoggingCallbackHandler()
        logger.debug("Langfuse observability initialized successfully with logging enabled")
    except ImportError:
        logger.debug("Langfuse package not installed - tracing disabled. Install with: pip install langfuse")
        langfuse = None
        langfuse_handler = None



================================================
FILE: mcp_use/task_managers/__init__.py
================================================
"""
Connectors for various MCP transports.

This module provides interfaces for connecting to MCP implementations
through different transport mechanisms.
"""

from .base import ConnectionManager
from .sse import SseConnectionManager
from .stdio import StdioConnectionManager
from .streamable_http import StreamableHttpConnectionManager
from .websocket import WebSocketConnectionManager

__all__ = [
    "ConnectionManager",
    "StdioConnectionManager",
    "WebSocketConnectionManager",
    "SseConnectionManager",
    "StreamableHttpConnectionManager",
]



================================================
FILE: mcp_use/task_managers/base.py
================================================
"""
Connection management for MCP implementations.

This module provides an abstract base class for different types of connection
managers used in MCP connectors.
"""

import asyncio
from abc import ABC, abstractmethod
from typing import Generic, TypeVar

from ..logging import logger

# Type variable for connection types
T = TypeVar("T")


class ConnectionManager(Generic[T], ABC):
    """Abstract base class for connection managers.

    This class defines the interface for different types of connection managers
    used with MCP connectors.
    """

    def __init__(self):
        """Initialize a new connection manager."""
        self._ready_event = asyncio.Event()
        self._done_event = asyncio.Event()
        self._exception: Exception | None = None
        self._connection: T | None = None
        self._task: asyncio.Task | None = None

    @abstractmethod
    async def _establish_connection(self) -> T:
        """Establish the connection.

        This method should be implemented by subclasses to establish
        the specific type of connection needed.

        Returns:
            The established connection.

        Raises:
            Exception: If connection cannot be established.
        """
        pass

    @abstractmethod
    async def _close_connection(self) -> None:
        """Close the connection.

        This method should be implemented by subclasses to close
        the specific type of connection.

        """
        pass

    async def start(self) -> T:
        """Start the connection manager and establish a connection.

        Returns:
            The established connection.

        Raises:
            Exception: If connection cannot be established.
        """
        # Reset state
        self._ready_event.clear()
        self._done_event.clear()
        self._exception = None

        # Create a task to establish and maintain the connection
        self._task = asyncio.create_task(self._connection_task(), name=f"{self.__class__.__name__}_task")

        # Wait for the connection to be ready or fail
        await self._ready_event.wait()

        # If there was an exception, raise it
        if self._exception:
            raise self._exception

        # Return the connection
        if self._connection is None:
            raise RuntimeError("Connection was not established")
        return self._connection

    async def stop(self) -> None:
        """Stop the connection manager and close the connection."""
        if self._task and not self._task.done():
            # Cancel the task
            logger.debug(f"Cancelling {self.__class__.__name__} task")
            self._task.cancel()

            # Wait for it to complete
            try:
                await self._task
            except asyncio.CancelledError:
                logger.debug(f"{self.__class__.__name__} task cancelled successfully")
            except Exception as e:
                logger.warning(f"Error stopping {self.__class__.__name__} task: {e}")

        # Wait for the connection to be done
        await self._done_event.wait()
        logger.debug(f"{self.__class__.__name__} task completed")

    def get_streams(self) -> T | None:
        """Get the current connection streams.

        Returns:
            The current connection (typically a tuple of read_stream, write_stream) or None if not connected.
        """
        return self._connection

    async def _connection_task(self) -> None:
        """Run the connection task.

        This task establishes and maintains the connection until cancelled.
        """
        logger.debug(f"Starting {self.__class__.__name__} task")
        try:
            # Establish the connection
            self._connection = await self._establish_connection()
            logger.debug(f"{self.__class__.__name__} connected successfully")

            # Signal that the connection is ready
            self._ready_event.set()

            # Wait indefinitely until cancelled
            try:
                # This keeps the connection open until cancelled
                await asyncio.Event().wait()
            except asyncio.CancelledError:
                # Expected when stopping
                logger.debug(f"{self.__class__.__name__} task received cancellation")
                pass

        except Exception as e:
            # Store the exception
            self._exception = e
            logger.error(f"Error in {self.__class__.__name__} task: {e}")

            # Signal that the connection is ready (with error)
            self._ready_event.set()

        finally:
            # Close the connection if it was established
            if self._connection is not None:
                try:
                    await self._close_connection()
                except Exception as e:
                    logger.warning(f"Error closing connection in {self.__class__.__name__}: {e}")
                self._connection = None

            # Signal that the connection is done
            self._done_event.set()



================================================
FILE: mcp_use/task_managers/sse.py
================================================
"""
SSE connection management for MCP implementations.

This module provides a connection manager for SSE-based MCP connections
that ensures proper task isolation and resource cleanup.
"""

from typing import Any

from mcp.client.sse import sse_client

from ..logging import logger
from .base import ConnectionManager


class SseConnectionManager(ConnectionManager[tuple[Any, Any]]):
    """Connection manager for SSE-based MCP connections.

    This class handles the proper task isolation for sse_client context managers
    to prevent the "cancel scope in different task" error. It runs the sse_client
    in a dedicated task and manages its lifecycle.
    """

    def __init__(
        self,
        url: str,
        headers: dict[str, str] | None = None,
        timeout: float = 5,
        sse_read_timeout: float = 60 * 5,
    ):
        """Initialize a new SSE connection manager.

        Args:
            url: The SSE endpoint URL
            headers: Optional HTTP headers
            timeout: Timeout for HTTP operations in seconds
            sse_read_timeout: Timeout for SSE read operations in seconds
        """
        super().__init__()
        self.url = url
        self.headers = headers or {}
        self.timeout = timeout
        self.sse_read_timeout = sse_read_timeout
        self._sse_ctx = None

    async def _establish_connection(self) -> tuple[Any, Any]:
        """Establish an SSE connection.

        Returns:
            A tuple of (read_stream, write_stream)

        Raises:
            Exception: If connection cannot be established.
        """
        # Create the context manager
        self._sse_ctx = sse_client(
            url=self.url,
            headers=self.headers,
            timeout=self.timeout,
            sse_read_timeout=self.sse_read_timeout,
        )

        # Enter the context manager
        read_stream, write_stream = await self._sse_ctx.__aenter__()

        # Return the streams
        return (read_stream, write_stream)

    async def _close_connection(self) -> None:
        """Close the SSE connection."""

        if self._sse_ctx:
            # Exit the context manager
            try:
                await self._sse_ctx.__aexit__(None, None, None)
            except Exception as e:
                logger.warning(f"Error closing SSE context: {e}")
            finally:
                self._sse_ctx = None



================================================
FILE: mcp_use/task_managers/stdio.py
================================================
"""
StdIO connection management for MCP implementations.

This module provides a connection manager for stdio-based MCP connections
that ensures proper task isolation and resource cleanup.
"""

import sys
from typing import Any, TextIO

from mcp import StdioServerParameters
from mcp.client.stdio import stdio_client

from ..logging import logger
from .base import ConnectionManager


class StdioConnectionManager(ConnectionManager[tuple[Any, Any]]):
    """Connection manager for stdio-based MCP connections.

    This class handles the proper task isolation for stdio_client context managers
    to prevent the "cancel scope in different task" error. It runs the stdio_client
    in a dedicated task and manages its lifecycle.
    """

    def __init__(
        self,
        server_params: StdioServerParameters,
        errlog: TextIO = sys.stderr,
    ):
        """Initialize a new stdio connection manager.

        Args:
            server_params: The parameters for the stdio server
            errlog: The error log stream
        """
        super().__init__()
        self.server_params = server_params
        self.errlog = errlog
        self._stdio_ctx = None

    async def _establish_connection(self) -> tuple[Any, Any]:
        """Establish a stdio connection.

        Returns:
            A tuple of (read_stream, write_stream)

        Raises:
            Exception: If connection cannot be established.
        """
        # Create the context manager
        self._stdio_ctx = stdio_client(self.server_params, self.errlog)

        # Enter the context manager
        read_stream, write_stream = await self._stdio_ctx.__aenter__()

        # Return the streams
        return (read_stream, write_stream)

    async def _close_connection(self) -> None:
        """Close the stdio connection."""
        if self._stdio_ctx:
            # Exit the context manager
            try:
                await self._stdio_ctx.__aexit__(None, None, None)
            except Exception as e:
                logger.warning(f"Error closing stdio context: {e}")
            finally:
                self._stdio_ctx = None



================================================
FILE: mcp_use/task_managers/streamable_http.py
================================================
"""
Streamable HTTP connection management for MCP implementations.

This module provides a connection manager for streamable HTTP-based MCP connections
that ensures proper task isolation and resource cleanup.
"""

from datetime import timedelta
from typing import Any

from mcp.client.streamable_http import streamablehttp_client

from ..logging import logger
from .base import ConnectionManager


class StreamableHttpConnectionManager(ConnectionManager[tuple[Any, Any]]):
    """Connection manager for streamable HTTP-based MCP connections.

    This class handles the proper task isolation for HTTP streaming connections
    to prevent the "cancel scope in different task" error. It runs the http_stream_client
    in a dedicated task and manages its lifecycle.
    """

    def __init__(
        self,
        url: str,
        headers: dict[str, str] | None = None,
        timeout: float = 5,
        read_timeout: float = 60 * 5,
    ):
        """Initialize a new streamable HTTP connection manager.

        Args:
            url: The HTTP endpoint URL
            headers: Optional HTTP headers
            timeout: Timeout for HTTP operations in seconds
            read_timeout: Timeout for HTTP read operations in seconds
        """
        super().__init__()
        self.url = url
        self.headers = headers or {}
        self.timeout = timedelta(seconds=timeout)
        self.read_timeout = timedelta(seconds=read_timeout)
        self._http_ctx = None

    async def _establish_connection(self) -> tuple[Any, Any]:
        """Establish a streamable HTTP connection.

        Returns:
            A tuple of (read_stream, write_stream)

        Raises:
            Exception: If connection cannot be established.
        """
        # Create the context manager
        self._http_ctx = streamablehttp_client(
            url=self.url,
            headers=self.headers,
            timeout=self.timeout,
            sse_read_timeout=self.read_timeout,
        )

        # Enter the context manager. Ignoring the session id callback
        read_stream, write_stream, _ = await self._http_ctx.__aenter__()

        # Return the streams
        return (read_stream, write_stream)

    async def _close_connection(self) -> None:
        """Close the streamable HTTP connection."""

        if self._http_ctx:
            # Exit the context manager
            try:
                await self._http_ctx.__aexit__(None, None, None)
            except Exception as e:
                # Only log if it's not a normal connection termination
                logger.debug(f"Streamable HTTP context cleanup: {e}")
            finally:
                self._http_ctx = None



================================================
FILE: mcp_use/task_managers/websocket.py
================================================
"""
WebSocket connection management for MCP implementations.

This module provides a connection manager for WebSocket-based MCP connections.
"""

from typing import Any

from mcp.client.websocket import websocket_client

from ..logging import logger
from .base import ConnectionManager


class WebSocketConnectionManager(ConnectionManager[tuple[Any, Any]]):
    """Connection manager for WebSocket-based MCP connections.

    This class handles the lifecycle of WebSocket connections, ensuring proper
    connection establishment and cleanup.
    """

    def __init__(
        self,
        url: str,
        headers: dict[str, str] | None = None,
    ):
        """Initialize a new WebSocket connection manager.

        Args:
            url: The WebSocket URL to connect to
            headers: Optional HTTP headers
        """
        super().__init__()
        self.url = url
        self.headers = headers or {}

    async def _establish_connection(self) -> tuple[Any, Any]:
        """Establish a WebSocket connection.

        Returns:
            The established WebSocket connection

        Raises:
            Exception: If connection cannot be established
        """
        logger.debug(f"Connecting to WebSocket: {self.url}")
        # Create the context manager
        # Note: The current MCP websocket_client implementation doesn't support headers
        # If headers need to be passed, this would need to be updated when MCP supports it
        self._ws_ctx = websocket_client(self.url)

        # Enter the context manager
        read_stream, write_stream = await self._ws_ctx.__aenter__()

        # Return the streams
        return (read_stream, write_stream)

    async def _close_connection(self) -> None:
        """Close the WebSocket connection."""
        if self._ws_ctx:
            # Exit the context manager
            try:
                logger.debug("Closing WebSocket connection")
                await self._ws_ctx.__aexit__(None, None, None)
            except Exception as e:
                logger.warning(f"Error closing WebSocket connection: {e}")
            finally:
                self._ws_ctx = None



================================================
FILE: mcp_use/telemetry/__init__.py
================================================
[Empty file]


================================================
FILE: mcp_use/telemetry/events.py
================================================
from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Any


class BaseTelemetryEvent(ABC):
    """Base class for all telemetry events"""

    @property
    @abstractmethod
    def name(self) -> str:
        """Event name for tracking"""
        pass

    @property
    @abstractmethod
    def properties(self) -> dict[str, Any]:
        """Event properties to send with the event"""
        pass


@dataclass
class MCPAgentExecutionEvent(BaseTelemetryEvent):
    """Comprehensive event for tracking complete MCP agent execution"""

    # Execution method and context
    execution_method: str  # "run" or "astream"
    query: str  # The actual user query
    success: bool

    # Agent configuration
    model_provider: str
    model_name: str
    server_count: int
    server_identifiers: list[dict[str, str]]
    total_tools_available: int
    tools_available_names: list[str]
    max_steps_configured: int
    memory_enabled: bool
    use_server_manager: bool

    # Execution PARAMETERS
    max_steps_used: int | None
    manage_connector: bool
    external_history_used: bool

    # Execution results
    steps_taken: int | None = None
    tools_used_count: int | None = None
    tools_used_names: list[str] | None = None
    response: str | None = None  # The actual response
    execution_time_ms: int | None = None
    error_type: str | None = None

    # Context
    conversation_history_length: int | None = None

    @property
    def name(self) -> str:
        return "mcp_agent_execution"

    @property
    def properties(self) -> dict[str, Any]:
        return {
            # Core execution info
            "execution_method": self.execution_method,
            "query": self.query,
            "query_length": len(self.query),
            "success": self.success,
            # Agent configuration
            "model_provider": self.model_provider,
            "model_name": self.model_name,
            "server_count": self.server_count,
            "server_identifiers": self.server_identifiers,
            "total_tools_available": self.total_tools_available,
            "tools_available_names": self.tools_available_names,
            "max_steps_configured": self.max_steps_configured,
            "memory_enabled": self.memory_enabled,
            "use_server_manager": self.use_server_manager,
            # Execution parameters (always include, even if None)
            "max_steps_used": self.max_steps_used,
            "manage_connector": self.manage_connector,
            "external_history_used": self.external_history_used,
            # Execution results (always include, even if None)
            "steps_taken": self.steps_taken,
            "tools_used_count": self.tools_used_count,
            "tools_used_names": self.tools_used_names,
            "response": self.response,
            "response_length": len(self.response) if self.response else None,
            "execution_time_ms": self.execution_time_ms,
            "error_type": self.error_type,
            "conversation_history_length": self.conversation_history_length,
        }



================================================
FILE: mcp_use/telemetry/telemetry.py
================================================
import logging
import os
import platform
import uuid
from collections.abc import Callable
from functools import wraps
from pathlib import Path
from typing import Any

from posthog import Posthog
from scarf import ScarfEventLogger

from mcp_use.logging import MCP_USE_DEBUG
from mcp_use.telemetry.events import BaseTelemetryEvent, MCPAgentExecutionEvent
from mcp_use.telemetry.utils import get_package_version
from mcp_use.utils import singleton

logger = logging.getLogger(__name__)


def requires_telemetry(func: Callable) -> Callable:
    """Decorator that skips function execution if telemetry is disabled"""

    @wraps(func)
    def wrapper(self, *args, **kwargs):
        if not self._posthog_client and not self._scarf_client:
            return None
        return func(self, *args, **kwargs)

    return wrapper


def get_cache_home() -> Path:
    """Get platform-appropriate cache directory."""
    # XDG_CACHE_HOME for Linux and manually set envs
    env_var: str | None = os.getenv("XDG_CACHE_HOME")
    if env_var and (path := Path(env_var)).is_absolute():
        return path

    system = platform.system()
    if system == "Windows":
        appdata = os.getenv("LOCALAPPDATA") or os.getenv("APPDATA")
        if appdata:
            return Path(appdata)
        return Path.home() / "AppData" / "Local"
    elif system == "Darwin":  # macOS
        return Path.home() / "Library" / "Caches"
    else:  # Linux or other Unix
        return Path.home() / ".cache"


@singleton
class Telemetry:
    """
    Service for capturing anonymized telemetry data via PostHog and Scarf.
    If the environment variable `MCP_USE_ANONYMIZED_TELEMETRY=false`, telemetry will be disabled.
    """

    USER_ID_PATH = str(get_cache_home() / "mcp_use_3" / "telemetry_user_id")
    VERSION_DOWNLOAD_PATH = str(get_cache_home() / "mcp_use" / "download_version")
    PROJECT_API_KEY = "phc_lyTtbYwvkdSbrcMQNPiKiiRWrrM1seyKIMjycSvItEI"
    HOST = "https://eu.i.posthog.com"
    SCARF_GATEWAY_URL = "https://mcpuse.gateway.scarf.sh/events"
    UNKNOWN_USER_ID = "UNKNOWN_USER_ID"

    _curr_user_id = None

    def __init__(self):
        telemetry_disabled = os.getenv("MCP_USE_ANONYMIZED_TELEMETRY", "true").lower() == "false"

        if telemetry_disabled:
            self._posthog_client = None
            self._scarf_client = None
            logger.debug("Telemetry disabled")
        else:
            logger.info("Anonymized telemetry enabled. Set MCP_USE_ANONYMIZED_TELEMETRY=false to disable.")

            # Initialize PostHog
            try:
                self._posthog_client = Posthog(
                    project_api_key=self.PROJECT_API_KEY,
                    host=self.HOST,
                    disable_geoip=False,
                    enable_exception_autocapture=True,
                )

                # Silence posthog's logging unless debug mode (level 2)
                if MCP_USE_DEBUG < 2:
                    posthog_logger = logging.getLogger("posthog")
                    posthog_logger.disabled = True

            except Exception as e:
                logger.warning(f"Failed to initialize PostHog telemetry: {e}")
                self._posthog_client = None

            # Initialize Scarf
            try:
                self._scarf_client = ScarfEventLogger(
                    endpoint_url=self.SCARF_GATEWAY_URL,
                    timeout=3.0,
                    verbose=MCP_USE_DEBUG >= 2,
                )

                # Silence scarf's logging unless debug mode (level 2)
                if MCP_USE_DEBUG < 2:
                    scarf_logger = logging.getLogger("scarf")
                    scarf_logger.disabled = True

            except Exception as e:
                logger.warning(f"Failed to initialize Scarf telemetry: {e}")
                self._scarf_client = None

    @property
    def user_id(self) -> str:
        """Get or create a persistent anonymous user ID"""
        if self._curr_user_id:
            return self._curr_user_id

        try:
            is_first_time = not os.path.exists(self.USER_ID_PATH)

            if is_first_time:
                logger.debug(f"Creating user ID path: {self.USER_ID_PATH}")
                os.makedirs(os.path.dirname(self.USER_ID_PATH), exist_ok=True)
                with open(self.USER_ID_PATH, "w") as f:
                    new_user_id = str(uuid.uuid4())
                    f.write(new_user_id)
                self._curr_user_id = new_user_id

                logger.debug(f"User ID path created: {self.USER_ID_PATH}")
            else:
                with open(self.USER_ID_PATH) as f:
                    self._curr_user_id = f.read().strip()

            # Always check for version-based download tracking
            self.track_package_download(
                {
                    "triggered_by": "user_id_property",
                }
            )
        except Exception as e:
            logger.debug(f"Failed to get/create user ID: {e}")
            self._curr_user_id = self.UNKNOWN_USER_ID

        return self._curr_user_id

    @requires_telemetry
    def capture(self, event: BaseTelemetryEvent) -> None:
        """Capture a telemetry event"""
        # Send to PostHog
        if self._posthog_client:
            try:
                # Add package version to all events
                properties = event.properties.copy()
                properties["mcp_use_version"] = get_package_version()

                self._posthog_client.capture(distinct_id=self.user_id, event=event.name, properties=properties)
            except Exception as e:
                logger.debug(f"Failed to track PostHog event {event.name}: {e}")

        # Send to Scarf
        if self._scarf_client:
            try:
                # Add package version and user_id to all events
                properties = {}
                properties["mcp_use_version"] = get_package_version()
                properties["user_id"] = self.user_id
                properties["event"] = event.name

                # Convert complex types to simple types for Scarf compatibility
                self._scarf_client.log_event(properties=properties)
            except Exception as e:
                logger.debug(f"Failed to track Scarf event {event.name}: {e}")

    @requires_telemetry
    def track_package_download(self, properties: dict[str, Any] | None = None) -> None:
        """Track package download event specifically for Scarf analytics"""
        if self._scarf_client:
            try:
                current_version = get_package_version()
                should_track = False
                first_download = False

                # Check if version file exists
                if not os.path.exists(self.VERSION_DOWNLOAD_PATH):
                    # First download
                    should_track = True
                    first_download = True

                    # Create directory and save version
                    os.makedirs(os.path.dirname(self.VERSION_DOWNLOAD_PATH), exist_ok=True)
                    with open(self.VERSION_DOWNLOAD_PATH, "w") as f:
                        f.write(current_version)
                else:
                    # Read saved version
                    with open(self.VERSION_DOWNLOAD_PATH) as f:
                        saved_version = f.read().strip()

                    # Compare versions (simple string comparison for now)
                    if current_version > saved_version:
                        should_track = True
                        first_download = False

                        # Update saved version
                        with open(self.VERSION_DOWNLOAD_PATH, "w") as f:
                            f.write(current_version)

                if should_track:
                    logger.debug(f"Tracking package download event with properties: {properties}")
                    # Add package version and user_id to event
                    event_properties = (properties or {}).copy()
                    event_properties["mcp_use_version"] = current_version
                    event_properties["user_id"] = self.user_id
                    event_properties["event"] = "package_download"
                    event_properties["first_download"] = first_download

                    # Convert complex types to simple types for Scarf compatibility
                    self._scarf_client.log_event(properties=event_properties)
            except Exception as e:
                logger.debug(f"Failed to track Scarf package_download event: {e}")

    @requires_telemetry
    def track_agent_execution(
        self,
        execution_method: str,
        query: str,
        success: bool,
        model_provider: str,
        model_name: str,
        server_count: int,
        server_identifiers: list[dict[str, str]],
        total_tools_available: int,
        tools_available_names: list[str],
        max_steps_configured: int,
        memory_enabled: bool,
        use_server_manager: bool,
        max_steps_used: int | None,
        manage_connector: bool,
        external_history_used: bool,
        steps_taken: int | None = None,
        tools_used_count: int | None = None,
        tools_used_names: list[str] | None = None,
        response: str | None = None,
        execution_time_ms: int | None = None,
        error_type: str | None = None,
        conversation_history_length: int | None = None,
    ) -> None:
        """Track comprehensive agent execution"""
        event = MCPAgentExecutionEvent(
            execution_method=execution_method,
            query=query,
            success=success,
            model_provider=model_provider,
            model_name=model_name,
            server_count=server_count,
            server_identifiers=server_identifiers,
            total_tools_available=total_tools_available,
            tools_available_names=tools_available_names,
            max_steps_configured=max_steps_configured,
            memory_enabled=memory_enabled,
            use_server_manager=use_server_manager,
            max_steps_used=max_steps_used,
            manage_connector=manage_connector,
            external_history_used=external_history_used,
            steps_taken=steps_taken,
            tools_used_count=tools_used_count,
            tools_used_names=tools_used_names,
            response=response,
            execution_time_ms=execution_time_ms,
            error_type=error_type,
            conversation_history_length=conversation_history_length,
        )
        self.capture(event)

    @requires_telemetry
    def flush(self) -> None:
        """Flush any queued telemetry events"""
        # Flush PostHog
        if self._posthog_client:
            try:
                self._posthog_client.flush()
                logger.debug("PostHog client telemetry queue flushed")
            except Exception as e:
                logger.debug(f"Failed to flush PostHog client: {e}")

        # Scarf events are sent immediately, no flush needed
        if self._scarf_client:
            logger.debug("Scarf telemetry events sent immediately (no flush needed)")

    @requires_telemetry
    def shutdown(self) -> None:
        """Shutdown telemetry clients and flush remaining events"""
        # Shutdown PostHog
        if self._posthog_client:
            try:
                self._posthog_client.shutdown()
                logger.debug("PostHog client shutdown successfully")
            except Exception as e:
                logger.debug(f"Error shutting down PostHog client: {e}")

        # Scarf doesn't require explicit shutdown
        if self._scarf_client:
            logger.debug("Scarf telemetry client shutdown (no action needed)")



================================================
FILE: mcp_use/telemetry/utils.py
================================================
"""
Utility functions for extracting model information from LangChain LLMs.

This module provides utilities to extract provider and model information
from LangChain language models for telemetry purposes.
"""

import importlib.metadata

from langchain_core.language_models.base import BaseLanguageModel


def get_package_version() -> str:
    """Get the current mcp-use package version."""
    try:
        return importlib.metadata.version("mcp-use")
    except importlib.metadata.PackageNotFoundError:
        return "unknown"


def get_model_provider(llm: BaseLanguageModel) -> str:
    """Extract the model provider from LangChain LLM using BaseChatModel standards."""
    # Use LangChain's standard _llm_type property for identification
    return getattr(llm, "_llm_type", llm.__class__.__name__.lower())


def get_model_name(llm: BaseLanguageModel) -> str:
    """Extract the model name from LangChain LLM using BaseChatModel standards."""
    # First try _identifying_params which may contain model info
    if hasattr(llm, "_identifying_params"):
        identifying_params = llm._identifying_params
        if isinstance(identifying_params, dict):
            # Common keys that contain model names
            for key in ["model", "model_name", "model_id", "deployment_name"]:
                if key in identifying_params:
                    return str(identifying_params[key])

    # Fallback to direct model attributes
    return getattr(llm, "model", getattr(llm, "model_name", llm.__class__.__name__))


def extract_model_info(llm: BaseLanguageModel) -> tuple[str, str]:
    """Extract both provider and model name from LangChain LLM.

    Returns:
        Tuple of (provider, model_name)
    """
    return get_model_provider(llm), get_model_name(llm)



================================================
FILE: mcp_use/types/sandbox.py
================================================
"""Type definitions for sandbox-related configurations."""

from typing import NotRequired, TypedDict


class SandboxOptions(TypedDict):
    """Configuration options for sandbox execution.

    This type defines the configuration options available when running
    MCP servers in a sandboxed environment (e.g., using E2B).
    """

    api_key: str
    """Direct API key for sandbox provider (e.g., E2B API key).
    If not provided, will use E2B_API_KEY environment variable."""

    sandbox_template_id: NotRequired[str]
    """Template ID for the sandbox environment.
    Default: 'base'"""

    supergateway_command: NotRequired[str]
    """Command to run supergateway.
    Default: 'npx -y supergateway'"""



================================================
FILE: tests/conftest.py
================================================
"""
Pytest configuration file.

This module contains pytest fixtures and configuration for all tests.
"""

import os
import sys

import pytest

# Add the parent directory to the path so tests can import the package
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


# Fixture for mock session
@pytest.fixture
def mock_session():
    """Return a mock session object for testing."""
    from unittest.mock import AsyncMock, MagicMock

    # Create mock connector
    connector = MagicMock()
    connector.connect = AsyncMock()
    connector.disconnect = AsyncMock()
    connector.initialize = AsyncMock(return_value={"session_id": "test_session"})
    connector.tools = [{"name": "test_tool"}]
    connector.call_tool = AsyncMock(return_value={"result": "success"})

    return connector


# Register marks
def pytest_configure(config):
    """Register custom pytest marks."""
    config.addinivalue_line("markers", "slow: mark test as slow running")
    config.addinivalue_line("markers", "integration: mark test as integration test")



================================================
FILE: tests/integration/__init__.py
================================================
# Integration tests for MCP transport layers



================================================
FILE: tests/integration/conftest.py
================================================
import asyncio
import logging
import subprocess
from pathlib import Path

import pytest

logger = logging.getLogger(__name__)


@pytest.fixture(scope="session")
async def primitive_server():
    """Starts the primitive_server.py as a subprocess for integration tests."""
    server_path = Path(__file__).parent / "servers_for_testing" / "primitive_server.py"
    logger.info(f"Starting primitive server: python {server_path}")

    process = subprocess.Popen(
        ["python", str(server_path)],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
    )

    # Allow server to initialize
    await asyncio.sleep(2)

    yield "http://127.0.0.1:8080"

    logger.info("Cleaning up primitive server process")
    if process.poll() is None:
        process.terminate()
        try:
            process.wait(timeout=5)
        except subprocess.TimeoutExpired:
            logger.warning("Server process did not terminate gracefully, killing.")
            process.kill()
            process.wait()
    logger.info("Primitive server cleanup complete.")



================================================
FILE: tests/integration/others/test_custom_streaming_integration.py
================================================
import asyncio
import subprocess
import time
from pathlib import Path

import pytest

from mcp_use import MCPClient


@pytest.fixture
async def streaming_server_process():
    """Start the custom streaming server process for testing"""
    server_path = Path(__file__).parent.parent / "servers_for_testing" / "custom_streaming_server.py"

    print(f"Starting custom streaming server: python {server_path}")

    # Start the server process
    process = subprocess.Popen(
        ["python", str(server_path)],
        cwd=str(server_path.parent),
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
    )

    # Give the server more time to start (it's more complex)
    await asyncio.sleep(3)
    server_url = "http://127.0.0.1:8080"
    yield server_url

    # Cleanup
    print("Cleaning up streaming server process")
    if process.poll() is None:
        process.terminate()
        try:
            process.wait(timeout=10)
        except subprocess.TimeoutExpired:
            print("Process didn't terminate gracefully, killing it")
            process.kill()
            process.wait()

    print("Streaming server cleanup complete")


@pytest.mark.asyncio
async def test_custom_streaming_sse_connection(streaming_server_process):
    """Test that we can connect to the custom streaming SSE MCP server"""
    server_url = streaming_server_process
    config = {"mcpServers": {"customStreaming": {"url": f"{server_url}/sse"}}}

    client = MCPClient(config=config)
    try:
        await client.create_all_sessions()
        session = client.get_session("customStreaming")

        # Verify session was created
        assert session is not None, "Session should be created"

        # For custom streaming server, we mainly test the connection
        # The server doesn't expose traditional MCP tools like the simple server
        # Instead it provides streaming endpoints
        print("Custom streaming server connection test passed")

    finally:
        await client.close_all_sessions()


@pytest.mark.asyncio
async def test_mcp_tools_availability(streaming_server_process):
    """Test that MCP tools are available and functional"""
    server_url = streaming_server_process
    config = {"mcpServers": {"customStreaming": {"url": f"{server_url}/sse"}}}

    client = MCPClient(config=config)
    try:
        await client.create_all_sessions()
        session = client.get_session("customStreaming")

        # Verify session was created
        assert session is not None, "Session should be created"

        # Get tools and verify they exist
        tools = await session.list_tools()
        assert tools is not None, "Tools should be available"
        assert len(tools) > 0, "At least one tool should be available"

        # Verify expected tools exist
        tool_names = [tool.name for tool in tools]
        expected_tools = [
            "start_monitoring",
            "stop_monitoring",
            "get_current_metrics",
            "get_system_status",
            "get_latest_logs",
        ]

        for expected_tool in expected_tools:
            assert expected_tool in tool_names, f"Tool '{expected_tool}' should be available"
            print(f"✓ Tool '{expected_tool}' is available")

    finally:
        await client.close_all_sessions()


@pytest.mark.asyncio
async def test_mcp_tool_execution(streaming_server_process):
    """Test that MCP tools can be executed and return expected results"""
    server_url = streaming_server_process
    config = {"mcpServers": {"customStreaming": {"url": f"{server_url}/sse"}}}

    client = MCPClient(config=config)
    try:
        await client.create_all_sessions()
        session = client.get_session("customStreaming")

        # Test start_monitoring tool
        result = await session.call_tool("start_monitoring", {})
        assert result is not None, "start_monitoring should return a result"
        assert result.content is not None, "Result should have content"

        import json

        response_data = json.loads(result.content[0].text)
        assert "task_id" in response_data, "Response should contain task_id"
        assert "status" in response_data, "Response should contain status"
        assert response_data["status"] == "started", "Status should be 'started'"

        task_id = response_data["task_id"]
        print(f"✓ Started monitoring task: {task_id}")

        # Test stop_monitoring tool
        result = await session.call_tool("stop_monitoring", {"task_id": task_id})
        assert result is not None, "stop_monitoring should return a result"

        response_data = json.loads(result.content[0].text)
        assert response_data["task_id"] == task_id, "Task ID should match"
        assert response_data["status"] == "stopped", "Status should be 'stopped'"

        print(f"✓ Stopped monitoring task: {task_id}")

    finally:
        await client.close_all_sessions()


@pytest.mark.asyncio
async def test_long_running_sse_stream(streaming_server_process):
    """Test that SSE streams can run for extended periods"""
    import aiohttp

    server_url = streaming_server_process
    sse_url = f"{server_url}/sse"

    received_events = []

    async with aiohttp.ClientSession() as session:
        async with session.get(sse_url) as response:
            assert response.status == 200, "SSE endpoint should return 200"

            # Read events for a limited time
            start_time = time.time()
            timeout = 15  # seconds

            async for line in response.content:
                if time.time() - start_time > timeout:
                    break

                line = line.decode("utf-8").strip()
                if line.startswith("data:") or line.startswith("event:"):
                    received_events.append(line)
                    print(f"Received SSE: {line[:100]}...")  # Truncate long lines

                # Stop after receiving some events
                if len(received_events) >= 5:
                    break

            # Verify we received some events
            assert len(received_events) > 0, "Should receive at least some SSE events"
            print(f"✓ Received {len(received_events)} SSE events during {timeout}s test")


@pytest.mark.asyncio
async def test_mcp_resources_and_prompts(streaming_server_process):
    """Test that MCP resources and prompts are available and functional"""
    server_url = streaming_server_process
    config = {"mcpServers": {"customStreaming": {"url": f"{server_url}/sse"}}}

    client = MCPClient(config=config)
    try:
        await client.create_all_sessions()
        session = client.get_session("customStreaming")

        # Test resources
        resources = await session.list_resources()
        assert resources is not None, "Resources should be available"

        resource_uris = [str(resource.uri) for resource in resources]
        expected_resources = [
            "stream://metrics/current",
            "stream://status/current",
            "stream://logs/recent",
        ]

        for expected_resource in expected_resources:
            assert expected_resource in resource_uris, f"Resource '{expected_resource}' should be available"
            print(f"✓ Resource '{expected_resource}' is available")

        # Test reading a resource (skip for now due to FastMCP resource implementation issue)
        try:
            metrics_resource = await session.read_resource("stream://metrics/current")
            assert metrics_resource is not None, "Metrics resource should return data"
            assert metrics_resource.contents is not None, "Resource should have content"

            import json

            metrics_data = json.loads(metrics_resource.contents[0].text)
            expected_fields = [
                "timestamp",
                "cpu_percent",
                "memory_percent",
                "disk_io_read",
                "disk_io_write",
                "network_in",
                "network_out",
                "active_processes",
            ]

            for field in expected_fields:
                assert field in metrics_data, f"Metrics should contain {field}"

            print(
                f"✓ Metrics resource data: CPU={metrics_data['cpu_percent']:.1f}%, "
                f"Memory={metrics_data['memory_percent']:.1f}%"
            )
        except Exception as e:
            print(f"⚠ Resource reading test skipped due to FastMCP implementation issue: {e}")
            # Just verify the resource is listed - that's sufficient for this test

        # Test prompts
        prompts = await session.list_prompts()
        assert prompts is not None, "Prompts should be available"
        assert len(prompts) > 0, "At least one prompt should be available"

        prompt_names = [prompt.name for prompt in prompts]
        expected_prompts = ["monitoring_prompt", "performance_analysis_prompt"]

        for expected_prompt in expected_prompts:
            assert expected_prompt in prompt_names, f"Prompt '{expected_prompt}' should be available"
            print(f"✓ Prompt '{expected_prompt}' is available")

    finally:
        await client.close_all_sessions()


@pytest.mark.asyncio
async def test_mcp_monitoring_tools(streaming_server_process):
    """Test that monitoring tools return proper data"""
    server_url = streaming_server_process
    config = {"mcpServers": {"customStreaming": {"url": f"{server_url}/sse"}}}

    client = MCPClient(config=config)
    try:
        await client.create_all_sessions()
        session = client.get_session("customStreaming")

        # Test get_current_metrics tool
        result = await session.call_tool("get_current_metrics", {})
        assert result is not None, "get_current_metrics should return a result"

        import json

        metrics_data = json.loads(result.content[0].text)
        expected_fields = ["timestamp", "cpu_percent", "memory_percent", "active_processes"]

        for field in expected_fields:
            assert field in metrics_data, f"Metrics should contain {field}"

        print(f"✓ Metrics tool: CPU={metrics_data['cpu_percent']:.1f}%, Memory={metrics_data['memory_percent']:.1f}%")

        # Test get_system_status tool
        result = await session.call_tool("get_system_status", {})
        assert result is not None, "get_system_status should return a result"

        status_data = json.loads(result.content[0].text)
        assert "timestamp" in status_data, "Status should contain timestamp"
        assert "services" in status_data, "Status should contain services"
        assert len(status_data["services"]) > 0, "Should have at least one service"

        print(f"✓ Status tool: {len(status_data['services'])} services monitored")

        # Test get_latest_logs tool
        result = await session.call_tool("get_latest_logs", {"count": 5})
        assert result is not None, "get_latest_logs should return a result"

        logs_data = json.loads(result.content[0].text)
        assert isinstance(logs_data, list), "Logs should be a list"
        assert len(logs_data) == 5, "Should return 5 log entries"

        for log_entry in logs_data:
            assert "timestamp" in log_entry, "Log entry should have timestamp"
            assert "level" in log_entry, "Log entry should have level"
            assert "message" in log_entry, "Log entry should have message"

        print(f"✓ Logs tool: Retrieved {len(logs_data)} log entries")

    finally:
        await client.close_all_sessions()



================================================
FILE: tests/integration/primitives/test_discovery.py
================================================
import asyncio

import pytest

from mcp_use.client import MCPClient


@pytest.mark.asyncio
async def test_tool_list_update(primitive_server):
    """Tests that the tool list is automatically updated after a change notification."""
    config = {"mcpServers": {"PrimitiveServer": {"url": f"{primitive_server}/mcp"}}}
    client = MCPClient(config)
    try:
        await client.create_all_sessions()
        session = client.get_session("PrimitiveServer")
        # Initial state: Check that all tools are present
        tools = await session.list_tools()
        assert "tool_to_disable" in [tool.name for tool in tools]

        # Trigger the change (this will disable the tool and send a notification)
        await session.call_tool(name="change_tools", arguments={})

        # The tool list should be refreshed automatically on next call
        tools = await session.list_tools()
        assert "tool_to_disable" not in [tool.name for tool in tools]
    finally:
        await client.close_all_sessions()


@pytest.mark.asyncio
async def test_resource_list_update(primitive_server):
    """Tests that the resource list is automatically updated after a change notification."""
    config = {"mcpServers": {"PrimitiveServer": {"url": f"{primitive_server}/mcp"}}}
    client = MCPClient(config)
    try:
        await client.create_all_sessions()
        session = client.get_session("PrimitiveServer")
        # Initial state: Check that we have at least one resource
        resources = await session.list_resources()
        assert "resource_to_disable" in [resource.name for resource in resources]

        # Trigger the change (this will disable a resource and send a notification)
        await session.call_tool(name="change_resources", arguments={})

        # The resource list should be refreshed automatically on next call
        resources = await session.list_resources()
        assert "resource_to_disable" not in [resource.name for resource in resources]
    finally:
        await client.close_all_sessions()


@pytest.mark.asyncio
async def test_prompt_list_update(primitive_server):
    """Tests that the prompt list is automatically updated after a change notification."""
    config = {"mcpServers": {"PrimitiveServer": {"url": f"{primitive_server}/mcp"}}}
    client = MCPClient(config)
    try:
        await client.create_all_sessions()
        session = client.get_session("PrimitiveServer")
        # Initial state: Check that all prompts are present
        prompts = await session.list_prompts()
        assert "prompt_to_disable" in [prompt.name for prompt in prompts]

        # Trigger the change (this will disable the prompt and send a notification)
        await session.call_tool(name="change_prompts", arguments={})
        # The prompt list should be refreshed automatically on next call
        prompts = await session.list_prompts()
        assert "prompt_to_disable" not in [prompt.name for prompt in prompts]
    finally:
        await client.close_all_sessions()



================================================
FILE: tests/integration/primitives/test_elicitation.py
================================================
import pytest
from mcp.client.session import RequestContext
from mcp.types import ElicitRequestParams, ElicitResult

from mcp_use.client import MCPClient


async def elicitation_callback(ctx: RequestContext, params: ElicitRequestParams) -> ElicitResult:
    """Elicit the user to summarize text."""
    return ElicitResult(
        action="accept",
        content={"quantity": 1, "unit": "kg"},
    )


@pytest.mark.asyncio
async def test_elicitation(primitive_server):
    config = {"mcpServers": {"PrimitiveServer": {"url": f"{primitive_server}/mcp"}}}
    client = MCPClient(config, elicitation_callback=elicitation_callback)
    try:
        await client.create_all_sessions()
        session = client.get_session("PrimitiveServer")
        result = await session.call_tool(name="purchase_item", arguments={})
        assert result.content[0].text == "You are buying 1 kg of the item"
    finally:
        await client.close_all_sessions()



================================================
FILE: tests/integration/primitives/test_logging.py
================================================
import pytest

from mcp_use.client import MCPClient


async def handle_logging(message):
    print(f"Received logging message: {message}")


@pytest.mark.asyncio
async def test_tool(primitive_server):
    """Tests the 'add' tool on the primitive server."""
    config = {"mcpServers": {"PrimitiveServer": {"url": f"{primitive_server}/mcp"}}}
    client = MCPClient(config, logging_callback=handle_logging)
    try:
        await client.create_all_sessions()
        session = client.get_session("PrimitiveServer")
        result = await session.call_tool(name="logging_tool", arguments={})
        assert result.content[0].text == "Logging tool completed"
    finally:
        await client.close_all_sessions()



================================================
FILE: tests/integration/primitives/test_notifications.py
================================================
import pytest

from mcp_use.client import MCPClient


async def handle_messages(message):
    print(f"Received message: {message}")


@pytest.mark.asyncio
async def test_tool(primitive_server):
    """Tests the 'add' tool on the primitive server."""
    config = {"mcpServers": {"PrimitiveServer": {"url": f"{primitive_server}/mcp"}}}
    client = MCPClient(config, message_handler=handle_messages)
    try:
        await client.create_all_sessions()
        session = client.get_session("PrimitiveServer")

        result = await session.call_tool(name="long_running_task", arguments={"task_name": "test", "steps": 5})
        assert result.content[0].text == "Task 'test' completed"
    finally:
        await client.close_all_sessions()



================================================
FILE: tests/integration/primitives/test_prompts.py
================================================
import pytest

from mcp_use.client import MCPClient


@pytest.mark.asyncio
async def test_summarize_text_prompt(primitive_server):
    """Tests the 'summarize_text' prompt primitive."""
    config = {"mcpServers": {"PrimitiveServer": {"url": f"{primitive_server}/mcp"}}}
    client = MCPClient(config)
    try:
        await client.create_all_sessions()
        session = client.get_session("PrimitiveServer")
        prompt = await session.get_prompt(
            name="summarize_text", arguments={"text": "This is a long text to summarize."}
        )
        message = prompt.messages[0]
        assert "Please summarize the following text: This is a long text to summarize." in message.content.text
    finally:
        await client.close_all_sessions()



================================================
FILE: tests/integration/primitives/test_resources.py
================================================
import json

import pytest

from mcp_use.client import MCPClient


@pytest.mark.asyncio
async def test_static_resource(primitive_server):
    """Tests fetching a static resource."""
    config = {"mcpServers": {"PrimitiveServer": {"url": f"{primitive_server}/mcp"}}}
    client = MCPClient(config)
    try:
        await client.create_all_sessions()
        session = client.get_session("PrimitiveServer")
        result = await session.read_resource(uri="data://config")
        resource = result.contents[0].text
        resource_dict = json.loads(resource)
        assert resource_dict == {"version": "1.0", "status": "ok"}
    finally:
        await client.close_all_sessions()


@pytest.mark.asyncio
async def test_templated_resource(primitive_server):
    """Tests fetching a templated resource."""
    config = {"mcpServers": {"PrimitiveServer": {"url": f"{primitive_server}/mcp"}}}
    client = MCPClient(config)
    try:
        await client.create_all_sessions()
        session = client.get_session("PrimitiveServer")
        result = await session.read_resource(uri="users://123/profile")
        resource = result.contents[0].text
        resource_dict = json.loads(resource)
        assert resource_dict == {"id": 123, "name": "User 123"}

        result = await session.read_resource(uri="users://456/profile")
        resource = result.contents[0].text
        resource_dict = json.loads(resource)
        assert resource_dict == {"id": 456, "name": "User 456"}
    finally:
        await client.close_all_sessions()



================================================
FILE: tests/integration/primitives/test_sampling.py
================================================
import asyncio
import logging

import pytest
from mcp.client.session import ClientSession
from mcp.types import CreateMessageRequestParams, CreateMessageResult, ErrorData, TextContent

from mcp_use.client import MCPClient

logger = logging.getLogger(__name__)


async def sampling_callback(
    context: ClientSession, params: CreateMessageRequestParams
) -> CreateMessageResult | ErrorData:
    return CreateMessageResult(
        content=TextContent(text="Hello, world!", type="text"), model="gpt-4o-mini", role="assistant"
    )


@pytest.mark.asyncio
async def test_sampling(primitive_server):
    config = {"mcpServers": {"PrimitiveServer": {"url": f"{primitive_server}/mcp"}}}
    client = MCPClient(config, sampling_callback=sampling_callback)
    try:
        await client.create_all_sessions()
        session = client.get_session("PrimitiveServer")
        result = await session.call_tool(name="analyze_sentiment", arguments={"text": "Hello, world!"})
        content = result.content[0]
        logger.info(f"Result: {content}")
        assert content.text == "Hello, world!"
    finally:
        await client.close_all_sessions()


@pytest.mark.asyncio
async def test_sampling_with_no_callback(primitive_server):
    try:
        config = {"mcpServers": {"PrimitiveServer": {"url": f"{primitive_server}/mcp"}}}
        client = MCPClient(config)
        await client.create_all_sessions()
        session = client.get_session("PrimitiveServer")
        result = await session.call_tool(name="analyze_sentiment", arguments={"text": "Hello, world!"})
        logger.info(f"Result: {result}")
        print(f"Result: {result}")
        assert result.isError
    finally:
        await client.close_all_sessions()



================================================
FILE: tests/integration/primitives/test_tools.py
================================================
import pytest
from mcp.client.session import ClientSession
from mcp.types import CreateMessageRequestParams, CreateMessageResult, ErrorData, TextContent

from mcp_use.client import MCPClient


@pytest.mark.asyncio
async def test_tool(primitive_server):
    """Tests the 'add' tool on the primitive server."""
    config = {"mcpServers": {"PrimitiveServer": {"url": f"{primitive_server}/mcp"}}}
    client = MCPClient(config)
    try:
        await client.create_all_sessions()
        session = client.get_session("PrimitiveServer")

        result = await session.call_tool(name="add", arguments={"a": 5, "b": 3})
        assert result.content[0].text == "8"

        result = await session.call_tool(name="add", arguments={"a": -1, "b": 1})
        assert result.content[0].text == "0"
    finally:
        await client.close_all_sessions()



================================================
FILE: tests/integration/servers_for_testing/__init__.py
================================================
# Test servers for MCP integration tests



================================================
FILE: tests/integration/servers_for_testing/custom_streaming_server.py
================================================
"""
Custom Streaming MCP Server with Long-running SSE Support

This creates a custom MCP server using FastMCP that demonstrates:
- Continuous data streaming via SSE
- Real-time notifications and updates
- Long-running operations with progress tracking
- Live data feeds and monitoring capabilities

Run this server first, then use it with the long_running_sse_example.py
"""

import asyncio
import json
import random
import time
from datetime import datetime
from typing import Any

from fastmcp import FastMCP

# Create FastMCP server instance
mcp = FastMCP(name="StreamingMCPServer")

# Active streams tracking
active_streams: dict[str, bool] = {}


@mcp.tool()
def start_monitoring() -> dict[str, Any]:
    """Start a long-running monitoring task"""
    task_id = f"monitor_{int(time.time())}"
    active_streams[task_id] = True
    return {"task_id": task_id, "status": "started"}


@mcp.tool()
def stop_monitoring(task_id: str) -> dict[str, Any]:
    """Stop a monitoring task"""
    if task_id in active_streams:
        active_streams[task_id] = False
        return {"task_id": task_id, "status": "stopped"}
    return {"error": "Task not found"}


@mcp.tool()
def get_current_metrics() -> dict[str, Any]:
    """Get current system metrics"""
    return {
        "timestamp": datetime.now().isoformat(),
        "cpu_percent": random.uniform(10, 90),
        "memory_percent": random.uniform(30, 80),
        "disk_io_read": random.randint(100, 1000),
        "disk_io_write": random.randint(50, 500),
        "network_in": random.randint(1000, 10000),
        "network_out": random.randint(500, 5000),
        "active_processes": random.randint(50, 200),
    }


@mcp.tool()
def get_system_status() -> dict[str, Any]:
    """Get current system status"""
    services = ["database", "redis", "auth_service", "payment_service", "notification_service"]
    status_update = {"timestamp": datetime.now().isoformat(), "services": {}}

    for service in services:
        # 95% chance of being healthy
        is_healthy = random.random() > 0.05
        status_update["services"][service] = {
            "status": "healthy" if is_healthy else "degraded",
            "response_time_ms": random.randint(10, 200),
            "last_check": datetime.now().isoformat(),
        }

    return status_update


@mcp.tool()
def get_latest_logs(count: int = 10) -> list[dict[str, Any]]:
    """Get the latest log entries"""
    log_levels = ["INFO", "DEBUG", "WARNING", "ERROR"]
    log_sources = ["auth", "database", "api", "scheduler", "worker"]

    logs = []
    for i in range(count):
        log_entry = {
            "id": i + 1,
            "timestamp": datetime.now().isoformat(),
            "level": random.choice(log_levels),
            "source": random.choice(log_sources),
            "message": f"Sample log message {i + 1} - Operation completed successfully",
            "details": {
                "user_id": random.randint(1000, 9999),
                "request_id": f"req_{random.randint(10000, 99999)}",
                "duration_ms": random.randint(10, 500),
            },
        }
        logs.append(log_entry)

    return logs


@mcp.resource("stream://metrics/current")
def metrics_resource() -> str:
    """Current metrics as a resource"""
    metrics = get_current_metrics()
    return json.dumps(metrics, indent=2)


@mcp.resource("stream://status/current")
def status_resource() -> str:
    """Current system status as a resource"""
    status = get_system_status()
    return json.dumps(status, indent=2)


@mcp.resource("stream://logs/recent")
def logs_resource() -> str:
    """Recent logs as a resource"""
    logs = get_latest_logs(20)
    return json.dumps(logs, indent=2)


@mcp.prompt()
def monitoring_prompt() -> str:
    """Generate a monitoring prompt with current system data"""
    metrics = get_current_metrics()
    status = get_system_status()

    return f"""Based on the current system metrics and status, please analyze the system health:

Current Metrics:
- CPU Usage: {metrics["cpu_percent"]:.1f}%
- Memory Usage: {metrics["memory_percent"]:.1f}%
- Network In: {metrics["network_in"]} KB/s
- Network Out: {metrics["network_out"]} KB/s
- Active Processes: {metrics["active_processes"]}

System Status:
{json.dumps(status["services"], indent=2)}

Please provide insights on:
1. Overall system health
2. Any potential issues or concerns
3. Recommended actions if needed
"""


@mcp.prompt()
def performance_analysis_prompt() -> str:
    """Generate a performance analysis prompt"""
    metrics = get_current_metrics()

    return f"""Analyze the current system performance metrics:

CPU: {metrics["cpu_percent"]:.1f}%
Memory: {metrics["memory_percent"]:.1f}%
Disk I/O Read: {metrics["disk_io_read"]} KB/s
Disk I/O Write: {metrics["disk_io_write"]} KB/s
Network In: {metrics["network_in"]} KB/s
Network Out: {metrics["network_out"]} KB/s

Please evaluate:
1. Current performance bottlenecks
2. Resource utilization patterns
3. Optimization recommendations
"""


# Background task for continuous monitoring (simulating streaming behavior)
async def background_monitoring():
    """Background task that simulates continuous monitoring"""
    while True:
        # Update metrics and status periodically
        current_time = datetime.now().isoformat()

        # Simulate notifications for high resource usage
        metrics = get_current_metrics()
        if metrics["cpu_percent"] > 80:
            print(f"[{current_time}] ALERT: High CPU usage detected: {metrics['cpu_percent']:.1f}%")

        if metrics["memory_percent"] > 75:
            print(f"[{current_time}] ALERT: High memory usage detected: {metrics['memory_percent']:.1f}%")

        # Check for degraded services
        status = get_system_status()
        for service, details in status["services"].items():
            if details["status"] == "degraded":
                print(f"[{current_time}] ALERT: Service {service} is degraded")

        await asyncio.sleep(10)  # Check every 10 seconds


@mcp.custom_route("/health", methods=["GET"])
async def health_check(request) -> dict:
    """Health check endpoint"""
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}


@mcp.custom_route("/monitoring/active", methods=["GET"])
async def get_active_monitoring(request) -> dict:
    """Get currently active monitoring tasks"""
    active_tasks = {k: v for k, v in active_streams.items() if v}
    return {"active_tasks": active_tasks, "total_count": len(active_tasks)}


if __name__ == "__main__":
    print("🚀 Starting Custom Streaming MCP Server using FastMCP...")
    print("📡 Server features:")
    print("   - Real-time monitoring tools")
    print("   - System metrics and status")
    print("   - Log streaming capabilities")
    print("   - Performance analysis prompts")
    print("   - Background monitoring alerts")
    print("\n💡 Available endpoints:")
    print("   - SSE endpoint: http://localhost:8080/sse")
    print("   - Health check: http://localhost:8080/health")
    print("   - Active monitoring: http://localhost:8080/monitoring/active")
    print("\n💡 Use this server with long_running_sse_example.py")
    print("⚡ Starting server...")

    # Run the FastMCP server with SSE transport
    mcp.run(transport="sse", host="0.0.0.0", port=8080, log_level="info")



================================================
FILE: tests/integration/servers_for_testing/primitive_server.py
================================================
import json
from dataclasses import dataclass

from fastmcp import Context, FastMCP

# 1. Create a server instance
mcp = FastMCP(name="PrimitiveServer")


# 2. Add a Tool
@mcp.tool
def add(a: int, b: int) -> int:
    """Adds two integers together."""
    return a + b


# 3. Add a Resource
@mcp.resource("data://config")
def get_config() -> dict:
    """Returns the application configuration."""
    return json.dumps({"version": "1.0", "status": "ok"})


# 4. Add a Resource Template
@mcp.resource("users://{user_id}/profile")
def get_user_profile(user_id: int) -> dict:
    """Retrieves a user's profile by ID."""
    return json.dumps({"id": user_id, "name": f"User {user_id}"})


# 5. Add a Prompt
@mcp.prompt
def summarize_text(text: str) -> str:
    """Creates a prompt to summarize text."""
    return f"Please summarize the following text: {text}"


# Tool with all kinds of notifications
@mcp.tool()
async def long_running_task(task_name: str, ctx: Context, steps: int = 5) -> str:
    """Execute a task with progress updates."""
    await ctx.info(f"Starting: {task_name}")

    for i in range(steps):
        progress = (i + 1) / steps
        await ctx.send_prompt_list_changed()
        await ctx.send_resource_list_changed()
        await ctx.send_tool_list_changed()
        await ctx.report_progress(
            progress=progress,
            total=1.0,
            message=f"Step {i + 1}/{steps}",
        )
        await ctx.debug(f"Completed step {i + 1}")

    return f"Task '{task_name}' completed"


# Tool with no notifications, but logging
@mcp.tool()
async def logging_tool(ctx: Context) -> str:
    """Log a message to the client."""
    await ctx.debug("This is a debug message")
    await ctx.info("This is an info message")
    await ctx.warning("This is a warning message")
    await ctx.error("This is an error message")
    return "Logging tool completed"


@mcp.tool()
async def tool_to_disable():
    """A tool to disable."""
    return "Tool to disable"


@mcp.tool()
async def change_tools(ctx: Context) -> str:
    """Disable the logging_tool."""
    await tool_to_disable.disable()
    return "Tools disabled"


@mcp.resource("data://mock")
def resource_to_disable():
    """A resource to disable."""
    pass


@mcp.tool()
async def change_resources(ctx: Context) -> str:
    """Disable the get_config resource."""
    await resource_to_disable.disable()
    return "Resources disabled"


@mcp.prompt()
def prompt_to_disable():
    """A prompt to disable."""
    pass


@mcp.tool()
async def change_prompts(ctx: Context) -> str:
    """Disable the summarize_text prompt."""
    await prompt_to_disable.disable()
    return "Prompts disabled"


@mcp.tool
async def analyze_sentiment(text: str, ctx: Context) -> str:
    """Analyze the sentiment of text using the client's LLM."""
    prompt = f"""Analyze the sentiment of the following text as positive, negative, or neutral.
    Just output a single word - 'positive', 'negative', or 'neutral'.

    Text to analyze: {text}"""

    # Request LLM analysis
    response = await ctx.sample(prompt)

    return response.text.strip()


@dataclass
class Info:
    quantity: int
    unit: str


@mcp.tool
async def purchase_item(ctx: Context) -> str:
    """Elicit the user to provide information about a purchase."""
    result = await ctx.elicit(message="Please provide your information", response_type=Info)
    if result.action == "accept":
        info = result.data
        return f"You are buying {info.quantity} {info.unit} of the item"
    elif result.action == "decline":
        return "Information not provided"
    else:
        return "Operation cancelled"


if __name__ == "__main__":
    mcp.run(transport="streamable-http", port=8080)



================================================
FILE: tests/integration/servers_for_testing/simple_server.py
================================================
import argparse

from fastmcp import FastMCP

mcp = FastMCP()


@mcp.tool()
def add(a: int, b: int) -> int:
    """Add two numbers"""
    return a + b


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run MCP test server.")
    parser.add_argument(
        "--transport",
        type=str,
        choices=["stdio", "streamable-http", "sse"],
        default="stdio",
        help="MCP transport type to use (default: stdio)",
    )
    args = parser.parse_args()

    print(f"Starting MCP server with transport: {args.transport}")

    if args.transport == "streamable-http":
        mcp.run(transport="streamable-http", host="127.0.0.1", port=8000)
    elif args.transport == "sse":
        mcp.run(transport="sse", host="127.0.0.1", port=8000)
    elif args.transport == "stdio":
        mcp.run(transport="stdio")



================================================
FILE: tests/integration/servers_for_testing/timeout_test_server.py
================================================
"""
Timeout Test Server for GitHub Issue #120

This server specifically tests the connection state tracking issue by:
1. Accepting SSE connections
2. Closing them after a short timeout (5 seconds) to simulate server-side timeouts
3. Providing basic MCP tools to test functionality
"""

import asyncio
import json
import time
from datetime import datetime
from typing import Any

from fastmcp import FastMCP

# Create FastMCP server instance
mcp = FastMCP(name="TimeoutTestServer")

# Track connection times for timeout logic
connection_times: dict[str, float] = {}


@mcp.tool()
def ping() -> dict[str, Any]:
    """Simple ping tool for testing connectivity"""
    return {"message": "pong", "timestamp": datetime.now().isoformat(), "server": "TimeoutTestServer"}


@mcp.tool()
def get_server_info() -> dict[str, Any]:
    """Get server information"""
    return {
        "name": "TimeoutTestServer",
        "purpose": "Testing connection timeouts for issue #120",
        "timeout_seconds": 5,
        "timestamp": datetime.now().isoformat(),
    }


@mcp.tool()
def echo(message: str) -> dict[str, Any]:
    """Echo a message back"""
    return {"original_message": message, "echo": f"Server received: {message}", "timestamp": datetime.now().isoformat()}


@mcp.resource("test://server/status")
def server_status_resource() -> str:
    """Server status as a resource"""
    status = {"status": "running", "active_connections": len(connection_times), "timestamp": datetime.now().isoformat()}
    return json.dumps(status, indent=2)


@mcp.prompt()
def test_prompt() -> str:
    """A simple test prompt"""
    return f"""This is a test prompt from TimeoutTestServer.

Current time: {datetime.now().isoformat()}
Server purpose: Testing connection timeouts for GitHub issue #120

Please use this server to test:
1. Connection establishment
2. Tool calls while connected
3. Connection state after server timeout
4. Auto-reconnection behavior
"""


# Custom SSE endpoint with timeout logic
@mcp.custom_route("/sse", methods=["GET"])
async def custom_sse_endpoint(request):
    """Custom SSE endpoint that closes connections after timeout"""
    import uuid

    from fastapi.responses import StreamingResponse

    # Generate unique connection ID
    connection_id = str(uuid.uuid4())
    connection_times[connection_id] = time.time()

    print(f"New SSE connection: {connection_id}")

    async def event_generator():
        try:
            # Send initial connection event
            yield f"data: {json.dumps({'type': 'connection', 'id': connection_id, 'status': 'connected'})}\n\n"

            start_time = time.time()
            timeout_seconds = 5  # Close connection after 5 seconds

            while True:
                current_time = time.time()

                # Check if we should timeout
                if current_time - start_time > timeout_seconds:
                    print(f"Timing out connection {connection_id} after {timeout_seconds} seconds")
                    # Send timeout event before closing
                    timeout_event = {
                        "type": "timeout",
                        "id": connection_id,
                        "message": "Connection timed out",
                    }
                    yield f"data: {json.dumps(timeout_event)}\n\n"
                    break

                # Send periodic heartbeat
                yield f"data: {json.dumps({'type': 'heartbeat', 'timestamp': datetime.now().isoformat()})}\n\n"

                await asyncio.sleep(1)

        except Exception as e:
            print(f"Error in SSE connection {connection_id}: {e}")
        finally:
            # Clean up connection tracking
            if connection_id in connection_times:
                del connection_times[connection_id]
            print(f"Connection {connection_id} closed")

    return StreamingResponse(
        event_generator(),
        media_type="text/event-stream",
        headers={"Cache-Control": "no-cache", "Connection": "keep-alive", "Access-Control-Allow-Origin": "*"},
    )


@mcp.custom_route("/health", methods=["GET"])
async def health_check(request) -> dict:
    """Health check endpoint"""
    return {"status": "healthy", "timestamp": datetime.now().isoformat(), "active_connections": len(connection_times)}


if __name__ == "__main__":
    print("🚀 Starting Timeout Test Server for GitHub Issue #120...")
    print("⏰ Connection timeout: 5 seconds")
    print("📡 Server features:")
    print("   - Automatic connection timeout after 5 seconds")
    print("   - Basic MCP tools for testing")
    print("   - Connection state tracking")
    print("\n💡 Available endpoints:")
    print("   - SSE endpoint: http://localhost:8081/sse")
    print("   - Health check: http://localhost:8081/health")
    print("\n💡 This server is designed to test:")
    print("   - Connection state tracking after timeout")
    print("   - Auto-reconnection behavior")
    print("   - Error handling for disconnected sessions")
    print("⚡ Starting server on port 8081...")

    # Run the FastMCP server with SSE transport
    mcp.run(transport="sse", host="0.0.0.0", port=8081, log_level="info")



================================================
FILE: tests/integration/transports/test_sse.py
================================================
import asyncio
import subprocess
from pathlib import Path

import pytest

from mcp_use import MCPClient


@pytest.fixture
async def server_process():
    """Start the SSE server process for testing"""
    server_path = Path(__file__).parent.parent / "servers_for_testing" / "simple_server.py"

    print(f"Starting server: python {server_path}")

    # Start the server process
    process = subprocess.Popen(
        ["python", str(server_path), "--transport", "sse"],
        cwd=str(server_path.parent),
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
    )

    # Give the server a moment to start
    await asyncio.sleep(1)
    server_url = "http://127.0.0.1:8000"
    yield server_url

    # Cleanup
    print("Cleaning up server process")
    if process.poll() is None:
        process.terminate()
        try:
            process.wait(timeout=5)
        except subprocess.TimeoutExpired:
            process.kill()
            process.wait()


@pytest.mark.asyncio
async def test_sse_connection(server_process):
    """Test that we can connect to SSE MCP server and retrieve tools"""
    server_url = server_process
    config = {"mcpServers": {"sse": {"url": f"{server_url}/sse"}}}

    client = MCPClient(config=config)
    try:
        await client.create_all_sessions()
        session = client.get_session("sse")

        # Verify session was created
        assert session is not None, "Session should be created"

        # Get tools and verify they exist
        tools = await session.list_tools()
        assert tools is not None, "Tools should be available"
        assert len(tools) > 0, "At least one tool should be available"

        # Verify the 'add' tool exists
        tool_names = [tool.name for tool in tools]
        assert "add" in tool_names, "The 'add' tool should be available"

        # Test calling the add tool
        result = await session.call_tool("add", {"a": 5, "b": 3})
        assert result is not None, "Tool call should return a result"
        assert result.content is not None, "Result should have content"
        assert result.content[0].text == "8", "Result should be 8"
    finally:
        await client.close_all_sessions()



================================================
FILE: tests/integration/transports/test_stdio.py
================================================
from pathlib import Path

import pytest

from mcp_use import MCPClient


@pytest.fixture
def server_process():
    """Start the stdio server process for testing"""
    server_path = Path(__file__).parent.parent / "servers_for_testing" / "simple_server.py"
    # Start server process - stdio doesn't need a separate process since it's spawned by the client
    yield server_path


@pytest.mark.asyncio
async def test_stdio_connection(server_process):
    """Test that we can connect to stdio MCP server and retrieve tools"""
    server_path = server_process
    config = {
        "mcpServers": {
            "stdio": {
                "command": "python",
                "args": [str(server_path)],
                "cwd": str(server_path.parent),
            }
        }
    }

    client = MCPClient(config=config)
    try:
        await client.create_all_sessions()
        session = client.get_session("stdio")

        # Verify session was created
        assert session is not None, "Session should be created"

        # Get tools and verify they exist
        tools = await session.list_tools()
        assert tools is not None, "Tools should be available"
        assert len(tools) > 0, "At least one tool should be available"

        # Verify the 'add' tool exists
        tool_names = [tool.name for tool in tools]
        assert "add" in tool_names, "The 'add' tool should be available"

        # Test calling the add tool
        result = await session.call_tool("add", {"a": 5, "b": 3})
        assert result is not None, "Tool call should return a result"
        assert result.content is not None, "Result should have content"
        assert result.content[0].text == "8", "Result should be 8"
    finally:
        await client.close_all_sessions()



================================================
FILE: tests/integration/transports/test_streamable_http.py
================================================
import asyncio
import subprocess
from pathlib import Path

import pytest

from mcp_use import MCPClient


@pytest.fixture
async def server_process():
    """Start the streamableHttp server process for testing"""
    server_path = Path(__file__).parent.parent / "servers_for_testing" / "simple_server.py"

    print(f"Starting server: python {server_path}")

    # Start the server process
    process = subprocess.Popen(
        ["python", str(server_path), "--transport", "streamable-http"],
        cwd=str(server_path.parent),
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
    )

    # Wait for server to start up
    await asyncio.sleep(1)
    server_url = "http://127.0.0.1:8000"
    yield server_url

    # Cleanup
    print("Cleaning up server process")
    if process.poll() is None:
        process.terminate()
        try:
            process.wait(timeout=5)
        except subprocess.TimeoutExpired:
            print("Process didn't terminate gracefully, killing it")
            process.kill()
            process.wait()

    print("Server cleanup complete")


@pytest.mark.asyncio
async def test_streamable_http_connection(server_process):
    """Test that we can connect to streamableHttp MCP server and retrieve tools"""
    server_url = server_process
    config = {"mcpServers": {"streamableHttp": {"url": f"{server_url}/mcp"}}}
    print(config)
    client = MCPClient(config=config)
    try:
        await client.create_all_sessions()
        session = client.get_session("streamableHttp")

        # Verify session was created
        assert session is not None, "Session should be created"

        # Get tools and verify they exist
        tools = await session.list_tools()
        assert tools is not None, "Tools should be available"
        assert len(tools) > 0, "At least one tool should be available"

        # Verify the 'add' tool exists
        tool_names = [tool.name for tool in tools]
        assert "add" in tool_names, "The 'add' tool should be available"

        # Test calling the add tool
        result = await session.call_tool("add", {"a": 5, "b": 3})
        assert result is not None, "Tool call should return a result"
        assert result.content is not None, "Result should have content"
        assert result.content[0].text == "8", "Result should be 8"
    finally:
        await client.close_all_sessions()



================================================
FILE: tests/unit/test_client.py
================================================
"""
Unit tests for the MCPClient class.
"""

import json
import os
import tempfile
from unittest.mock import ANY, AsyncMock, MagicMock, patch

import pytest

from mcp_use.client import MCPClient
from mcp_use.session import MCPSession


class TestMCPClientInitialization:
    """Tests for MCPClient initialization."""

    def test_init_empty(self):
        """Test initialization with no parameters."""
        client = MCPClient()

        assert client.config == {}
        assert client.sessions == {}
        assert client.active_sessions == []

    def test_init_with_dict_config(self):
        """Test initialization with a dictionary config."""
        config = {"mcpServers": {"test": {"url": "http://test.com"}}}
        client = MCPClient(config=config)

        assert client.config == config
        assert client.sessions == {}
        assert client.active_sessions == []

    def test_from_dict(self):
        """Test creation from a dictionary."""
        config = {"mcpServers": {"test": {"url": "http://test.com"}}}
        client = MCPClient.from_dict(config)

        assert client.config == config
        assert client.sessions == {}
        assert client.active_sessions == []

    def test_init_with_file_config(self):
        """Test initialization with a file config."""
        config = {"mcpServers": {"test": {"url": "http://test.com"}}}

        # Create a temporary file with test config
        with tempfile.NamedTemporaryFile(mode="w", delete=False) as temp:
            json.dump(config, temp)
            temp_path = temp.name

        try:
            # Test initialization with file path
            client = MCPClient(config=temp_path)

            assert client.config == config
            assert client.sessions == {}
            assert client.active_sessions == []
        finally:
            # Clean up temp file
            os.unlink(temp_path)

    def test_from_config_file(self):
        """Test creation from a config file."""
        config = {"mcpServers": {"test": {"url": "http://test.com"}}}

        # Create a temporary file with test config
        with tempfile.NamedTemporaryFile(mode="w", delete=False) as temp:
            json.dump(config, temp)
            temp_path = temp.name

        try:
            # Test creation from file path
            client = MCPClient.from_config_file(temp_path)

            assert client.config == config
            assert client.sessions == {}
            assert client.active_sessions == []
        finally:
            # Clean up temp file
            os.unlink(temp_path)


class TestMCPClientServerManagement:
    """Tests for MCPClient server management methods."""

    def test_add_server(self):
        """Test adding a server."""
        client = MCPClient()
        server_config = {"url": "http://test.com"}

        client.add_server("test", server_config)

        assert "mcpServers" in client.config
        assert client.config["mcpServers"]["test"] == server_config

    def test_add_server_to_existing(self):
        """Test adding a server to existing servers."""
        config = {"mcpServers": {"server1": {"url": "http://server1.com"}}}
        client = MCPClient(config=config)
        server_config = {"url": "http://test.com"}

        client.add_server("test", server_config)

        assert "mcpServers" in client.config
        assert client.config["mcpServers"]["server1"] == {"url": "http://server1.com"}
        assert client.config["mcpServers"]["test"] == server_config

    def test_remove_server(self):
        """Test removing a server."""
        config = {
            "mcpServers": {
                "server1": {"url": "http://server1.com"},
                "server2": {"url": "http://server2.com"},
            }
        }
        client = MCPClient(config=config)

        client.remove_server("server1")

        assert "mcpServers" in client.config
        assert "server1" not in client.config["mcpServers"]
        assert "server2" in client.config["mcpServers"]

    def test_remove_server_with_active_session(self):
        """Test removing a server with an active session."""
        config = {
            "mcpServers": {
                "server1": {"url": "http://server1.com"},
                "server2": {"url": "http://server2.com"},
            }
        }
        client = MCPClient(config=config)

        # Add an active session
        client.active_sessions.append("server1")

        client.remove_server("server1")

        assert "mcpServers" in client.config
        assert "server1" not in client.config["mcpServers"]
        assert "server1" not in client.active_sessions
        assert "server2" in client.config["mcpServers"]

    def test_get_server_names(self):
        """Test getting server names."""
        config = {
            "mcpServers": {
                "server1": {"url": "http://server1.com"},
                "server2": {"url": "http://server2.com"},
            }
        }
        client = MCPClient(config=config)

        server_names = client.get_server_names()

        assert len(server_names) == 2
        assert "server1" in server_names
        assert "server2" in server_names

    def test_get_server_names_empty(self):
        """Test getting server names when there are none."""
        client = MCPClient()

        server_names = client.get_server_names()

        assert len(server_names) == 0


class TestMCPClientSaveConfig:
    """Tests for MCPClient save_config method."""

    def test_save_config(self):
        """Test saving the configuration to a file."""
        config = {"mcpServers": {"server1": {"url": "http://server1.com"}}}
        client = MCPClient(config=config)

        # Create a temporary file path
        with tempfile.NamedTemporaryFile(delete=False) as temp:
            temp_path = temp.name

        try:
            # Test saving config
            client.save_config(temp_path)

            # Check that the file was written correctly
            with open(temp_path) as f:
                saved_config = json.load(f)

            assert saved_config == config
        finally:
            # Clean up temp file
            os.unlink(temp_path)


class TestMCPClientSessionManagement:
    """Tests for MCPClient session management methods."""

    @pytest.mark.asyncio
    @patch("mcp_use.client.create_connector_from_config")
    @patch("mcp_use.client.MCPSession")
    async def test_create_session(self, mock_session_class, mock_create_connector):
        """Test creating a session."""
        config = {"mcpServers": {"server1": {"url": "http://server1.com"}}}
        client = MCPClient(config=config)

        # Set up mocks
        mock_connector = MagicMock()
        mock_create_connector.return_value = mock_connector

        mock_session = MagicMock()
        mock_session.initialize = AsyncMock()
        mock_session_class.return_value = mock_session

        # Test create_session
        await client.create_session("server1")

        # Verify behavior
        mock_create_connector.assert_called_once_with(
            {"url": "http://server1.com"},
            sandbox=False,
            sandbox_options=None,
            sampling_callback=None,
            elicitation_callback=None,
            message_handler=None,
            logging_callback=None,
        )
        mock_session_class.assert_called_once_with(mock_connector)
        mock_session.initialize.assert_called_once()

        # Verify state changes
        assert client.sessions["server1"] == mock_session
        assert "server1" in client.active_sessions

    @pytest.mark.asyncio
    async def test_create_session_no_servers(self):
        """Test creating a session when no servers are configured."""
        client = MCPClient()

        # Expect a UserWarning when no servers are configured
        with pytest.warns(UserWarning) as exc_info:
            await client.create_session("server1")

        assert "No MCP servers defined in config" in str(exc_info[0].message)

    @pytest.mark.asyncio
    async def test_create_session_nonexistent_server(self):
        """Test creating a session for a non-existent server."""
        config = {"mcpServers": {"server1": {"url": "http://server1.com"}}}
        client = MCPClient(config=config)

        # Test create_session raises ValueError
        with pytest.raises(ValueError) as exc_info:
            await client.create_session("server2")

        assert "Server 'server2' not found in config" in str(exc_info.value)

    @pytest.mark.asyncio
    @patch("mcp_use.client.create_connector_from_config")
    @patch("mcp_use.client.MCPSession")
    async def test_create_session_no_auto_initialize(self, mock_session_class, mock_create_connector):
        """Test creating a session without auto-initialization."""
        config = {"mcpServers": {"server1": {"url": "http://server1.com"}}}
        client = MCPClient(config=config)

        # Set up mocks
        mock_connector = MagicMock()
        mock_create_connector.return_value = mock_connector

        mock_session = MagicMock()
        mock_session_class.return_value = mock_session

        # Test create_session with auto_initialize=False
        await client.create_session("server1", auto_initialize=False)

        # Verify behavior
        mock_create_connector.assert_called_once_with(
            {"url": "http://server1.com"},
            sandbox=False,
            sandbox_options=None,
            sampling_callback=None,
            elicitation_callback=None,
            message_handler=None,
            logging_callback=None,
        )
        mock_session_class.assert_called_once_with(mock_connector)
        mock_session.initialize.assert_not_called()

        # Verify state changes
        assert client.sessions["server1"] == mock_session
        assert "server1" in client.active_sessions

    def test_get_session(self):
        """Test getting an existing session."""
        client = MCPClient()

        # Add a mock session
        mock_session = MagicMock(spec=MCPSession)
        client.sessions["server1"] = mock_session

        # Test get_session
        session = client.get_session("server1")

        assert session == mock_session

    def test_get_session_nonexistent(self):
        """Test getting a non-existent session."""
        client = MCPClient()

        # Test get_session raises ValueError
        with pytest.raises(ValueError) as exc_info:
            client.get_session("server1")

        assert "No session exists for server 'server1'" in str(exc_info.value)

    def test_get_all_active_sessions(self):
        """Test getting all active sessions."""
        client = MCPClient()

        # Add mock sessions
        mock_session1 = MagicMock(spec=MCPSession)
        mock_session2 = MagicMock(spec=MCPSession)
        client.sessions["server1"] = mock_session1
        client.sessions["server2"] = mock_session2
        client.active_sessions = ["server1", "server2"]

        # Test get_all_active_sessions
        sessions = client.get_all_active_sessions()

        assert len(sessions) == 2
        assert sessions["server1"] == mock_session1
        assert sessions["server2"] == mock_session2

    def test_get_all_active_sessions_some_inactive(self):
        """Test getting all active sessions when some are inactive."""
        client = MCPClient()

        # Add mock sessions
        mock_session1 = MagicMock(spec=MCPSession)
        mock_session2 = MagicMock(spec=MCPSession)
        client.sessions["server1"] = mock_session1
        client.sessions["server2"] = mock_session2
        client.active_sessions = ["server1"]  # Only server1 is active

        # Test get_all_active_sessions
        sessions = client.get_all_active_sessions()

        assert len(sessions) == 1
        assert sessions["server1"] == mock_session1
        assert "server2" not in sessions

    @pytest.mark.asyncio
    async def test_close_session(self):
        """Test closing a session."""
        client = MCPClient()

        # Add a mock session
        mock_session = MagicMock(spec=MCPSession)
        mock_session.disconnect = AsyncMock()
        client.sessions["server1"] = mock_session
        client.active_sessions = ["server1"]

        # Test close_session
        await client.close_session("server1")

        # Verify behavior
        mock_session.disconnect.assert_called_once()

        # Verify state changes
        assert "server1" not in client.sessions
        assert "server1" not in client.active_sessions

    @pytest.mark.asyncio
    async def test_close_session_nonexistent(self):
        """Test closing a non-existent session."""
        client = MCPClient()

        # Test close_session doesn't raise an exception
        await client.close_session("server1")

        # State should remain unchanged
        assert "server1" not in client.sessions
        assert "server1" not in client.active_sessions

    @pytest.mark.asyncio
    async def test_close_all_sessions(self):
        """Test closing all sessions."""
        client = MCPClient()

        # Add mock sessions
        mock_session1 = MagicMock(spec=MCPSession)
        mock_session1.disconnect = AsyncMock()
        mock_session2 = MagicMock(spec=MCPSession)
        mock_session2.disconnect = AsyncMock()

        client.sessions["server1"] = mock_session1
        client.sessions["server2"] = mock_session2
        client.active_sessions = ["server1", "server2"]

        # Test close_all_sessions
        await client.close_all_sessions()

        # Verify behavior
        mock_session1.disconnect.assert_called_once()
        mock_session2.disconnect.assert_called_once()

        # Verify state changes
        assert len(client.sessions) == 0
        assert len(client.active_sessions) == 0

    @pytest.mark.asyncio
    async def test_close_all_sessions_one_fails(self):
        """Test closing all sessions when one fails."""
        client = MCPClient()

        # Add mock sessions, one that raises an exception
        mock_session1 = MagicMock(spec=MCPSession)
        mock_session1.disconnect = AsyncMock(side_effect=Exception("Disconnect failed"))
        mock_session2 = MagicMock(spec=MCPSession)
        mock_session2.disconnect = AsyncMock()

        client.sessions["server1"] = mock_session1
        client.sessions["server2"] = mock_session2
        client.active_sessions = ["server1", "server2"]

        # Test close_all_sessions
        await client.close_all_sessions()

        # Verify behavior - even though server1 failed, server2 should still be disconnected
        mock_session1.disconnect.assert_called_once()
        mock_session2.disconnect.assert_called_once()

        # Verify state changes
        assert len(client.sessions) == 0
        assert len(client.active_sessions) == 0

    @pytest.mark.asyncio
    @patch("mcp_use.client.create_connector_from_config")
    @patch("mcp_use.client.MCPSession")
    async def test_create_all_sessions(self, mock_session_class, mock_create_connector):
        """Test creating all sessions."""
        config = {
            "mcpServers": {
                "server1": {"url": "http://server1.com"},
                "server2": {"url": "http://server2.com"},
            }
        }
        client = MCPClient(config=config)

        # Set up mocks
        mock_connector1 = MagicMock()
        mock_connector2 = MagicMock()
        mock_create_connector.side_effect = [mock_connector1, mock_connector2]

        mock_session1 = MagicMock()
        mock_session1.initialize = AsyncMock()
        mock_session2 = MagicMock()
        mock_session2.initialize = AsyncMock()
        mock_session_class.side_effect = [mock_session1, mock_session2]

        # Test create_all_sessions
        sessions = await client.create_all_sessions()

        # Verify behavior
        assert mock_create_connector.call_count == 2
        mock_create_connector.assert_any_call(
            {"url": "http://server1.com"},
            sandbox=False,
            sandbox_options=None,
            sampling_callback=None,
            elicitation_callback=None,
            message_handler=None,
            logging_callback=None,
        )
        mock_create_connector.assert_any_call(
            {"url": "http://server2.com"},
            sandbox=False,
            sandbox_options=None,
            sampling_callback=None,
            elicitation_callback=None,
            message_handler=None,
            logging_callback=None,
        )

        assert mock_session_class.call_count == 2

        # Initialize is called once per session during create_session
        assert mock_session1.initialize.call_count == 1
        assert mock_session2.initialize.call_count == 1

        # Verify state changes
        assert len(client.sessions) == 2
        assert client.sessions["server1"] == mock_session1
        assert client.sessions["server2"] == mock_session2
        assert len(client.active_sessions) == 2
        assert "server1" in client.active_sessions
        assert "server2" in client.active_sessions

        # Verify return value
        assert sessions == client.sessions

    @pytest.mark.asyncio
    @patch("mcp_use.client.create_connector_from_config")
    @patch("mcp_use.client.MCPSession")
    async def test_create_allowed_sessions(self, mock_session_class, mock_create_connector):
        """Test creating only allowed sessions."""
        config = {
            "mcpServers": {
                "server1": {"url": "http://server1.com"},
                "server2": {"url": "http://server2.com"},
            }
        }
        client = MCPClient(config=config, allowed_servers=["server1"])

        # Set up mocks
        mock_connector1 = MagicMock()
        mock_connector2 = MagicMock()
        mock_create_connector.side_effect = [mock_connector1, mock_connector2]

        mock_session1 = MagicMock()
        mock_session1.initialize = AsyncMock()
        mock_session2 = MagicMock()
        mock_session2.initialize = AsyncMock()
        mock_session_class.side_effect = [mock_session1, mock_session2]

        # Test create_all_sessions
        sessions = await client.create_all_sessions()

        # Verify behavior
        assert mock_create_connector.call_count == 1
        mock_create_connector.assert_any_call(
            {"url": "http://server1.com"},
            sandbox=False,
            sandbox_options=None,
            sampling_callback=None,
            elicitation_callback=None,
            message_handler=None,
            logging_callback=None,
        )

        assert mock_session_class.call_count == 1

        # Initialize is called once per session during create_session
        assert mock_session1.initialize.call_count == 1

        # Verify state changes
        assert len(client.sessions) == 1
        assert client.sessions["server1"] == mock_session1
        assert len(client.active_sessions) == 1
        assert "server1" in client.active_sessions
        assert "server2" not in client.active_sessions

        # Verify return value
        assert sessions == client.sessions



================================================
FILE: tests/unit/test_config.py
================================================
"""
Unit tests for the config module.
"""

import json
import os
import tempfile
import unittest
from unittest.mock import patch

from mcp_use.config import create_connector_from_config, load_config_file
from mcp_use.connectors import HttpConnector, SandboxConnector, StdioConnector, WebSocketConnector
from mcp_use.types.sandbox import SandboxOptions


class TestConfigLoading(unittest.TestCase):
    """Tests for configuration loading functions."""

    def test_load_config_file(self):
        """Test loading a configuration file."""
        test_config = {"mcpServers": {"test": {"url": "http://test.com"}}}

        # Create a temporary file with test config
        with tempfile.NamedTemporaryFile(mode="w", delete=False) as temp:
            json.dump(test_config, temp)
            temp_path = temp.name

        try:
            # Test loading from file
            loaded_config = load_config_file(temp_path)
            self.assertEqual(loaded_config, test_config)
        finally:
            # Clean up temp file
            os.unlink(temp_path)

    def test_load_config_file_nonexistent(self):
        """Test loading a non-existent file raises FileNotFoundError."""
        with self.assertRaises(FileNotFoundError):
            load_config_file("/tmp/nonexistent_file.json")


class TestConnectorCreation(unittest.TestCase):
    """Tests for connector creation from configuration."""

    def test_create_http_connector(self):
        """Test creating an HTTP connector from config."""
        server_config = {
            "url": "http://test.com",
            "headers": {"Content-Type": "application/json"},
            "auth_token": "test_token",
        }

        connector = create_connector_from_config(server_config)

        self.assertIsInstance(connector, HttpConnector)
        self.assertEqual(connector.base_url, "http://test.com")
        self.assertEqual(
            connector.headers,
            {"Content-Type": "application/json", "Authorization": "Bearer test_token"},
        )
        self.assertEqual(connector.auth_token, "test_token")

    def test_create_http_connector_with_options(self):
        """Test creating an HTTP connector with options."""
        server_config = {
            "url": "http://test.com",
            "headers": {"Content-Type": "application/json"},
            "auth_token": "test_token",
        }
        options: SandboxOptions = {
            "api_key": "test_key",
            "sandbox_template_id": "test_template",
        }

        connector = create_connector_from_config(server_config, sandbox=True, sandbox_options=options)

        self.assertIsInstance(connector, HttpConnector)
        self.assertEqual(connector.base_url, "http://test.com")
        self.assertEqual(
            connector.headers,
            {"Content-Type": "application/json", "Authorization": "Bearer test_token"},
        )
        self.assertEqual(connector.auth_token, "test_token")

    def test_create_http_connector_minimal(self):
        """Test creating an HTTP connector with minimal config."""
        server_config = {"url": "http://test.com"}

        connector = create_connector_from_config(server_config)

        self.assertIsInstance(connector, HttpConnector)
        self.assertEqual(connector.base_url, "http://test.com")
        self.assertEqual(connector.headers, {})
        self.assertIsNone(connector.auth_token)

    def test_create_websocket_connector(self):
        """Test creating a WebSocket connector from config."""
        server_config = {
            "ws_url": "ws://test.com",
            "headers": {"Content-Type": "application/json"},
            "auth_token": "test_token",
        }

        connector = create_connector_from_config(server_config)

        self.assertIsInstance(connector, WebSocketConnector)
        self.assertEqual(connector.url, "ws://test.com")
        self.assertEqual(
            connector.headers,
            {"Content-Type": "application/json", "Authorization": "Bearer test_token"},
        )
        self.assertEqual(connector.auth_token, "test_token")

    def test_create_websocket_connector_with_options(self):
        """Test creating a WebSocket connector with options."""
        server_config = {
            "ws_url": "ws://test.com",
            "headers": {"Content-Type": "application/json"},
            "auth_token": "test_token",
        }
        options: SandboxOptions = {
            "api_key": "test_key",
            "sandbox_template_id": "test_template",
        }

        connector = create_connector_from_config(server_config, sandbox=True, sandbox_options=options)

        self.assertIsInstance(connector, WebSocketConnector)
        self.assertEqual(connector.url, "ws://test.com")
        self.assertEqual(
            connector.headers,
            {"Content-Type": "application/json", "Authorization": "Bearer test_token"},
        )
        self.assertEqual(connector.auth_token, "test_token")

    def test_create_websocket_connector_minimal(self):
        """Test creating a WebSocket connector with minimal config."""
        server_config = {"ws_url": "ws://test.com"}

        connector = create_connector_from_config(server_config)

        self.assertIsInstance(connector, WebSocketConnector)
        self.assertEqual(connector.url, "ws://test.com")
        self.assertEqual(connector.headers, {})
        self.assertIsNone(connector.auth_token)

    def test_create_stdio_connector(self):
        """Test creating a stdio connector from config."""
        server_config = {
            "command": "python",
            "args": ["-m", "mcp_server"],
            "env": {"DEBUG": "1"},
        }

        connector = create_connector_from_config(server_config)

        self.assertIsInstance(connector, StdioConnector)
        self.assertEqual(connector.command, "python")
        self.assertEqual(connector.args, ["-m", "mcp_server"])
        self.assertEqual(connector.env, {"DEBUG": "1"})

    def test_create_stdio_connector_with_options(self):
        """Test creating a stdio connector with options."""
        server_config = {
            "command": "python",
            "args": ["-m", "mcp_server"],
            "env": {"DEBUG": "1"},
        }

        connector = create_connector_from_config(
            server_config,
            sandbox=False,
            sandbox_options=SandboxOptions(
                api_key="test_key",
                sandbox_template_id="test_template",
            ),
        )

        self.assertIsInstance(connector, StdioConnector)
        self.assertEqual(connector.command, "python")
        self.assertEqual(connector.args, ["-m", "mcp_server"])
        self.assertEqual(connector.env, {"DEBUG": "1"})

    def test_create_sandboxed_stdio_connector(self):
        """Test creating a sandboxed stdio connector."""
        server_config = {
            "command": "python",
            "args": ["-m", "mcp_server"],
            "env": {"DEBUG": "1"},
        }
        options: SandboxOptions = {
            "api_key": "test_key",
            "sandbox_template_id": "test_template",
        }

        # Use patch to avoid the actual E2B SDK import check
        with patch("mcp_use.connectors.sandbox.AsyncSandbox", create=True):
            connector = create_connector_from_config(server_config, sandbox=True, sandbox_options=options)

            self.assertIsInstance(connector, SandboxConnector)
            self.assertEqual(connector.user_command, "python")
            self.assertEqual(connector.user_args, ["-m", "mcp_server"])
            self.assertEqual(connector.user_env, {"DEBUG": "1"})
            self.assertEqual(connector.api_key, "test_key")
            self.assertEqual(connector.sandbox_template_id, "test_template")

    def test_create_stdio_connector_minimal(self):
        """Test creating a stdio connector with minimal config."""
        server_config = {"command": "python", "args": ["-m", "mcp_server"]}

        connector = create_connector_from_config(server_config)

        self.assertIsInstance(connector, StdioConnector)
        self.assertEqual(connector.command, "python")
        self.assertEqual(connector.args, ["-m", "mcp_server"])
        self.assertIsNone(connector.env)

    def test_create_connector_invalid_config(self):
        """Test creating a connector with invalid config raises ValueError."""
        server_config = {"invalid": "config"}

        with self.assertRaises(ValueError) as context:
            create_connector_from_config(server_config)

        self.assertEqual(str(context.exception), "Cannot determine connector type from config")



================================================
FILE: tests/unit/test_http_connector.py
================================================
"""
Unit tests for the HttpConnector class.
"""

import unittest
from unittest import IsolatedAsyncioTestCase
from unittest.mock import ANY, AsyncMock, MagicMock, call, patch

import aiohttp
from mcp import McpError
from mcp.types import EmptyResult, ErrorData, Prompt, Resource, Tool

from mcp_use.connectors.http import HttpConnector
from mcp_use.task_managers import SseConnectionManager


@patch("mcp_use.connectors.base.logger")
class TestHttpConnectorInitialization(unittest.TestCase):
    """Tests for HttpConnector initialization."""

    def test_init_minimal(self, _):
        """Test initialization with minimal parameters."""
        connector = HttpConnector(base_url="http://localhost:8000")

        self.assertEqual(connector.base_url, "http://localhost:8000")
        self.assertIsNone(connector.auth_token)
        self.assertEqual(connector.headers, {})
        self.assertIsNone(connector.client_session)
        self.assertIsNone(connector._connection_manager)
        self.assertIsNone(connector._tools)
        self.assertFalse(connector._connected)

    def test_init_with_auth_token(self, _):
        """Test initialization with auth token."""
        connector = HttpConnector(base_url="http://localhost:8000", auth_token="test_token")

        self.assertEqual(connector.base_url, "http://localhost:8000")
        self.assertEqual(connector.auth_token, "test_token")
        self.assertEqual(connector.headers, {"Authorization": "Bearer test_token"})
        self.assertIsNone(connector.client_session)
        self.assertIsNone(connector._connection_manager)
        self.assertIsNone(connector._tools)
        self.assertFalse(connector._connected)

    def test_init_with_headers(self, _):
        """Test initialization with custom headers."""
        headers = {"Content-Type": "application/json", "Accept": "application/json"}
        connector = HttpConnector(base_url="http://localhost:8000", headers=headers)

        self.assertEqual(connector.base_url, "http://localhost:8000")
        self.assertIsNone(connector.auth_token)
        self.assertEqual(connector.headers, headers)
        self.assertIsNone(connector.client_session)
        self.assertIsNone(connector._connection_manager)
        self.assertIsNone(connector._tools)
        self.assertFalse(connector._connected)

    def test_init_with_auth_token_and_headers(self, _):
        """Test initialization with both auth token and headers."""
        headers = {"Content-Type": "application/json", "Accept": "application/json"}
        connector = HttpConnector(base_url="http://localhost:8000", auth_token="test_token", headers=headers)

        expected_headers = headers.copy()
        expected_headers["Authorization"] = "Bearer test_token"

        self.assertEqual(connector.base_url, "http://localhost:8000")
        self.assertEqual(connector.auth_token, "test_token")
        self.assertEqual(connector.headers, expected_headers)
        self.assertIsNone(connector.client_session)
        self.assertIsNone(connector._connection_manager)
        self.assertIsNone(connector._tools)
        self.assertFalse(connector._connected)

    def test_base_url_trailing_slash_removal(self, _):
        """Test that trailing slashes are removed from base_url."""
        connector = HttpConnector(base_url="http://localhost:8000/")
        self.assertEqual(connector.base_url, "http://localhost:8000")


@patch("mcp_use.connectors.base.logger")
class TestHttpConnectorConnection(IsolatedAsyncioTestCase):
    """Tests for HttpConnector connection methods."""

    def setUp(self):
        """Set up a connector for each test."""
        self.connector = HttpConnector(base_url="http://localhost:8000")

        # Mock the connection manager
        self.mock_cm = MagicMock(spec=SseConnectionManager)
        self.mock_cm.start = AsyncMock()
        self.mock_cm.stop = AsyncMock()

        # Mock the client session
        self.mock_client_session = MagicMock()
        self.mock_client_session.__aenter__ = AsyncMock()

    @patch("mcp_use.connectors.http.SseConnectionManager")
    @patch("mcp_use.connectors.http.StreamableHttpConnectionManager")
    @patch("mcp_use.connectors.http.ClientSession")
    async def test_connect_with_sse(self, mock_client_session_class, mock_streamable_cm_class, mock_sse_cm_class, _):
        """Test connecting to the MCP implementation using SSE fallback."""
        # Setup streamable HTTP to fail during initialization
        mock_streamable_cm_instance = MagicMock()
        mock_streamable_cm_instance.start = AsyncMock()
        mock_streamable_cm_instance.start.return_value = ("read_stream", "write_stream")
        mock_streamable_cm_instance.close = AsyncMock()
        mock_streamable_cm_class.return_value = mock_streamable_cm_instance

        # Setup SSE to succeed
        mock_sse_cm_instance = MagicMock()
        mock_sse_cm_instance.start = AsyncMock()
        mock_sse_cm_instance.start.return_value = ("sse_read_stream", "sse_write_stream")
        mock_sse_cm_class.return_value = mock_sse_cm_instance

        # Setup client sessions
        call_count = 0

        def mock_client_session_factory(*args, **kwargs):
            nonlocal call_count
            call_count += 1
            mock_instance = MagicMock()
            mock_instance.__aenter__ = AsyncMock()
            mock_instance.__aexit__ = AsyncMock()
            mock_instance.initialize = AsyncMock()

            if call_count == 1:
                # First call (streamable HTTP) - initialization fails
                mock_instance.initialize.side_effect = McpError(ErrorData(code=1, message="Connection closed"))
            else:
                # Second call (SSE) - succeeds
                mock_init_result = MagicMock()
                mock_init_result.capabilities = MagicMock(tools=True, resources=True, prompts=True)
                mock_instance.initialize.return_value = mock_init_result

            # Add mocks for list_tools, list_resources, and list_prompts since HttpConnector calls these
            mock_instance.list_tools = AsyncMock()
            mock_instance.list_tools.return_value = MagicMock(tools=[MagicMock(spec=Tool)])
            mock_instance.list_resources = AsyncMock()
            mock_instance.list_resources.return_value = MagicMock(resources=[MagicMock(spec=Resource)])
            mock_instance.list_prompts = AsyncMock()
            mock_instance.list_prompts.return_value = MagicMock(prompts=[MagicMock(spec=Prompt)])

            return mock_instance

        mock_client_session_class.side_effect = mock_client_session_factory

        # Test connect - should try streamable HTTP, fail, then succeed with SSE
        await self.connector.connect()

        # Verify both connection managers were attempted
        mock_streamable_cm_class.assert_called_once()
        mock_sse_cm_class.assert_called_once()

        # Verify client sessions were created for both attempts
        self.assertEqual(mock_client_session_class.call_count, 2)

        # Verify final state uses SSE
        self.assertEqual(self.connector._connection_manager, mock_sse_cm_instance)
        self.assertTrue(self.connector._connected)
        self.assertIsNotNone(self.connector.client_session)

    @patch("mcp_use.connectors.http.StreamableHttpConnectionManager")
    @patch("mcp_use.connectors.http.ClientSession")
    async def test_connect_with_streamable_http(self, mock_client_session_class, mock_cm_class, _):
        """Test connecting to the MCP implementation using streamable HTTP."""
        # Setup streamable HTTP connection manager
        mock_cm_instance = MagicMock()
        mock_cm_instance.start = AsyncMock()
        mock_cm_instance.start.return_value = ("read_stream", "write_stream")
        mock_cm_class.return_value = mock_cm_instance

        # Setup client session that succeeds on initialize
        mock_client_session_instance = MagicMock()
        mock_client_session_instance.__aenter__ = AsyncMock()
        mock_client_session_instance.initialize = AsyncMock()
        mock_init_result = MagicMock()
        mock_init_result.capabilities = MagicMock(tools=True, resources=True, prompts=True)
        mock_client_session_instance.initialize.return_value = mock_init_result

        # Add mocks for list_tools, list_resources, and list_prompts since HttpConnector calls these
        mock_client_session_instance.list_tools = AsyncMock()
        mock_client_session_instance.list_tools.return_value = MagicMock(tools=[MagicMock(spec=Tool)])
        mock_client_session_instance.list_resources = AsyncMock()
        mock_client_session_instance.list_resources.return_value = MagicMock(resources=[MagicMock(spec=Resource)])
        mock_client_session_instance.list_prompts = AsyncMock()
        mock_client_session_instance.list_prompts.return_value = MagicMock(prompts=[MagicMock(spec=Prompt)])

        mock_client_session_class.return_value = mock_client_session_instance

        # Test connect with streamable HTTP
        await self.connector.connect()

        # Verify streamable HTTP connection manager was used
        mock_cm_class.assert_called_once_with("http://localhost:8000", {}, 5, 300)
        mock_cm_instance.start.assert_called_once()

        # Verify client session was created and initialized
        mock_client_session_class.assert_called_once_with(
            "read_stream",
            "write_stream",
            sampling_callback=None,
            elicitation_callback=None,
            message_handler=ANY,
            logging_callback=None,
            client_info=ANY,
        )
        mock_client_session_instance.__aenter__.assert_called_once()
        mock_client_session_instance.initialize.assert_called_once()

        # Verify tools/resources/prompts were populated during connect
        mock_client_session_instance.list_tools.assert_called_once()
        mock_client_session_instance.list_resources.assert_called_once()
        mock_client_session_instance.list_prompts.assert_called_once()

        # Verify final state
        self.assertEqual(self.connector.client_session, mock_client_session_instance)
        self.assertEqual(self.connector._connection_manager, mock_cm_instance)
        self.assertTrue(self.connector._connected)
        self.assertTrue(self.connector._initialized)
        self.assertEqual(len(self.connector._tools), 1)
        self.assertEqual(len(self.connector._resources), 1)
        self.assertEqual(len(self.connector._prompts), 1)

    @patch("mcp_use.connectors.http.StreamableHttpConnectionManager")
    async def test_sse_connect_already_connected(self, mock_cm_class, _):
        """Test connecting when already connected."""
        # Set up the connector as already connected
        self.connector._connected = True

        # Test connect
        await self.connector.connect()

        # Verify connection manager was not created or started
        mock_cm_class.assert_not_called()

    @patch("mcp_use.connectors.http.SseConnectionManager")
    @patch("mcp_use.connectors.http.StreamableHttpConnectionManager")
    async def test_connect_failure(self, mock_streamable_cm_class, mock_sse_cm_class, _):
        """Test handling connection failures."""
        # Setup mocks for streamable HTTP failure
        mock_streamable_cm_instance = MagicMock()
        mock_streamable_cm_instance.start = AsyncMock()
        mock_streamable_cm_instance.close = AsyncMock()
        mock_streamable_cm_instance.start.side_effect = Exception("Streamable HTTP failed")
        mock_streamable_cm_class.return_value = mock_streamable_cm_instance

        # Setup mocks for SSE failure (fallback)
        mock_sse_cm_instance = MagicMock()
        mock_sse_cm_instance.start = AsyncMock()
        mock_sse_cm_instance.close = AsyncMock()
        mock_sse_cm_instance.start.side_effect = Exception("SSE failed")
        mock_sse_cm_class.return_value = mock_sse_cm_instance

        # Test connect failure - should try both transports and fail
        with self.assertRaises(Exception) as context:
            await self.connector.connect()

        # Should get the SSE error since that's the final fallback
        self.assertEqual(str(context.exception), "SSE failed")

        # Verify both connection managers were attempted
        mock_streamable_cm_class.assert_called_once()
        mock_sse_cm_class.assert_called_once()

        # Verify state remains unchanged
        self.assertIsNone(self.connector.client_session)
        self.assertIsNone(self.connector._connection_manager)
        self.assertFalse(self.connector._connected)

    async def test_disconnect(self, _):
        """Test disconnecting from the MCP implementation."""
        # Set up the connector as connected
        self.connector._connected = True
        self.connector._connection_manager = self.mock_cm
        self.connector._cleanup_resources = AsyncMock()

        # Test disconnect
        await self.connector.disconnect()

        # Verify cleanup was called
        self.connector._cleanup_resources.assert_called_once()

        # Verify state changes
        self.assertFalse(self.connector._connected)

    async def test_disconnect_not_connected(self, _):
        """Test disconnecting when not connected."""
        # Ensure the connector is not connected
        self.connector._connected = False

        # Test disconnect
        await self.connector.disconnect()

        # Verify no action was taken
        self.assertIsNone(self.connector._connection_manager)
        self.assertFalse(self.connector._connected)


@patch("mcp_use.connectors.base.logger")
class TestHttpConnectorOperations(IsolatedAsyncioTestCase):
    """Tests for HttpConnector operations."""

    def setUp(self):
        """Set up a connector for each test."""
        self.connector = HttpConnector(base_url="http://localhost:8000")
        # Most operations assume the connector is connected and the client exists.
        self.connector._connected = True
        # Mock the internal client that HttpConnector methods will call.
        # Client methods are async, so AsyncMock is appropriate.
        self.connector.client_session = AsyncMock()
        # _tools is populated by initialize(). Tests that rely on _tools
        # should either call a mocked initialize() or set _tools directly.
        self.connector._tools = None  # Ensure clean state for _tools

    async def test_call_tool(self, _):
        """Test calling a tool."""
        self.connector.client_session.call_tool.return_value = {"result": "success"}

        result = await self.connector.call_tool("test_tool", {"param": "value"})

        self.connector.client_session.call_tool.assert_called_once_with("test_tool", {"param": "value"}, None)
        self.assertEqual(result, {"result": "success"})

    async def test_call_tool_no_client(self, _):
        """Test calling a tool when not connected."""
        self.connector.client_session = None

        with self.assertRaises(RuntimeError) as context:
            await self.connector.call_tool("test_tool", {})

        self.assertEqual(str(context.exception), "MCP client is not connected")

    async def test_initialize(self, _):
        """Test initializing the MCP session with all capabilities enabled."""
        # Setup mock for client.initialize() to return capabilities
        mock_init_result = MagicMock()
        mock_init_result.session_id = "test_session"
        mock_init_result.capabilities = MagicMock(tools=True, resources=True, prompts=True)
        self.connector.client_session.initialize.return_value = mock_init_result

        # Setup mocks for client session methods directly (not connector wrapper methods)
        self.connector.client_session.list_tools.return_value = MagicMock(tools=[MagicMock(spec=Tool)])
        self.connector.client_session.list_resources.return_value = MagicMock(resources=[MagicMock(spec=Resource)])
        self.connector.client_session.list_prompts.return_value = MagicMock(prompts=[MagicMock(spec=Prompt)])

        # Initialize
        result_session_info = await self.connector.initialize()

        # Verify calls to client session methods directly
        self.connector.client_session.initialize.assert_called_once()
        self.connector.client_session.list_tools.assert_called_once()
        self.connector.client_session.list_resources.assert_called_once()
        self.connector.client_session.list_prompts.assert_called_once()

        # Verify connector state
        self.assertEqual(result_session_info, mock_init_result)
        self.assertEqual(len(self.connector._tools), 1)
        self.assertEqual(len(self.connector._resources), 1)
        self.assertEqual(len(self.connector._prompts), 1)

    async def test_initialize_no_client(self, _):
        """Test initializing without a client."""
        self.connector.client_session = None

        with self.assertRaises(RuntimeError) as context:
            await self.connector.initialize()

        self.assertEqual(str(context.exception), "MCP client is not connected")

    async def test_tools_property_initialized(self, _):
        """Test the tools property when initialized."""
        mock_tools = [MagicMock(spec=Tool)]
        self.connector._tools = mock_tools

        tools = self.connector.tools

        self.assertEqual(tools, mock_tools)

    async def test_tools_property_not_initialized(self, _):
        """Test the tools property when not initialized."""
        self.connector._tools = None

        with self.assertRaises(RuntimeError) as context:
            _ = self.connector.tools

        self.assertEqual(str(context.exception), "MCP client is not initialized")

    async def test_list_resources(self, _):
        """Test listing resources."""
        expected_resources_list = [{"uri": "test/resource"}]
        # Mock the client's list_resources method to return an object
        # that has a .resources attribute, as expected by the connector.
        mock_client_response = MagicMock()
        mock_client_response.resources = expected_resources_list
        self.connector.client_session.list_resources.return_value = mock_client_response

        # Call the connector's list_resources method
        result = await self.connector.list_resources()

        # Verify the client's method was called correctly by the connector
        self.connector.client_session.list_resources.assert_called_once_with()
        # The connector's list_resources method should return the list of resources directly.
        self.assertEqual(result, expected_resources_list)

    async def test_list_resources_no_client(self, _):
        """Test listing resources when not connected."""
        self.connector.client_session = None

        with self.assertRaises(RuntimeError) as context:
            await self.connector.list_resources()

        self.assertEqual(str(context.exception), "MCP client is not connected")

    async def test_read_resource(self, _):
        """Test reading a resource."""
        # Define the detailed structure that the connector's read_resource method
        # will parse from the object returned by client.read_resource().
        # This assumes a common MCP pattern where data is nested.
        mock_content_part = MagicMock()
        mock_content_part.content = b"test content"  # Changed from .text
        mock_content_part.mimeType = "text/plain"  # Changed from .mime_type, note camelCase

        mock_result_obj = MagicMock()
        mock_result_obj.contents = [mock_content_part]

        # This is the object returned by self.connector.client.read_resource()
        mock_client_return = MagicMock()
        mock_client_return.result = mock_result_obj  # Actual data is nested under 'result'

        self.connector.client_session.read_resource.return_value = mock_client_return

        # Act: Call the connector's method
        # The connector's read_resource method returns a ReadResourceResult object
        read_resource_result = await self.connector.read_resource("test/resource")

        # Assert: Verify client interaction and the processed result
        self.connector.client_session.read_resource.assert_called_once_with("test/resource")
        # Now, assert the attributes of the returned ReadResourceResult object
        # based on the mocked client_return object's structure.
        self.assertIsNotNone(read_resource_result.result)
        self.assertIsNotNone(read_resource_result.result.contents)
        self.assertEqual(len(read_resource_result.result.contents), 1)
        self.assertEqual(read_resource_result.result.contents[0].content, b"test content")
        self.assertEqual(read_resource_result.result.contents[0].mimeType, "text/plain")

    async def test_read_resource_no_client(self, _):
        """Test reading a resource when not connected."""
        self.connector.client_session = None

        with self.assertRaises(RuntimeError) as context:
            await self.connector.read_resource("test/resource")

        self.assertEqual(str(context.exception), "MCP client is not connected")

    async def test_request(self, _):
        """Test sending a request."""
        self.connector.client_session.request.return_value = {"result": "success"}

        result = await self.connector.request("test_method", {"param": "value"})

        self.connector.client_session.request.assert_called_once_with(
            {"method": "test_method", "params": {"param": "value"}}
        )
        self.assertEqual(result, {"result": "success"})

    async def test_request_no_params(self, _):
        """Test sending a request without params."""
        self.connector.client_session.request.return_value = {"result": "success"}

        result = await self.connector.request("test_method")

        self.connector.client_session.request.assert_called_once_with({"method": "test_method", "params": {}})
        self.assertEqual(result, {"result": "success"})

    async def test_request_no_client(self, _):
        """Test sending a request when not connected."""
        self.connector.client_session = None

        with self.assertRaises(RuntimeError) as context:
            await self.connector.request("test_method")

        self.assertEqual(str(context.exception), "MCP client is not connected")



================================================
FILE: tests/unit/test_logging.py
================================================
"""
Unit tests for the logging module.
"""

import logging
import unittest
from unittest.mock import MagicMock, patch

from mcp_use.logging import Logger, logger


class TestLogging(unittest.TestCase):
    """Tests for the logging module functionality."""

    def test_logger_instance(self):
        """Test that logger is a properly configured logging.Logger instance."""
        self.assertIsInstance(logger, logging.Logger)
        self.assertEqual(logger.name, "mcp_use")

    def test_get_logger(self):
        """Test that get_logger returns a logger with the correct name."""
        test_logger = Logger.get_logger("test_module")
        self.assertIsInstance(test_logger, logging.Logger)
        self.assertEqual(test_logger.name, "test_module")

    def test_get_logger_caching(self):
        """Test that get_logger caches loggers."""
        logger1 = Logger.get_logger("test_cache")
        logger2 = Logger.get_logger("test_cache")

        self.assertIs(logger1, logger2)

    @patch("logging.StreamHandler")
    def test_configure_default(self, mock_stream_handler):
        """Test that configure correctly configures logging with default settings."""
        # Set up mocks
        mock_handler = MagicMock()
        mock_stream_handler.return_value = mock_handler

        # Reset the logger's handlers
        root_logger = Logger.get_logger()
        for handler in root_logger.handlers[:]:
            root_logger.removeHandler(handler)

        # Configure logging with default settings
        Logger.configure()

        # Verify stream handler was created
        mock_stream_handler.assert_called_once()

        # Verify formatter was set
        self.assertIsNotNone(mock_handler.setFormatter.call_args)
        formatter = mock_handler.setFormatter.call_args[0][0]
        self.assertEqual(formatter._fmt, Logger.DEFAULT_FORMAT)

    @patch("logging.StreamHandler")
    def test_configure_debug_level(self, mock_stream_handler):
        """Test that configure correctly configures logging with debug level."""
        # Set up mocks
        mock_handler = MagicMock()
        mock_stream_handler.return_value = mock_handler

        # Reset the logger's handlers
        root_logger = Logger.get_logger()
        for handler in root_logger.handlers[:]:
            root_logger.removeHandler(handler)

        # Configure logging with debug level
        Logger.configure(level=logging.DEBUG)

        # Verify level was set
        self.assertEqual(root_logger.level, logging.DEBUG)

        # Verify stream handler was created
        mock_stream_handler.assert_called_once()

    @patch("logging.StreamHandler")
    def test_configure_format(self, mock_stream_handler):
        """Test that configure correctly configures logging format."""
        # Set up mocks
        mock_handler = MagicMock()
        mock_stream_handler.return_value = mock_handler

        # Reset the logger's handlers
        root_logger = Logger.get_logger()
        for handler in root_logger.handlers[:]:
            root_logger.removeHandler(handler)

        # Configure logging with a custom format
        test_format = "%(levelname)s - %(message)s"
        Logger.configure(format_str=test_format)

        # Verify formatter was set with the custom format
        self.assertIsNotNone(mock_handler.setFormatter.call_args)
        formatter = mock_handler.setFormatter.call_args[0][0]
        self.assertEqual(formatter._fmt, test_format)

    @patch("logging.FileHandler")
    def test_configure_file_logging(self, mock_file_handler):
        """Test configuring logging to a file."""
        # Set up mocks
        mock_handler = MagicMock()
        mock_file_handler.return_value = mock_handler

        # Reset the logger's handlers
        root_logger = Logger.get_logger()
        for handler in root_logger.handlers[:]:
            root_logger.removeHandler(handler)

        # Configure logging with a file
        Logger.configure(log_to_file="/tmp/test.log")

        # Verify FileHandler was created
        mock_file_handler.assert_called_once_with("/tmp/test.log")

        # Verify formatter was set
        self.assertIsNotNone(mock_handler.setFormatter.call_args)



================================================
FILE: tests/unit/test_sandbox_connector.py
================================================
"""
Unit tests for the SandboxConnector class.
"""

import os
import sys
from unittest.mock import ANY, AsyncMock, MagicMock, Mock, patch

import pytest

# Use MagicMock instead of importing from mcp.types
# from mcp.types import CallToolResult, Tool
from mcp_use.connectors.sandbox import SandboxConnector
from mcp_use.task_managers import SseConnectionManager
from mcp_use.types.sandbox import SandboxOptions


# Mock the sandbox module for tests
class MockCommandHandle:
    def __init__(self):
        self.exit_code = 0
        self.is_completed = True

    def kill(self):
        pass


class MockSandbox:
    def __init__(self, *args, **kwargs):
        self.commands = MagicMock()
        self.commands.run = MagicMock(return_value=MockCommandHandle())

    def get_host(self, port):
        return "test-host.sandbox.e2b.dev"

    def kill(self):
        pass


@pytest.fixture(autouse=True)
def mock_logger():
    """Mock the logger to prevent errors during tests."""
    with (
        patch("mcp_use.connectors.base.logger") as mock_base_logger,
        patch("mcp_use.connectors.sandbox.logger") as mock_sandbox_logger,
    ):
        # Set level attribute to an integer for comparison in the logger
        mock_sandbox_logger.handlers = []
        mock_base_logger.handlers = []
        yield mock_sandbox_logger


@pytest.fixture
def mock_sandbox_modules():
    """Mock the E2B sandbox modules."""
    with (
        patch("mcp_use.connectors.sandbox.Sandbox", MockSandbox),
        patch("mcp_use.connectors.sandbox.CommandHandle", MockCommandHandle),
    ):
        yield


@pytest.fixture
def mock_os_environ():
    """Fixture to mock os.environ."""
    with patch.dict(os.environ, {"E2B_API_KEY": "test-api-key"}, clear=False):
        yield


class TestSandboxConnectorInitialization:
    """Tests for SandboxConnector initialization."""

    def test_init_with_api_key(self, mock_sandbox_modules):
        """Test initialization with API key in sandbox options."""
        sandbox_options = SandboxOptions(api_key="test-api-key")
        connector = SandboxConnector("npx", ["test-command"], e2b_options=sandbox_options)

        assert connector.api_key == "test-api-key"
        assert connector.sandbox_template_id == "base"
        assert connector.supergateway_cmd_parts == "npx -y supergateway"
        assert connector.user_command == "npx"
        assert connector.user_args == ["test-command"]
        assert not connector._connected

    def test_init_with_env_api_key(self, mock_sandbox_modules, mock_os_environ):
        """Test initialization with API key from environment."""
        connector = SandboxConnector("npx", ["test-command"])

        assert connector.api_key == "test-api-key"
        assert connector.sandbox_template_id == "base"
        assert connector.user_command == "npx"
        assert connector.user_args == ["test-command"]
        assert not connector._connected

    def test_init_missing_api_key(self, mock_sandbox_modules):
        """Test initialization fails with missing API key."""
        with patch.dict(os.environ, {}, clear=True):
            with pytest.raises(ValueError, match="E2B API key is required"):
                SandboxConnector("npx", ["test-command"])

    def test_init_with_custom_options(self, mock_sandbox_modules):
        """Test initialization with custom sandbox options."""
        sandbox_options = SandboxOptions(
            api_key="test-api-key",
            sandbox_template_id="custom-template",
            supergateway_command="custom-gateway-command",
        )
        connector = SandboxConnector("npx", ["test-command"], e2b_options=sandbox_options)

        assert connector.api_key == "test-api-key"
        assert connector.sandbox_template_id == "custom-template"
        assert connector.supergateway_cmd_parts == "custom-gateway-command"


class TestSandboxConnectorConnection:
    """Tests for SandboxConnector connection methods."""

    @pytest.mark.asyncio
    @patch("mcp_use.connectors.sandbox.SseConnectionManager")
    @patch("mcp_use.connectors.sandbox.ClientSession")
    async def test_connect(self, mock_client_session, mock_connection_manager, mock_sandbox_modules):
        """Test connecting to the MCP implementation in sandbox."""
        # Setup mocks
        mock_manager_instance = Mock(spec=SseConnectionManager)
        mock_manager_instance.start = AsyncMock(return_value=("read_stream", "write_stream"))
        mock_connection_manager.return_value = mock_manager_instance

        mock_client_instance = Mock()
        mock_client_instance.__aenter__ = AsyncMock()
        mock_client_session.return_value = mock_client_instance

        # Mock wait_for_server_response to avoid actual HTTP calls
        with patch.object(SandboxConnector, "wait_for_server_response", new_callable=AsyncMock, return_value=True):
            # Create connector and connect
            sandbox_options = SandboxOptions(api_key="test-api-key")
            connector = SandboxConnector("npx", ["test-command"], e2b_options=sandbox_options)
            await connector.connect()

            # Verify sandbox creation
            assert connector.sandbox is not None

            # Verify connection manager creation and start
            mock_connection_manager.assert_called_once()
            mock_manager_instance.start.assert_called_once()

            # Verify client session creation
            mock_client_session.assert_called_once_with(
                "read_stream",
                "write_stream",
                sampling_callback=None,
                elicitation_callback=None,
                message_handler=ANY,
                logging_callback=None,
                client_info=ANY,
            )
            mock_client_instance.__aenter__.assert_called_once()

            # Verify state
            assert connector._connected is True
            assert connector.client_session == mock_client_instance
            assert connector._connection_manager == mock_manager_instance
            assert connector.base_url == "https://test-host.sandbox.e2b.dev"

    @pytest.mark.asyncio
    async def test_connect_already_connected(self, mock_sandbox_modules):
        """Test connecting when already connected."""
        sandbox_options = SandboxOptions(api_key="test-api-key")
        connector = SandboxConnector("npx", ["test-command"], e2b_options=sandbox_options)
        connector._connected = True

        await connector.connect()

        # Verify no connection established since already connected
        assert connector._connection_manager is None
        assert connector.client_session is None
        assert connector.sandbox is None

    @pytest.mark.asyncio
    @patch("mcp_use.connectors.sandbox.logger")
    @patch("mcp_use.connectors.sandbox.Sandbox")
    async def test_connect_error(self, mock_sandbox_class, mock_logger, mock_sandbox_modules):
        """Test connection error handling."""
        # Setup mocks to raise an exception during sandbox creation
        mock_sandbox_instance = MagicMock()
        mock_sandbox_instance.get_host.side_effect = Exception("Sandbox creation error")
        mock_sandbox_class.return_value = mock_sandbox_instance

        # Create connector and attempt to connect
        sandbox_options = SandboxOptions(api_key="test-api-key")
        connector = SandboxConnector("npx", ["test-command"], e2b_options=sandbox_options)

        # Mock cleanup to avoid errors during exception handling
        connector._cleanup_resources = AsyncMock()

        # Expect the exception to be re-raised
        with pytest.raises(Exception):
            await connector.connect()

        # Verify resources were cleaned up
        connector._cleanup_resources.assert_called_once()
        assert connector._connected is False
        assert connector.client_session is None

    @pytest.mark.asyncio
    async def test_disconnect(self, mock_sandbox_modules):
        """Test disconnecting from MCP implementation."""
        sandbox_options = SandboxOptions(api_key="test-api-key")
        connector = SandboxConnector("npx", ["test-command"], e2b_options=sandbox_options)
        connector._connected = True

        # Mock the _cleanup_resources method to replace the actual method
        connector._cleanup_resources = AsyncMock()

        # Disconnect
        await connector.disconnect()

        # Verify _cleanup_resources was called
        connector._cleanup_resources.assert_called_once()

        # Verify state
        assert connector._connected is False


class TestSandboxConnectorCleanup:
    """Tests for SandboxConnector cleanup methods."""

    @pytest.mark.asyncio
    async def test_cleanup_resources(self, mock_sandbox_modules):
        """Test cleanup of all resources."""
        # Create connector with resources to clean up
        sandbox_options = SandboxOptions(api_key="test-api-key")
        connector = SandboxConnector("npx", ["test-command"], e2b_options=sandbox_options)

        # Set up mock resources
        process_mock = MagicMock()
        process_mock.kill = MagicMock()
        connector.process = process_mock

        sandbox_mock = MagicMock()
        sandbox_mock.kill = MagicMock()
        connector.sandbox = sandbox_mock

        # Mock super()._cleanup_resources method
        with patch(
            "mcp_use.connectors.base.BaseConnector._cleanup_resources", new_callable=AsyncMock
        ) as mock_super_cleanup:
            # Call cleanup
            await connector._cleanup_resources()

            # Verify process was terminated
            process_mock.kill.assert_called_once()

            # Verify sandbox was closed
            sandbox_mock.kill.assert_called_once()

            # Verify parent cleanup was called
            mock_super_cleanup.assert_called_once()

            # Verify state changes
            assert connector.sandbox is None
            assert connector.process is None
            assert connector.stdout_lines == []
            assert connector.stderr_lines == []
            assert connector.base_url is None

    @pytest.mark.asyncio
    @patch("mcp_use.connectors.sandbox.logger")
    async def test_cleanup_resources_with_exceptions(self, mock_logger, mock_sandbox_modules):
        """Test cleanup handles exceptions gracefully."""
        # Create connector with resources to clean up
        sandbox_options = SandboxOptions(api_key="test-api-key")
        connector = SandboxConnector("npx", ["test-command"], e2b_options=sandbox_options)

        # Set up mock resources that will raise exceptions
        process_mock = MagicMock()
        process_mock.kill = MagicMock(side_effect=Exception("Process kill error"))
        connector.process = process_mock

        sandbox_mock = MagicMock()
        sandbox_mock.kill = MagicMock(side_effect=Exception("Sandbox kill error"))
        connector.sandbox = sandbox_mock

        # Configure logger to avoid test errors
        mock_logger.warning = MagicMock()

        # Mock super()._cleanup_resources method
        with patch(
            "mcp_use.connectors.base.BaseConnector._cleanup_resources", new_callable=AsyncMock
        ) as mock_super_cleanup:
            # Call cleanup
            await connector._cleanup_resources()

            # Verify process termination was attempted even though it errored
            process_mock.kill.assert_called_once()

            # Verify sandbox close was attempted even though it errored
            sandbox_mock.kill.assert_called_once()

            # Verify warnings were logged
            assert mock_logger.warning.call_count == 2

            # Verify parent cleanup was still called
            mock_super_cleanup.assert_called_once()

            # Verify state changes
            assert connector.sandbox is None
            assert connector.process is None
            assert connector.stdout_lines == []
            assert connector.stderr_lines == []
            assert connector.base_url is None



================================================
FILE: tests/unit/test_search_tools_issue_138.py
================================================
#!/usr/bin/env python3
"""
Test for issue #138 - tuple unpacking error in search_tools when using server manager.

This test specifically covers the scenario where ToolSearchEngine.search_tools()
would return inconsistent types (string vs list of tuples), causing a ValueError
when SearchToolsTool tried to format the results.
"""

from unittest.mock import AsyncMock, Mock, patch

import pytest
from langchain_core.tools import BaseTool
from pydantic import BaseModel

from mcp_use.managers.tools.search_tools import SearchToolsTool, ToolSearchEngine, ToolSearchInput


class MockTool(BaseTool):
    """Mock tool for testing"""

    name: str = "mock_tool"
    description: str = "A mock tool for testing"

    def _run(self, input_str: str) -> str:
        return f"Mock result: {input_str}"


class TestSearchToolsIssue138:
    """Test suite for issue #138 - search tools tuple unpacking error"""

    def setup_method(self):
        """Set up test fixtures"""
        self.mock_server_manager = Mock()
        self.mock_server_manager.active_server = "test_server"

    @patch("mcp_use.managers.tools.search_tools.logger")
    async def test_tool_search_engine_consistent_return_type_with_results(self, mock_logger):
        """Test that ToolSearchEngine.search_tools() returns string when results found"""
        search_engine = ToolSearchEngine()
        search_engine.is_indexed = True

        # Mock the search method to return results
        mock_tool = MockTool()
        search_results = [(mock_tool, "test_server", 0.95)]
        search_engine.search = Mock(return_value=search_results)

        # Call search_tools - should return formatted string, not raw results
        result = await search_engine.search_tools("test query", top_k=5)

        # Verify return type is string (the bug was returning list here)
        assert isinstance(result, str), f"Expected str, got {type(result)}"
        assert "Search results" in result
        assert "mock_tool" in result
        assert "test_server" in result
        assert "95.0%" in result

    async def test_tool_search_engine_consistent_return_type_no_results(self):
        """Test that ToolSearchEngine.search_tools() returns string when no results found"""
        search_engine = ToolSearchEngine()
        search_engine.is_indexed = True

        # Mock the search method to return empty results
        search_engine.search = Mock(return_value=[])

        # Call search_tools - should return formatted string
        result = await search_engine.search_tools("test query", top_k=5)

        # Verify return type is string
        assert isinstance(result, str), f"Expected str, got {type(result)}"
        assert "No relevant tools found" in result

    async def test_tool_search_engine_not_indexed_scenario(self):
        """Test search_tools when not indexed (reproduces the original bug scenario)"""
        search_engine = ToolSearchEngine()
        search_engine.is_indexed = False

        # This scenario would trigger the "still preparing" message
        result = await search_engine.search_tools("test query", top_k=5)

        # Should return string, not cause tuple unpacking error
        assert isinstance(result, str), f"Expected str, got {type(result)}"
        assert "still preparing" in result

    async def test_search_tools_tool_arun_with_string_result(self):
        """Test SearchToolsTool._arun() handles string results correctly (core bug scenario)"""
        # Create SearchToolsTool with mock dependencies
        search_tool = SearchToolsTool(self.mock_server_manager)

        # Mock the search_tool instance to return a string (as it should after the fix)
        mock_search_engine = Mock()
        mock_search_engine.search_tools = AsyncMock(return_value="Mock search results string")
        search_tool._search_tool = mock_search_engine

        # This call should NOT raise "ValueError: not enough values to unpack (expected 3, got 1)"
        result = await search_tool._arun("test query", top_k=5)

        # Should return the string directly, not try to format it again
        assert isinstance(result, str)
        assert result == "Mock search results string"

    async def test_search_tools_tool_integration_scenario(self):
        """Integration test simulating the exact scenario from issue #138"""
        # Set up SearchToolsTool as it would be used in MCPAgent with server manager
        search_tool = SearchToolsTool(self.mock_server_manager)

        # Create a ToolSearchEngine instance with mocked server_tools
        search_engine = ToolSearchEngine(server_manager=self.mock_server_manager)
        search_engine.is_indexed = False  # This triggers the "still preparing" scenario

        # Mock the server_tools to avoid iteration error
        self.mock_server_manager._server_tools = {}
        # Mock the prefetch method to avoid await error
        self.mock_server_manager._prefetch_server_tools = AsyncMock()

        search_tool._search_tool = search_engine

        # This exact call pattern was causing the tuple unpacking error in issue #138
        try:
            result = await search_tool._arun("How do I create an agent using Vapi Python SDK?", top_k=100)

            # Should succeed and return a string
            assert isinstance(result, str), f"Expected str, got {type(result)}"
            assert len(result) > 0, "Result should not be empty"

        except ValueError as e:
            if "not enough values to unpack (expected 3, got 1)" in str(e):
                pytest.fail("Issue #138 regression detected: tuple unpacking error occurred")
            else:
                # Re-raise other ValueErrors
                raise

    @patch("mcp_use.managers.tools.search_tools.logger")
    def test_format_search_results_method_exists(self, mock_logger):
        """Test that _format_search_results method exists and works correctly"""
        search_engine = ToolSearchEngine()

        # Test with mock results
        mock_tool = MockTool()
        test_results = [(mock_tool, "test_server", 0.95)]

        formatted = search_engine._format_search_results(test_results)

        assert isinstance(formatted, str)
        assert "Search results" in formatted
        assert "mock_tool" in formatted
        assert "test_server" in formatted
        assert "95.0%" in formatted

    def test_format_search_results_empty_list(self):
        """Test _format_search_results with empty list"""
        search_engine = ToolSearchEngine()

        formatted = search_engine._format_search_results([])

        assert isinstance(formatted, str)
        assert "Search results" in formatted

    @patch("mcp_use.managers.tools.search_tools.logger")
    async def test_server_manager_active_server_marking(self, mock_logger):
        """Test that active server is properly marked in results"""
        search_engine = ToolSearchEngine()
        search_engine.is_indexed = True

        # Mock search results
        mock_tool = MockTool()
        search_results = [(mock_tool, "test_server", 0.95)]
        search_engine.search = Mock(return_value=search_results)

        # Call with active_server parameter
        result = await search_engine.search_tools("test query", active_server="test_server")

        assert isinstance(result, str)
        assert "(ACTIVE)" in result, "Active server should be marked"

    def test_search_tools_input_validation(self):
        """Test ToolSearchInput validation"""
        # Valid input
        valid_input = ToolSearchInput(query="test query", top_k=50)
        assert valid_input.query == "test query"
        assert valid_input.top_k == 50

        # Default top_k
        default_input = ToolSearchInput(query="test")
        assert default_input.top_k == 100



================================================
FILE: tests/unit/test_session.py
================================================
"""
Unit tests for the MCPSession class.
"""

import unittest
from unittest import IsolatedAsyncioTestCase
from unittest.mock import AsyncMock, MagicMock, PropertyMock, patch

from mcp_use.session import MCPSession


class TestMCPSessionInitialization(unittest.TestCase):
    """Tests for MCPSession initialization."""

    def test_init_default(self):
        """Test initialization with default parameters."""
        connector = MagicMock()
        session = MCPSession(connector)

        self.assertEqual(session.connector, connector)
        self.assertIsNone(session.session_info)
        self.assertTrue(session.auto_connect)

    def test_init_with_auto_connect_false(self):
        """Test initialization with auto_connect set to False."""
        connector = MagicMock()
        session = MCPSession(connector, auto_connect=False)

        self.assertEqual(session.connector, connector)
        self.assertIsNone(session.session_info)
        self.assertFalse(session.auto_connect)


class TestMCPSessionConnection(IsolatedAsyncioTestCase):
    """Tests for MCPSession connection methods."""

    def setUp(self):
        """Set up a session with a mock connector for each test."""
        self.connector = MagicMock()
        self.connector.connect = AsyncMock()
        self.connector.disconnect = AsyncMock()

        # Mock the is_connected property - by default not connected
        type(self.connector).is_connected = PropertyMock(return_value=False)

        self.session = MCPSession(self.connector)

    async def test_connect(self):
        """Test connecting to the MCP implementation."""
        await self.session.connect()
        self.connector.connect.assert_called_once()

    async def test_disconnect(self):
        """Test disconnecting from the MCP implementation."""
        await self.session.disconnect()
        self.connector.disconnect.assert_called_once()

    async def test_async_context_manager(self):
        """Test using the session as an async context manager."""
        async with self.session as session:
            self.assertEqual(session, self.session)
            self.connector.connect.assert_called_once()

        self.connector.disconnect.assert_called_once()

    async def test_is_connected_property(self):
        """Test the is_connected property."""
        # Test when not connected
        self.assertFalse(self.session.is_connected)

        # Test when connected - update the mock to return True
        type(self.connector).is_connected = PropertyMock(return_value=True)
        self.assertTrue(self.session.is_connected)


class TestMCPSessionOperations(IsolatedAsyncioTestCase):
    """Tests for MCPSession operations."""

    def setUp(self):
        """Set up a session with a mock connector for each test."""
        self.connector = MagicMock()
        self.connector.connect = AsyncMock()
        self.connector.disconnect = AsyncMock()
        self.connector.initialize = AsyncMock(return_value={"session_id": "test_session"})

        # Mock the is_connected property - by default not connected
        type(self.connector).is_connected = PropertyMock(return_value=False)

        self.session = MCPSession(self.connector)

    async def test_initialize(self):
        """Test initializing the session."""
        # Test initialization when not connected
        result = await self.session.initialize()

        # Verify connect was called since auto_connect is True
        self.connector.connect.assert_called_once()
        self.connector.initialize.assert_called_once()

        # Verify session_info was set
        self.assertEqual(self.session.session_info, {"session_id": "test_session"})
        self.assertEqual(result, {"session_id": "test_session"})

    async def test_initialize_already_connected(self):
        """Test initializing the session when already connected."""
        # Set up the connector to indicate it's already connected
        type(self.connector).is_connected = PropertyMock(return_value=True)

        # Test initialization when already connected
        await self.session.initialize()

        # Verify connect was not called since already connected
        self.connector.connect.assert_not_called()
        self.connector.initialize.assert_called_once()



================================================
FILE: tests/unit/test_stdio_connector.py
================================================
"""
Unit tests for the StdioConnector class.
"""

import sys
from unittest.mock import ANY, AsyncMock, MagicMock, Mock, patch

import pytest
from mcp.types import CallToolResult, Tool
from pydantic import AnyUrl

from mcp_use.connectors.stdio import StdioConnector
from mcp_use.task_managers.stdio import StdioConnectionManager


@pytest.fixture(autouse=True)
def mock_logger():
    """Mock the logger to prevent errors during tests."""
    with patch("mcp_use.connectors.base.logger") as mock_logger:
        yield mock_logger


class TestStdioConnectorInitialization:
    """Tests for StdioConnector initialization."""

    def test_init_default(self):
        """Test initialization with default parameters."""
        connector = StdioConnector()

        assert connector.command == "npx"
        assert connector.args == []
        assert connector.env is None
        assert connector.errlog == sys.stderr
        assert connector.client_session is None
        assert connector._connection_manager is None
        assert connector._tools is None
        assert connector._connected is False

    def test_init_with_params(self):
        """Test initialization with custom parameters."""
        command = "custom-command"
        args = ["--arg1", "--arg2"]
        env = {"ENV_VAR": "value"}
        errlog = Mock()

        connector = StdioConnector(command, args, env, errlog)

        assert connector.command == command
        assert connector.args == args
        assert connector.env == env
        assert connector.errlog == errlog
        assert connector.client_session is None
        assert connector._connection_manager is None
        assert connector._tools is None
        assert connector._connected is False


class TestStdioConnectorConnection:
    """Tests for StdioConnector connection methods."""

    @pytest.mark.asyncio
    @patch("mcp_use.connectors.stdio.StdioConnectionManager")
    @patch("mcp_use.connectors.stdio.ClientSession")
    @patch("mcp_use.connectors.stdio.logger")
    async def test_connect(self, mock_stdio_logger, mock_client_session, mock_connection_manager):
        """Test connecting to the MCP implementation."""
        # Setup mocks
        mock_manager_instance = Mock(spec=StdioConnectionManager)
        mock_manager_instance.start = AsyncMock(return_value=("read_stream", "write_stream"))
        mock_connection_manager.return_value = mock_manager_instance

        mock_client_instance = Mock()
        mock_client_instance.__aenter__ = AsyncMock()
        mock_client_session.return_value = mock_client_instance

        # Create connector and connect
        connector = StdioConnector(command="test-command", args=["--test"])
        await connector.connect()

        # Verify connection manager creation
        mock_connection_manager.assert_called_once()
        mock_manager_instance.start.assert_called_once()

        # Verify client session creation
        mock_client_session.assert_called_once_with(
            "read_stream",
            "write_stream",
            sampling_callback=None,
            elicitation_callback=None,
            message_handler=ANY,
            logging_callback=None,
            client_info=ANY,
        )
        mock_client_instance.__aenter__.assert_called_once()

        # Verify state
        assert connector._connected is True
        assert connector.client_session == mock_client_instance
        assert connector._connection_manager == mock_manager_instance

    @pytest.mark.asyncio
    @patch("mcp_use.connectors.stdio.logger")
    async def test_connect_already_connected(self, mock_stdio_logger):
        """Test connecting when already connected."""
        connector = StdioConnector()
        connector._connected = True

        await connector.connect()

        # Verify no connection established since already connected
        assert connector._connection_manager is None
        assert connector.client_session is None

    @pytest.mark.asyncio
    @patch("mcp_use.connectors.stdio.StdioConnectionManager")
    @patch("mcp_use.connectors.stdio.ClientSession")
    @patch("mcp_use.connectors.stdio.logger")
    @patch("mcp_use.connectors.base.logger")
    async def test_connect_error(
        self,
        mock_base_logger,
        mock_stdio_logger,
        mock_client_session,
        mock_connection_manager,
    ):
        """Test connection error handling."""
        # Setup mocks to raise an exception
        mock_manager_instance = Mock(spec=StdioConnectionManager)
        mock_manager_instance.start = AsyncMock(side_effect=Exception("Connection error"))
        mock_connection_manager.return_value = mock_manager_instance

        mock_manager_instance.stop = AsyncMock()

        # Create connector and attempt to connect
        connector = StdioConnector()

        # Expect the exception to be re-raised
        with pytest.raises(Exception, match="Connection error"):
            await connector.connect()

        # Verify resources were cleaned up
        assert connector._connected is False
        assert connector.client_session is None

        # Mock should be called to clean up resources
        mock_manager_instance.stop.assert_called_once()

    @pytest.mark.asyncio
    async def test_disconnect_not_connected(self):
        """Test disconnecting when not connected."""
        connector = StdioConnector()
        connector._connected = False

        await connector.disconnect()

        # Should do nothing since not connected
        assert connector._connected is False

    @pytest.mark.asyncio
    async def test_disconnect(self):
        """Test disconnecting from MCP implementation."""
        connector = StdioConnector()
        connector._connected = True

        # Mock the _cleanup_resources method to replace the actual method
        connector._cleanup_resources = AsyncMock()

        # Disconnect
        await connector.disconnect()

        # Verify _cleanup_resources was called
        connector._cleanup_resources.assert_called_once()

        # Verify state
        assert connector._connected is False


class TestStdioConnectorOperations:
    """Tests for StdioConnector operations."""

    @pytest.mark.asyncio
    async def test_initialize(self):
        """Test initializing the MCP session."""
        connector = StdioConnector()

        # Setup mocks
        mock_client = MagicMock()
        # Mock client.initialize() to return capabilities
        mock_init_result = MagicMock()
        mock_init_result.status = "success"  # Or whatever structure the Stdio connector expects to return
        mock_init_result.capabilities = MagicMock(tools=True, resources=True, prompts=True)
        mock_client.initialize = AsyncMock(return_value=mock_init_result)

        # Mocks for list_tools, list_resources, list_prompts (already well-structured)
        mock_tools_response = MagicMock(tools=[MagicMock(spec=Tool)])
        mock_client.list_tools = AsyncMock(return_value=mock_tools_response)

        mock_list_resources_response = MagicMock()
        mock_list_resources_response.resources = []
        mock_client.list_resources = AsyncMock(return_value=mock_list_resources_response)

        # Mock list_prompts (called by base initialize)
        mock_list_prompts_response = MagicMock()
        mock_list_prompts_response.prompts = []  # Assumes a .prompts attribute
        mock_client.list_prompts = AsyncMock(return_value=mock_list_prompts_response)

        connector.client_session = mock_client
        # IMPORTANT: Mark as connected to prevent _ensure_connected from trying to reconnect
        connector._connected = True

        # Initialize
        result_session_info = await connector.initialize()

        # Verify calls
        mock_client.initialize.assert_called_once()
        mock_client.list_tools.assert_called_once()
        mock_client.list_resources.assert_called_once()
        mock_client.list_prompts.assert_called_once()

        # Verify connector state and return value
        assert result_session_info == mock_init_result
        assert connector._tools is not None
        assert len(connector._tools) == 1
        assert connector._resources is not None
        assert len(connector._resources) == 0  # Based on current mock for list_resources
        assert connector._prompts is not None
        assert len(connector._prompts) == 0  # Based on current mock for list_prompts

    @pytest.mark.asyncio
    async def test_initialize_no_client(self):
        """Test initializing without a client."""
        connector = StdioConnector()
        connector.client_session = None

        # Expect RuntimeError
        with pytest.raises(RuntimeError, match="MCP client is not connected"):
            await connector.initialize()

    def test_tools_property(self):
        """Test the tools property."""
        connector = StdioConnector()
        mock_tools = [Mock(spec=Tool)]
        connector._tools = mock_tools

        # Get tools
        tools = connector.tools

        assert tools == mock_tools

    def test_tools_property_not_initialized(self):
        """Test the tools property when not initialized."""
        connector = StdioConnector()
        connector._tools = None

        # Expect RuntimeError
        with pytest.raises(RuntimeError, match="MCP client is not initialized"):
            _ = connector.tools

    @pytest.mark.asyncio
    async def test_call_tool(self):
        """Test calling an MCP tool."""
        connector = StdioConnector()
        mock_client = Mock()
        mock_result = Mock(spec=CallToolResult)
        mock_client.call_tool = AsyncMock(return_value=mock_result)
        connector.client_session = mock_client

        # Mock the connection state to simulate being properly connected
        connector._connected = True

        # Mock a connection manager to simulate active connection
        mock_connection_manager = Mock()
        mock_task = Mock()
        mock_task.done.return_value = False  # Task is still running (connection active)
        mock_connection_manager._task = mock_task
        mock_connection_manager.get_streams.return_value = ("read_stream", "write_stream")
        connector._connection_manager = mock_connection_manager

        # Call tool
        tool_name = "test_tool"
        arguments = {"param": "value"}
        result = await connector.call_tool(tool_name, arguments)

        # Verify
        mock_client.call_tool.assert_called_once_with(tool_name, arguments, None)
        assert result == mock_result

    @pytest.mark.asyncio
    async def test_call_tool_no_client(self):
        """Test calling a tool without a client."""
        connector = StdioConnector()
        connector.client_session = None

        # Expect RuntimeError
        with pytest.raises(RuntimeError, match="MCP client is not connected"):
            await connector.call_tool("test_tool", {})

    @pytest.mark.asyncio
    async def test_list_resources(self):
        """Test listing resources."""
        connector = StdioConnector()
        mock_client = Mock()
        mock_result = MagicMock()
        mock_result.resources = [MagicMock()]
        mock_client.list_resources = AsyncMock(return_value=mock_result)
        connector.client_session = mock_client
        # Mark as connected to prevent _ensure_connected from trying to reconnect
        connector._connected = True

        # List resources
        result = await connector.list_resources()

        # Verify
        mock_client.list_resources.assert_called_once()
        assert result == mock_result.resources

    @pytest.mark.asyncio
    async def test_list_resources_no_client(self):
        """Test listing resources without a client."""
        connector = StdioConnector()
        connector.client_session = None

        # Expect RuntimeError
        with pytest.raises(RuntimeError, match="MCP client is not connected"):
            await connector.list_resources()

    @pytest.mark.asyncio
    async def test_read_resource(self):
        """Test reading a resource."""
        # Mocked return for connector.client.read_resource().
        # Needs the structure StdioConnector.read_resource expects.
        mock_client_return_value = MagicMock()  # spec=ReadResourceResult optional with MagicMock if defining manually

        # Define the nested structure
        content_item_mock = MagicMock()
        content_item_mock.content = b"test content"
        # Note camelCase.
        # Adjust if StdioConnector expects a different attribute name for mimetype.
        content_item_mock.mimeType = "text/plain"

        result_attribute_mock = MagicMock()  # This is for the .result attribute
        result_attribute_mock.contents = [content_item_mock]  # .contents is a list of these items

        mock_client_return_value.result = result_attribute_mock

        # Setup the connector and mock client
        connector = StdioConnector()
        # Mock the Stdio client and its methods.
        mock_stdio_client = MagicMock()
        mock_stdio_client.read_resource = AsyncMock(return_value=mock_client_return_value)
        # If other client methods are called by StdioConnector.read_resource,
        # ensure they are AsyncMocks.

        connector.client_session = mock_stdio_client
        # Mark as connected to prevent _ensure_connected from trying to reconnect
        connector._connected = True

        # Mock a connection manager to simulate active connection
        mock_connection_manager = Mock()
        mock_task = Mock()
        mock_task.done.return_value = False  # Task is still running (connection active)
        mock_connection_manager._task = mock_task
        mock_connection_manager.get_streams.return_value = ("read_stream", "write_stream")
        connector._connection_manager = mock_connection_manager

        # Act: Call the connector's method
        # connector.read_resource returns a ReadResourceResult object.
        read_resource_result = await connector.read_resource(uri=AnyUrl("file:///test/resource"))

        # Assert: Verify the outcome and client interaction
        # Assert attributes of ReadResourceResult against mock_client_return_value.
        assert read_resource_result.result is not None
        assert read_resource_result.result.contents is not None
        assert len(read_resource_result.result.contents) == 1
        assert read_resource_result.result.contents[0].content == b"test content"
        assert read_resource_result.result.contents[0].mimeType == "text/plain"
        mock_stdio_client.read_resource.assert_called_once_with(AnyUrl("file:///test/resource"))

    @pytest.mark.asyncio
    async def test_read_resource_no_client(self):
        """Test reading a resource without a client."""
        connector = StdioConnector()
        connector.client_session = None

        # Expect RuntimeError
        with pytest.raises(RuntimeError, match="MCP client is not connected"):
            await connector.read_resource("test_uri")

    @pytest.mark.asyncio
    async def test_request(self):
        """Test sending a raw request."""
        connector = StdioConnector()
        mock_client = Mock()
        mock_result = {"result": "success"}
        mock_client.request = AsyncMock(return_value=mock_result)
        connector.client_session = mock_client
        # Mark as connected to prevent _ensure_connected from trying to reconnect
        connector._connected = True

        # Send request
        method = "test_method"
        params = {"param": "value"}
        result = await connector.request(method, params)

        # Verify
        mock_client.request.assert_called_once_with({"method": method, "params": params})
        assert result == mock_result

    @pytest.mark.asyncio
    async def test_request_no_params(self):
        """Test sending a raw request without params."""
        connector = StdioConnector()
        mock_client = Mock()
        mock_result = {"result": "success"}
        mock_client.request = AsyncMock(return_value=mock_result)
        connector.client_session = mock_client
        # Mark as connected to prevent _ensure_connected from trying to reconnect
        connector._connected = True

        # Send request without params
        method = "test_method"
        result = await connector.request(method)

        # Verify
        mock_client.request.assert_called_once_with({"method": method, "params": {}})
        assert result == mock_result

    @pytest.mark.asyncio
    async def test_request_no_client(self):
        """Test sending a raw request without a client."""
        connector = StdioConnector()
        connector.client_session = None

        # Expect RuntimeError
        with pytest.raises(RuntimeError, match="MCP client is not connected"):
            await connector.request("test_method")



================================================
FILE: tests/unit/test_websocket_connection_manager.py
================================================
#!/usr/bin/env python3
"""Unit tests for WebSocketConnectionManager."""

import pytest

from mcp_use.task_managers.websocket import WebSocketConnectionManager


class TestWebSocketConnectionManager:
    """Test cases for WebSocketConnectionManager."""

    def test_init_with_url_only(self):
        """Test that WebSocketConnectionManager can be initialized with URL only."""
        url = "ws://localhost:8080"
        manager = WebSocketConnectionManager(url)

        assert manager.url == url
        assert manager.headers == {}

    def test_init_with_url_and_headers(self):
        """Test that WebSocketConnectionManager can be initialized with URL and headers."""
        url = "ws://localhost:8080"
        headers = {"Authorization": "Bearer token123", "User-Agent": "test-client"}
        manager = WebSocketConnectionManager(url, headers)

        assert manager.url == url
        assert manager.headers == headers

    def test_init_with_url_and_none_headers(self):
        """Test that WebSocketConnectionManager handles None headers correctly."""
        url = "ws://localhost:8080"
        manager = WebSocketConnectionManager(url, None)

        assert manager.url == url
        assert manager.headers == {}

    def test_init_with_empty_headers(self):
        """Test that WebSocketConnectionManager handles empty headers correctly."""
        url = "ws://localhost:8080"
        headers = {}
        manager = WebSocketConnectionManager(url, headers)

        assert manager.url == url
        assert manager.headers == headers

    def test_headers_parameter_optional(self):
        """Test that headers parameter is optional and defaults correctly."""
        url = "ws://localhost:8080"

        # Should work without headers parameter
        manager1 = WebSocketConnectionManager(url)
        assert manager1.headers == {}

        # Should work with explicit None
        manager2 = WebSocketConnectionManager(url, None)
        assert manager2.headers == {}

        # Should work with actual headers
        headers = {"Content-Type": "application/json"}
        manager3 = WebSocketConnectionManager(url, headers)
        assert manager3.headers == headers

    def test_fix_for_issue_118(self):
        """Test that reproduces and verifies the fix for GitHub issue #118.

        The original error was:
        WebSocketConnectionManager.__init__() takes 2 positional arguments but 3 were given

        This happened because WebSocketConnector was trying to pass headers to
        WebSocketConnectionManager, but the constructor didn't accept headers.
        """
        url = "ws://example.com"
        headers = {"Authorization": "Bearer test-token"}

        # This should NOT raise "takes 2 positional arguments but 3 were given"
        try:
            manager = WebSocketConnectionManager(url, headers)
            assert manager.url == url
            assert manager.headers == headers
        except TypeError as e:
            pytest.fail(f"WebSocketConnectionManager failed to accept headers parameter: {e}")



================================================
FILE: .github/pull_request_template.md
================================================
# Pull Request Description

## Changes

Describe the changes introduced by this PR in a concise manner.

## Implementation Details

1. List the specific implementation details
2. Include code organization, architectural decisions
3. Note any dependencies that were added or modified

## Example Usage (Before)

```python
# Include example code showing how things worked before (if applicable)
```

## Example Usage (After)

```python
# Include example code showing how things work after your changes
```

## Documentation Updates

* List any documentation files that were updated
* Explain what was changed in each file

## Testing

Describe how you tested these changes:
- Unit tests added/modified
- Manual testing performed
- Edge cases considered

## Backwards Compatibility

Explain whether these changes are backwards compatible. If not, describe what users will need to do to adapt to these changes.

## Related Issues

Closes #[issue_number]



================================================
FILE: .github/release-drafter.yml
================================================
name-template: '$RESOLVED_VERSION 🌈'
tag-template: '$RESOLVED_VERSION'
categories:
  - title: '🚀 Features'
    labels:
      - 'feature'
      - 'feat'
      - 'enhancement'
  - title: '🐛 Bug Fixes'
    labels:
      - 'fix'
      - 'bugfix'
      - 'bug'
  - title: '🧰 Maintenance'
    label: 'chore'
change-template: '- $TITLE @$AUTHOR (#$NUMBER)'
change-title-escapes: '\<*_&' # You can add # and @ to disable mentions, and add ` to disable code blocks.
version-resolver:
  major:
    labels:
      - 'major'
  minor:
    labels:
      - 'minor'
  patch:
    labels:
      - 'patch'
  default: patch
template: |
  ## Changes

  $CHANGES



================================================
FILE: .github/ISSUE_TEMPLATE/bug_report.md
================================================
---
name: Bug report
about: Create a report to help us improve
title: ''
labels: ''
assignees: ''

---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.



================================================
FILE: .github/workflows/changelog.yml
================================================
name: "Update Changelogs"

on:
  release:
    types: [released]

jobs:
  update:
    runs-on: ubuntu-latest

    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # updated CHANGELOG back to the repository.
      # https://github.blog/changelog/2023-02-02-github-actions-updating-the-default-github_token-permissions-to-read-only/
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.target_commitish }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Changelog
        uses: stefanzweifel/changelog-updater-action@v1
        with:
          latest-version: ${{ github.event.release.tag_name }}
          release-notes: ${{ github.event.release.body }}

      - name: Update Docs Changelog
        run: |
          # Get current date in the required format
          CURRENT_DATE=$(date +"%Y‑%m‑%d")

          # Create the new changelog entry
          NEW_ENTRY="<Update label=\"$CURRENT_DATE\">
            ## ${{ github.event.release.tag_name }}
            ${{ github.event.release.body }}
          </Update>

          "

          # Read the current changelog and insert the new entry after the front matter
          python -c "
          import re

          # Read the current changelog
          with open('docs/changelog.mdx', 'r') as f:
              content = f.read()

          # Find the end of the front matter
          front_matter_end = content.find('---', content.find('---') + 1) + 3

          # Split content into front matter and body
          front_matter = content[:front_matter_end]
          body = content[front_matter_end:]

          # Create new entry
          new_entry = '''$NEW_ENTRY'''

          # Combine and write back
          new_content = front_matter + '\n\n' + new_entry + body.lstrip()

          with open('docs/changelog.mdx', 'w') as f:
              f.write(new_content)
          "

      - name: Commit updated CHANGELOG
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: ${{ github.event.release.target_commitish }}
          commit_message: Update CHANGELOG and docs changelog
          file_pattern: CHANGELOG.md docs/changelog.mdx



================================================
FILE: .github/workflows/publish.yml
================================================
name: Release

on:
  release:
    types: [published]

# Required for PyPI trusted publishing
permissions:
  id-token: write
  contents: read

jobs:
  check-version-and-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel tomli

      - name: Verify version match
        id: check-version
        run: |
          # Extract current version from pyproject.toml
          PYPROJECT_VERSION=$(python -c "
          import tomli
          with open('pyproject.toml', 'rb') as f:
              data = tomli.load(f)
          print(data['project']['version'])
          ")

          # Get release tag version (remove 'v' prefix if present)
          RELEASE_VERSION="${{ github.event.release.tag_name }}"
          RELEASE_VERSION=${RELEASE_VERSION#v}

          echo "PyProject version: $PYPROJECT_VERSION"
          echo "Release version: $RELEASE_VERSION"

          if [ "$PYPROJECT_VERSION" = "$RELEASE_VERSION" ]; then
            echo "✅ Versions match! Proceeding with PyPI publish"
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "version=$PYPROJECT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "❌ Version mismatch! PyProject: $PYPROJECT_VERSION, Release: $RELEASE_VERSION"
            echo "should_publish=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Build package
        if: steps.check-version.outputs.should_publish == 'true'
        run: |
          python -m build

      - name: Check if already published to PyPI
        if: steps.check-version.outputs.should_publish == 'true'
        id: check-pypi
        run: |
          # Check if this version exists on PyPI
          VERSION="${{ steps.check-version.outputs.version }}"
          if pip index versions mcp-use | grep -q "Available versions: .*$VERSION"; then
            echo "Version $VERSION already exists on PyPI"
            echo "publish_needed=false" >> $GITHUB_OUTPUT
          else
            echo "Version $VERSION not found on PyPI, will publish"
            echo "publish_needed=true" >> $GITHUB_OUTPUT
          fi

      - name: Publish to PyPI
        if: steps.check-pypi.outputs.publish_needed == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}



================================================
FILE: .github/workflows/release-drafter.yml
================================================
name: Release Drafter

on:
  push:
    branches:
      - main

  # pull_request event is required only for autolabeler
  pull_request:
    # Only following types are handled by the action, but one can default to all as well
    types: [opened, reopened, synchronize]
  # pull_request_target event is required for autolabeler to support PRs from forks
  # pull_request_target:
  #   types: [opened, reopened, synchronize]

permissions:
  contents: read

jobs:
  update_release_draft:
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      # (Optional) GitHub Enterprise requires GHE_HOST variable set
      #- name: Set GHE_HOST
      #  run: |
      #    echo "GHE_HOST=${GITHUB_SERVER_URL##https:\/\/}" >> $GITHUB_ENV

      # Drafts your next Release notes as Pull Requests are merged into "master"
      - uses: release-drafter/release-drafter@v6
        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
        # with:
        #   config-name: my-config.yml
        #   disable-autolabeler: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



================================================
FILE: .github/workflows/stale.yml
================================================
name: Close Stale Issues

on:
  schedule:
    - cron: "0 10 * * *"

permissions:
  actions: write
  contents: write # only for delete-branch option
  issues: write
  pull-requests: write

jobs:
  close-stale-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Close Stale Issues
        uses: actions/stale@v9.1.0



================================================
FILE: .github/workflows/tests.yml
================================================
name: Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff
      - name: Lint with ruff
        run: |
          ruff check .
      - name: Format check with ruff
        run: |
          ruff format --check .

  unit-tests:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev,anthropic,openai,search,e2b]
      - name: Test with pytest
        run: |
          pytest tests/unit

  transport-tests:
    needs: lint
    name: "transport/${{ matrix.transport }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        transport: [stdio, sse, streamable_http]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install uv
        run: |
          pip install uv
      - name: Install dependencies
        run: |
          uv pip install --system .[dev,anthropic,openai,search,e2b]
      - name: Run integration tests for ${{ matrix.transport }} transport
        run: |
          pytest tests/integration/transports/test_${{ matrix.transport }}.py

  primitive-tests:
    needs: lint
    name: "primitive/${{ matrix.primitive }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        primitive: [sampling, tools, resources, prompts, elicitation, notifications]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install uv
        run: |
          pip install uv
      - name: Install dependencies
        run: |
          uv pip install --system .[dev,anthropic,openai,search,e2b]
      - name: Run integration tests for ${{ matrix.primitive }} primitive
        run: |
          pytest tests/integration/primitives/test_${{ matrix.primitive }}.py

  integration-tests:
    needs: lint
    name: "Integration"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install uv
        run: |
          pip install uv
      - name: Install dependencies
        run: |
          uv pip install --system .[dev,anthropic,openai,search,e2b]
      - name: Run other integration tests
        run: |
          pytest tests/integration/others/



================================================
FILE: .github/workflows/update-readme.yml
================================================
name: Update README

on:
  # On manual launch
  workflow_dispatch:
  # Scheduled interval: Use CRON format https://crontab.guru/
  schedule:
    - cron: "0 0 * * 0" # Every sunday at midnight

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  update-dependents:
    name: Update GitHub Dependents Info
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      # Git Checkout
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Install github-dependents-info
      - name: Install github-dependents-info
        run: pip install -U github-dependents-info

      # Generate dependents info
      - name: Generate GitHub Dependents Info
        run: |
          # Get dependents data in JSON format
          github-dependents-info --repo ${{ github.repository }} --sort stars --minstars 1 --json > dependents.json

          # Extract total count and stars
          TOTAL_REPOS=$(jq -r '.total_dependents_number' dependents.json)
          PUBLIC_REPOS=$(jq -r '.public_dependents_number' dependents.json)
          TOTAL_STARS=$(jq -r '[.all_public_dependent_repos[].stars] | add' dependents.json)

          # Create the dependents table using HTML for full width
          cat > dependents_table.md << 'EOF'
          <table>
            <tr>
              <th width="400">Repository</th>
              <th>Stars</th>
            </tr>
          EOF

          # Add top repositories to the table (limit to top 10) with avatars
          jq -r '.all_public_dependent_repos[:10] | .[] | "  <tr>\n    <td><img src=\"\(.img)\" width=\"20\" height=\"20\" style=\"vertical-align: middle; margin-right: 8px;\"> <a href=\"https://github.com/\(.name)\"><strong>\(.owner)/\(.repo_name)</strong></a></td>\n    <td>⭐ \(.stars)</td>\n  </tr>"' dependents.json >> dependents_table.md

          # Close the table
          echo "</table>" >> dependents_table.md

          # Update README by replacing content between tags
          awk '
          BEGIN { in_section = 0 }
          /<!-- gh-dependents-info-used-by-start -->/ {
            print $0
            print ""
            system("cat dependents_table.md")
            print ""
            in_section = 1
            next
          }
          /<!-- gh-dependents-info-used-by-end -->/ {
            in_section = 0
            print $0
            next
          }
          !in_section { print }
          ' README.md > README_updated.md

          mv README_updated.md README.md
          rm dependents_table.md dependents.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Check for changes and commit directly
      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet README.md; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update dependents info (automated)"
          title: "chore: update dependents info (automated)"
          body: "This PR updates the README with the latest dependents information."
          branch: chore/update-dependents-info-${{ github.run_id }}
          delete-branch: true


