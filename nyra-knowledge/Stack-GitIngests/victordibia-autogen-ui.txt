Directory structure:
└── victordibia-autogen-ui/
    ├── README.md
    ├── LICENSE
    ├── MANIFEST.in
    ├── package.json
    ├── pyproject.toml
    ├── setup.py
    ├── autogenui/
    │   ├── __init__.py
    │   ├── cli.py
    │   ├── flow.py
    │   ├── manager.py
    │   ├── provider.py
    │   ├── utils.py
    │   ├── version.py
    │   ├── datamodel/
    │   │   ├── __init__.py
    │   │   ├── app.py
    │   │   └── web.py
    │   └── web/
    │       ├── __init__.py
    │       ├── app.py
    │       └── ui/
    │           ├── 404.html
    │           ├── index.html
    │           ├── index.txt
    │           └── _next/
    │               └── static/
    │                   ├── chunks/
    │                   │   ├── main-app-a4d1d255e5464af8.js
    │                   │   ├── webpack-3ee5c5b04e946251.js
    │                   │   ├── app/
    │                   │   │   ├── _not-found-99cda3c0f73fe5fc.js
    │                   │   │   ├── layout-f8ed32565ca98adb.js
    │                   │   │   └── page-74a02b409493c61a.js
    │                   │   └── pages/
    │                   │       ├── _app-451d704a741dc8a8.js
    │                   │       └── _error-d6885ef27f2c5e3d.js
    │                   ├── css/
    │                   │   └── f8b9b54072e82183.css
    │                   └── Ze56HrYie2fIwKH-9UnV4/
    │                       ├── _buildManifest.js
    │                       └── _ssgManifest.js
    ├── frontend/
    │   ├── README.md
    │   ├── next.config.js
    │   ├── package.json
    │   ├── postcss.config.js
    │   ├── tailwind.config.ts
    │   ├── tsconfig.json
    │   ├── .eslintrc.json
    │   └── src/
    │       ├── app/
    │       │   ├── globals.css
    │       │   ├── layout.tsx
    │       │   ├── nav.tsx
    │       │   ├── navbar.tsx
    │       │   └── page.tsx
    │       └── components/
    │           ├── markdown.tsx
    │           ├── types.ts
    │           ├── utils.ts
    │           ├── chat/
    │           │   ├── chatinput.tsx
    │           │   ├── chatview.tsx
    │           │   ├── messagelist.tsx
    │           │   └── messagesview.tsx
    │           └── nodes/
    │               ├── agent.tsx
    │               └── chat.tsx
    └── notebooks/
        ├── default_team.json
        └── tutorial.ipynb

================================================
FILE: README.md
================================================
# AutoGen UI

![AutoGen UI Screenshot](docs/images/autogenuiscreen.png)

> [!IMPORTANT]  
> This repo has been updated to use the [AutoGen AgentChat](https://microsoft.github.io/autogen/dev/user-guide/agentchat-user-guide/quickstart.html) interface based on the new AutoGen 0.4x AgentChat api. Also, the API might change, so expect some breaking changes in the future.

The hello world for building a UI interface with AutoGen AgentChat API.

Example UI to demonstrate how to build interfaces using the [AutoGen AgentChat](https://github.com/microsoft/autogen) API. The UI is built using Next.js and web apis built using FastApi.

## What Does the App Do?

![AutoGen UI Flow Diagram](docs/images/flowdiag.png)

- [`autogenui.manager`](autogenui/manager.py) - provides a simple run method that takes a prompt and returns a response from a predefined [agent team](notebooks/default_team.json). Take a look at the [agent team](notebooks/default_team.json) json config file to see how the agents are configured. It gives a general idea on what types of agents are supported etc. Check out the [tutorial notebook](notebooks/tutorial.ipynb) for an example on how to use the provide class to load a team spec.

- [`autogenui.web.app.py`](autogenui/web/app.py) - FastApi backend that serves a simple `/generate` endpoint that takes a prompt and returns a response from a predefined [agent team](notebooks/default_team.json).

  - Creates a manager to run tasks
  - Streams results of the task run to the client ui

- [`frontend`](frontend) - Next.js frontend that provides a simple chat interface to interact with the backend.

## What's Next?

This app is clearly just a starting point. Here are some ideas on how to extend it:

- Extend the manager to support multiple team configurations from the UI
- Storing and loading interaction history in a database.
- Security - add authentication and authorization to the app

> [!TIP] Note
> [AutoGen Studio](https://github.com/microsoft/autogen/tree/main/python/packages/autogen-studio) is being rewritten on the AgentChat api to address most of the above points. Take a look at the implementation there for a more complete example.

## Getting Started

Note that you will have to setup your OPENAI_API_KEY to run the app.

```bash
export OPENAI_API_KEY=<your key>
```

Install dependencies. Python 3.9+ is required. You can install from pypi using pip.

```bash
pip install autogenui
```

or to install from source

```bash
git clone git@github.com:victordibia/autogen-ui.git
cd autogenui
pip install -e .
```

Run ui server.

Set env vars `OPENAI_API_KEY`

```bash
export OPENAI_API_KEY=<your_key>
```

```bash
autogenui # or with --port 8081
```

Open http://localhost:8081 in your browser.

To modify the source files, make changes in the frontend source files and run `npm run build` to rebuild the frontend.

## Development

To run the app in development mode, you will need to run the backend and frontend separately.

## Backend - with hot-reload

```bash
autogenui --reload
```

> [!TIP] Tip
> The UI loaded by this CLI in a pre-complied version by running the frontend build command show blow. That means if you make changes the frontend code or change the hostname or port the backend is running on the frontend updated frontend code needs to be rebuilt for it to load through this command.

## Frontend

```bash
cd frontend
```

Install dependencies

```bash
yarn install
```

Run in dev mode - with hot-reload

Set `NEXT_PUBLIC_API_SERVER` on the command line.

```bash
export NEXT_PUBLIC_API_SERVER=http://<your_backend_hostname>/api
```

Or create a `.env` file in the frontend folder with the following content.

```bash
NEXT_PUBLIC_API_SERVER=http://<your_backend_hostname>/api
```

where your_backend_hostname - is the hostname that autogenui is running on e.g. `localhost:8081`

```bash
yarn dev
```

(Re)build

Remember to install dependencies and set `NEXT_PUBLIC_API_SERVER` before building.

```bash
yarn build
```

## Roadmap

There isnt really much of a roadmap for this project. It is meant as a simple example to get started with the AutoGen AgentChat API. For a more complete example, take a look at the [AutoGen Studio](https://github.com/microsoft/autogen/tree/main/python/packages/autogen-studio) project.

## References

- [AutoGen Studio](https://arxiv.org/abs/2308.08155).

```
@inproceedings{dibia2024autogen,
  title={AutoGen Studio: A No-Code Developer Tool for Building and Debugging Multi-Agent Systems},
  author={Dibia, Victor and Chen, Jingya and Bansal, Gagan and Syed, Suff and Fourney, Adam and Zhu, Erkang and Wang, Chi and Amershi, Saleema},
  journal={EMNLP 2024},
  year={2024}
}
```

- [AutoGen](https://arxiv.org/abs/2408.15247).

```
@inproceedings{wu2023autogen,
      title={AutoGen: Enabling Next-Gen LLM Applications via Multi-Agent Conversation Framework},
      author={Qingyun Wu and Gagan Bansal and Jieyu Zhang and Yiran Wu and Shaokun Zhang and Erkang Zhu and Beibin Li and Li Jiang and Xiaoyun Zhang and Chi Wang},
      year={2023},
      eprint={2308.08155},
      archivePrefix={arXiv},
      primaryClass={cs.AI}
}
```



================================================
FILE: LICENSE
================================================
MIT License

Copyright (c) 2023 Victor Dibia

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: MANIFEST.in
================================================
recursive-include  autogenui/web/ui * 
recursive-exclude  notebooks *
recursive-exclude  frontend *
recursive-exclude  docs *
recursive-exclude  tests *


================================================
FILE: package.json
================================================
{
  "dependencies": {
    "react-markdown": "^9.0.0",
    "react-syntax-highlighter": "^15.5.0",
    "remark-gfm": "^4.0.0"
  }
}



================================================
FILE: pyproject.toml
================================================
[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "autogenui" 
authors = [
  { name="Victor Dibia", email="victor.dibia@gmail.com" },
]
description = "autogen ui: a ui interface for the autogen library "
readme = "README.md"
license = { file="LICENSE" }
requires-python = ">=3.9"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]


dependencies = [
    "pydantic",  
    "fastapi",
    "typer",
    "uvicorn", 
    "autogen-agentchat @ git+https://github.com/microsoft/autogen.git#subdirectory=python/packages/autogen-agentchat",
    "autogen-ext @ git+https://github.com/microsoft/autogen.git#subdirectory=python/packages/autogen-ext",
]
optional-dependencies = {web = ["fastapi", "uvicorn"]}

dynamic = ["version"]

[tool.setuptools]
include-package-data = true


[tool.setuptools.dynamic]
version = {attr = "autogenui.version.VERSION"}
readme = {file = ["README.md"]}

[tool.setuptools.packages.find]  
include = ["autogenui*"]  
exclude = ["*.tests*"]  
namespaces = false  

[tool.setuptools.package-data]
"autogenui" = ["*.*"]

[tool.pytest.ini_options]
filterwarnings = [
    "ignore:Deprecated call to `pkg_resources\\.declare_namespace\\('.*'\\):DeprecationWarning",
    "ignore::DeprecationWarning:google.rpc",
]


[project.urls]
"Homepage" = "https://github.com/victordibia/autogenui"
"Bug Tracker" = "https://github.com/victordibia/autogenui/issues"

[project.scripts]
autogenui = "autogenui.cli:run" 


================================================
FILE: setup.py
================================================
from setuptools import setup
setup()



================================================
FILE: autogenui/__init__.py
================================================
[Empty file]


================================================
FILE: autogenui/cli.py
================================================
from typing_extensions import Annotated
import typer
import uvicorn
import os

app = typer.Typer(invoke_without_command=True)


@app.callback()
def main(
    host: str = "127.0.0.1",
    port: int = 8081,
    workers: int = 1,
    reload: Annotated[bool, typer.Option("--reload")] = True,
    docs: bool = False,
):
    """
    Launch the Autogen UI CLI .Pass in parameters host, port, workers, and reload to override the default values.
    """

    os.environ["AUTOGENUI_API_DOCS"] = str(docs)

    uvicorn.run(
        "autogenui.web.app:app",
        host=host,
        port=port,
        workers=workers,
        reload=reload,
    )


@app.command()
def models():
    print("A list of supported providers:")


def run():
    app()


if __name__ == "__main__":
    app()



================================================
FILE: autogenui/flow.py
================================================
from dataclasses import asdict
import autogen

from typing import Union, List
import autogen
from autogenui.datamodel import AgentFlowSpec, AgentConfig


class Flow:
    """
    A class to represent a flow involving a sender and a receiver or multiple receivers.

    Attributes:
        sender (AgentConfig): The sender agent configuration.
        receiver (Union[AgentConfig, List[AgentConfig]]): The receiver agent configuration or list of configurations.
    """

    def __init__(self, sender: AgentConfig,
                 receiver: Union[AgentConfig, List[AgentConfig]]) -> None:
        """
        Constructs a Flow object with the given sender and receiver configurations.

        Args:
            sender (AgentConfig): The sender agent configuration.
            receiver (Union[AgentConfig, List[AgentConfig]]): The receiver agent configuration or list of configurations.
        """
        self.sender = self.load_agent(sender)
        self.receiver = self.load_agent(receiver)

    def load_agent(
            self, agent_spec: AgentFlowSpec) -> Union[autogen.AssistantAgent, autogen.UserProxyAgent]:
        """
        Loads the appropriate agent instance based on the given agent specification.

        Args:
            agent_spec (AgentFlowSpec): The specification of the agent to be loaded.

        Returns:
            Union[autogen.AssistantAgent, autogen.UserProxyAgent]: The appropriate instance of the agent based on the agent type.
        """
        if agent_spec.type == "assistant":
            agent = autogen.AssistantAgent(**asdict(agent_spec.config))
        if agent_spec.type == "userproxy":
            agent = autogen.UserProxyAgent(**asdict(agent_spec.config))

        return agent

    def run(self, message: str) -> None:
        """
        Initiates the chat flow by sending the given message from the sender to the receiver(s).

        Args:
            message (str): The message to be sent.
        """
        self.sender.initiate_chat(self.receiver,
                                  message=message
                                  )



================================================
FILE: autogenui/manager.py
================================================
from typing import AsyncGenerator, Union, Optional
import time
import json
from pathlib import Path
from .datamodel import TeamResult, TaskResult, TeamConfig
from autogen_agentchat.messages import AgentMessage, ChatMessage
from autogen_core.base import CancellationToken
from .provider import Provider
from .datamodel import TeamConfig


class TeamManager:
    def __init__(self) -> None:
        self.provider = Provider()

    async def load_team_config(self, config_path: Union[str, Path]) -> TeamConfig:
        """Load team configuration from JSON file"""
        if isinstance(config_path, str):
            config_path = Path(config_path)

        if not config_path.exists():
            raise FileNotFoundError(
                f"Team configuration file not found: {config_path}")

        with config_path.open() as f:
            team_json_spec = json.load(f)

        # Convert JSON spec to TeamConfig format
        if isinstance(team_json_spec, dict):
            try:
                return TeamConfig(**team_json_spec)
            except Exception as e:
                raise ValueError(f"Invalid team configuration: {str(e)}")
        raise ValueError("Team configuration must be a JSON object")

    async def run_stream(
        self,
        task: str,
        team_config: Optional[Union[TeamConfig, str, Path]] = None,
        cancellation_token: Optional[CancellationToken] = None
    ) -> AsyncGenerator[Union[AgentMessage, ChatMessage, TaskResult], None]:
        """Stream the team's execution results with optional JSON config loading"""
        start_time = time.time()

        try:
            if isinstance(team_config, (str, Path)):
                team_config = await self.load_team_config(team_config)
            elif team_config is None:
                # Load default team config if none provided
                team_config = await self.load_team_config("notebooks/default_team.json")

            # Use provider to create team from config
            team = self.provider.load_team(team_config)

            # Check if team supports streaming
            if not hasattr(team, 'run_stream'):
                raise NotImplementedError("Team does not support streaming")

            stream = team.run_stream(
                task=task,
                cancellation_token=cancellation_token
            )

            async for message in stream:
                if cancellation_token and cancellation_token.is_cancelled():
                    break

                if isinstance(message, TaskResult):
                    yield TeamResult(
                        task_result=message,
                        usage="",  # TODO: Implement token usage parsing
                        duration=time.time() - start_time
                    )
                else:
                    yield message

        except Exception as e:
            raise e

    async def run(
        self,
        task: str,
        team_config: Optional[Union[TeamConfig, str, Path]] = None,
        cancellation_token: Optional[CancellationToken] = None
    ) -> TeamResult:
        """Non-streaming run method with optional JSON config loading"""
        start_time = time.time()

        try:
            if isinstance(team_config, (str, Path)):
                team_config = await self.load_team_config(team_config)
            elif team_config is None:
                # Load default team config if none provided
                team_config = await self.load_team_config("notebooks/default_team.json")

            # Use provider to create team from config
            team = self.provider.load_team(team_config)

            result = await team.run(
                task=task,
                cancellation_token=cancellation_token
            )

            return TeamResult(
                task_result=result,
                usage="",  # TODO: Implement token usage parsing
                duration=time.time() - start_time
            )

        except Exception as e:
            raise e



================================================
FILE: autogenui/provider.py
================================================

from .datamodel import AgentConfig, ModelConfig, ToolConfig, TerminationConfig, TeamConfig
from autogen_agentchat.agents import AssistantAgent, CodingAssistantAgent
from autogen_agentchat.teams import RoundRobinGroupChat, SelectorGroupChat
from autogen_ext.models import OpenAIChatCompletionClient
from autogen_agentchat.task import MaxMessageTermination, StopMessageTermination, TextMentionTermination
from autogen_core.components.tools import FunctionTool


AgentTypes = AssistantAgent | CodingAssistantAgent
TeamTypes = RoundRobinGroupChat | SelectorGroupChat
ModelTypes = OpenAIChatCompletionClient | None
TerminationTypes = MaxMessageTermination | StopMessageTermination | TextMentionTermination


class Provider():
    def __init__(self):
        pass

    def load_model(self, model_config: ModelConfig | dict) -> ModelTypes:
        if isinstance(model_config, dict):
            try:
                model_config = ModelConfig(**model_config)
            except:
                raise ValueError("Invalid model config")
        model = None
        if model_config.model_type == "OpenAIChatCompletionClient":
            model = OpenAIChatCompletionClient(model=model_config.model)
        return model

    def _func_from_string(self, content: str) -> callable:
        """
        Convert a string containing function code into a callable function object.

        Args:
            content (str): String containing the function code, with proper indentation

        Returns:
            Callable: The compiled function object
        """
        # Create a namespace for the function
        namespace = {}

        # Ensure content is properly dedented if it contains indentation
        lines = content.split('\n')
        if len(lines) > 1:
            # Find the minimum indentation (excluding empty lines)
            indents = [len(line) - len(line.lstrip())
                       for line in lines if line.strip()]
            min_indent = min(indents) if indents else 0
            # Remove the minimum indentation from each line
            lines = [line[min_indent:]
                     if line.strip() else line for line in lines]
            content = '\n'.join(lines)

        try:
            # Execute the function definition in the namespace
            exec(content, namespace)

            # Find and return the function object
            # Get the first callable object from the namespace
            for item in namespace.values():
                if callable(item) and not isinstance(item, type):
                    return item

            raise ValueError("No function found in the provided code")
        except Exception as e:
            raise ValueError(
                f"Failed to create function from string: {str(e)}")

    def load_tool(self, tool_config: ToolConfig | dict) -> FunctionTool:
        if isinstance(tool_config, dict):
            try:
                tool_config = ToolConfig(**tool_config)
            except:
                raise ValueError("Invalid tool config")
        tool = FunctionTool(name=tool_config.name, description=tool_config.description,
                            func=self._func_from_string(tool_config.content))
        return tool

    def load_agent(self, agent_config: AgentConfig | dict) -> AgentTypes:
        if isinstance(agent_config, dict):
            try:
                agent_config = AgentConfig(**agent_config)
            except:
                raise ValueError("Invalid agent config")
        agent = None
        if agent_config.agent_type == "AssistantAgent":
            model_client = self.load_model(agent_config.model_client)
            system_message = agent_config.system_message if agent_config.system_message else "You are a helpful AI assistant. Solve tasks using your tools. Reply with 'TERMINATE' when the task has been completed."
            tools = [self.load_tool(tool) for tool in agent_config.tools]
            agent = AssistantAgent(
                name=agent_config.name, model_client=model_client, tools=tools, system_message=system_message)

        return agent

    def load_termination(self, termination_config: TerminationConfig | dict) -> TerminationTypes:
        if isinstance(termination_config, dict):
            try:
                termination_config = TerminationConfig(**termination_config)
            except:
                raise ValueError("Invalid termination config")
        termination = None
        if termination_config.termination_type == "MaxMessageTermination":
            termination = MaxMessageTermination(
                max_messages=termination_config.max_messages)
        elif termination_config.termination_type == "StopMessageTermination":
            termination = StopMessageTermination()
        elif termination_config.termination_type == "TextMentionTermination":
            termination = TextMentionTermination(text=termination_config.text)
        return termination

    def load_team(self, team_config: TeamConfig | dict) -> TeamTypes:
        if isinstance(team_config, dict):
            try:
                team_config = TeamConfig(**team_config)
            except:
                raise ValueError("Invalid team config")
        team = None
        agents = []
        termination = self.load_termination(team_config.termination_condition)
        # tbd on termination condition
        for agent_config in team_config.participants:
            agent = self.load_agent(agent_config)
            agents.append(agent)
        if team_config.team_type == "RoundRobinGroupChat":
            team = RoundRobinGroupChat(
                agents, termination_condition=termination)
        elif team_config.team_type == "SelectorGroupChat":
            team = SelectorGroupChat(agents, termination_condition=termination)

        return team



================================================
FILE: autogenui/utils.py
================================================


from typing import Dict


def parse_token_usage(logged_history: Dict):
    all_usage = []
    all_cost = 0
    all_tokens = 0
    for key in logged_history.keys():
        curr_usage = logged_history[key]["response"]
        all_cost += curr_usage["cost"]
        all_tokens += curr_usage["usage"]["total_tokens"]
        all_usage.append(curr_usage)
    usage = {
        "total_cost": all_cost,
        "total_tokens": all_tokens,
        "usage": all_usage
    }

    return usage



================================================
FILE: autogenui/version.py
================================================
VERSION = "0.0.04a"
APP_NAME = "autogenui"



================================================
FILE: autogenui/datamodel/__init__.py
================================================
from .app import *
from .web import *



================================================
FILE: autogenui/datamodel/app.py
================================================

from typing import Any, List, Literal, Optional
from pydantic import BaseModel
from pydantic.dataclasses import dataclass
from autogen_agentchat.base._task import TaskResult


@dataclass
class ModelConfig:
    model: str
    model_type: Literal["OpenAIChatCompletionClient"]


@dataclass
class ToolConfig:
    name: str
    description: str
    content: str


@dataclass
class AgentConfig:
    name: str
    agent_type: Literal["AssistantAgent", "CodingAssistantAgent"]
    system_message: Optional[str] = None
    model_client: Optional[ModelConfig] = None
    tools: Optional[List[ToolConfig]] = None
    description: Optional[str] = None


@dataclass
class TerminationConfig:
    termination_type: Literal["MaxMessageTermination",
                              "StopMessageTermination", "TextMentionTermination"]
    max_messages: Optional[int] = None
    text: Optional[str] = None


@dataclass
class TeamConfig:
    name: str
    participants: List[AgentConfig]
    team_type: Literal["RoundRobinGroupChat", "SelectorGroupChat"]
    model_client: Optional[ModelConfig] = None
    termination_condition: Optional[TerminationConfig] = None


class TeamResult(BaseModel):
    task_result: TaskResult
    usage: str
    duration: float



================================================
FILE: autogenui/datamodel/web.py
================================================
from typing import Optional
from pydantic.dataclasses import dataclass


@dataclass
class GenerateWebRequest:
    """Project data model"""

    prompt: str
    history: Optional[str] = None
    session_id: Optional[str] = None



================================================
FILE: autogenui/web/__init__.py
================================================
[Empty file]


================================================
FILE: autogenui/web/app.py
================================================
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.responses import JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Dict, Optional, List, Union
import logging
import os
import uuid
import datetime
import traceback
import asyncio
from pathlib import Path

# Import your team manager components
from autogen_agentchat import EVENT_LOGGER_NAME
from autogen_agentchat.messages import AgentMessage, ChatMessage, ToolCallMessage, ToolCallResultMessage
from autogen_core.base import CancellationToken
from ..manager import TeamManager
from ..datamodel import TeamResult, TaskResult

# Request models


class GenerateWebRequest(BaseModel):
    prompt: str
    history: Optional[str] = ""
    session_id: str


class ConnectionManager:
    def __init__(self):
        self.active_connections: Dict[str, WebSocket] = {}
        self.connection_ready: Dict[str, bool] = {}

    async def create_session(self) -> str:
        """Create a new session ID"""
        return str(uuid.uuid4())

    async def connect(self, session_id: str, websocket: WebSocket):
        """Connect a WebSocket with its session ID"""
        await websocket.accept()
        self.active_connections[session_id] = websocket
        self.connection_ready[session_id] = True
        logging.info(f"WebSocket connected for session: {session_id}")

    async def disconnect(self, session_id: str):
        """Remove a WebSocket connection"""
        if session_id in self.active_connections:
            del self.active_connections[session_id]
            self.connection_ready[session_id] = False
            logging.info(f"WebSocket disconnected for session: {session_id}")

    def get_connection(self, session_id: str) -> Optional[WebSocket]:
        """Get WebSocket connection by session ID"""
        if session_id in self.active_connections and self.connection_ready.get(session_id):
            return self.active_connections[session_id]
        return None

    async def session_exists(self, session_id: str) -> bool:
        """Check if a session exists and is ready"""
        return session_id in self.active_connections and self.connection_ready.get(session_id, False)


# Initialize FastAPI
app = FastAPI()

# CORS middleware setup
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],  # Add your frontend URL
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Create API router
api = FastAPI(root_path="/api")

# Initialize managers
connection_manager = ConnectionManager()
team_manager = TeamManager()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(EVENT_LOGGER_NAME)
logger.setLevel(logging.INFO)


@api.post("/create_session")
async def create_session() -> Dict:
    """Create a new session for the chat interaction"""
    session_id = await connection_manager.create_session()
    logger.info(f"Created new session: {session_id}")
    return {"session_id": session_id}


@api.websocket("/ws/logs/{session_id}")
async def websocket_endpoint(websocket: WebSocket, session_id: str):
    """Handle WebSocket connections for streaming"""
    await connection_manager.connect(session_id, websocket)
    try:
        while True:
            data = await websocket.receive_text()
            if data == "ping":
                await websocket.send_text("pong")
    except WebSocketDisconnect:
        await connection_manager.disconnect(session_id)
    except Exception as e:
        logger.error(f"WebSocket error for session {session_id}: {str(e)}")
        await connection_manager.disconnect(session_id)


@api.post("/generate")
async def generate(req: GenerateWebRequest):
    """Generate a streaming response using TeamManager"""
    logger.info(f"Generate request received for session: {req.session_id}")

    if not req.session_id:
        return {"status": False, "message": "Missing session_id"}

    # Add retry logic for websocket connection
    retries = 3
    websocket = None

    while retries > 0 and not websocket:
        websocket = connection_manager.get_connection(req.session_id)
        if not websocket:
            await asyncio.sleep(0.5)  # Wait a bit between retries
            retries -= 1
            logger.info(
                f"Retrying WebSocket connection, attempts left: {retries}")

    if not websocket:
        logger.error(
            f"WebSocket connection not found for session: {req.session_id}")
        return {
            "status": False,
            "message": "WebSocket connection not found or not ready"
        }

    try:
        # Start streaming response
        async for message in team_manager.run_stream(
            task=req.prompt,
            cancellation_token=None
        ):
            try:
                if isinstance(message, (AgentMessage, ChatMessage)):
                    content = message.content if hasattr(
                        message, 'content') else str(message)
                    if isinstance(message, ToolCallMessage) or isinstance(message, ToolCallResultMessage):
                        content = "".join([str(tool_call)
                                           for tool_call in message.content])
                    await websocket.send_json({
                        "type": "message",
                        "content": content,
                        "source": message.sender if hasattr(message, 'sender') else "system",
                        "timestamp": str(datetime.datetime.now())
                    })
                elif isinstance(message, TeamResult):
                    await websocket.send_json({
                        "type": "result",
                        "content": str(message.task_result.messages[-1].content) if hasattr(message.task_result, 'messages') else str(message),
                        "source": "task_result",
                        "timestamp": str(datetime.datetime.now())
                    })
            except Exception as e:
                logger.error(
                    f"Error sending message for session {req.session_id}: {str(e)}")
                raise

        # Send completion event
        await websocket.send_json({
            "type": "TerminationEvent",
            "content": "Stream completed",
            "timestamp": str(datetime.datetime.now())
        })

        return {
            "status": True,
            "data": {
                "messages": []  # Your frontend expects this
            },
            "session_id": req.session_id
        }

    except Exception as e:
        logger.error(f"Error in generate stream: {str(e)}")
        traceback.print_exc()

        try:
            # Send error event through WebSocket
            await websocket.send_json({
                "type": "ErrorEvent",
                "content": str(e),
                "timestamp": str(datetime.datetime.now())
            })
        except:
            logger.error("Failed to send error event through WebSocket")

        return {
            "status": False,
            "message": str(e),
            "session_id": req.session_id
        }

# Mount the API router
app.mount("/api", api)


@app.get("/")
async def root():
    return {"message": "API is running"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)



================================================
FILE: autogenui/web/ui/404.html
================================================
<!DOCTYPE html><html lang="en" class="h-full bg-gray-50 light"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="/_next/static/css/f8b9b54072e82183.css" crossorigin="" data-precedence="next"/><link rel="preload" as="script" fetchPriority="low" href="/_next/static/chunks/webpack-3ee5c5b04e946251.js" crossorigin=""/><script src="/_next/static/chunks/fd9d1056-2cc008b51fd7a589.js" async="" crossorigin=""></script><script src="/_next/static/chunks/472-0b1d07499111306b.js" async="" crossorigin=""></script><script src="/_next/static/chunks/main-app-a4d1d255e5464af8.js" async="" crossorigin=""></script><script src="/_next/static/chunks/300-09152972163f6571.js" async=""></script><script src="/_next/static/chunks/app/layout-f8ed32565ca98adb.js" async=""></script><title>AutoGen UI</title><meta name="description" content="AutoGen UI is a web-based interface for building AutoGen agents."/><title>404: This page could not be found.</title><script src="/_next/static/chunks/polyfills-c67a75d1b6f99dc8.js" crossorigin="" noModule=""></script></head><body class="h-full "><!--$--><nav class="bg-white shadow-sm" data-headlessui-state=""><div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8"><div class="flex h-16 justify-between"><div class="flex"><div class="flex flex-shrink-0 items-center"><svg width="32" height="32" viewBox="0 0 32 32" fill="none" class="text-gray-100" xmlns="http://www.w3.org/2000/svg"><rect width="100%" height="100%" rx="16" fill="currentColor"></rect><path fill-rule="evenodd" clip-rule="evenodd" d="M17.6482 10.1305L15.8785 7.02583L7.02979 22.5499H10.5278L17.6482 10.1305ZM19.8798 14.0457L18.11 17.1983L19.394 19.4511H16.8453L15.1056 22.5499H24.7272L19.8798 14.0457Z" fill="black"></path></svg></div><div class="hidden sm:-my-px sm:ml-6 sm:flex sm:space-x-8"><a href="/" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium">Chat</a></div></div><div class="hidden sm:ml-6 sm:flex sm:items-center"><div class="relative ml-3" data-headlessui-state=""><div><button class="flex rounded-full bg-white text-sm focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2" id="headlessui-menu-button-:Rpda:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open user menu</span><img alt="placeholder avatar" loading="lazy" width="32" height="32" decoding="async" data-nimg="1" class="h-8 w-8 rounded-full" style="color:transparent" src="https://avatar.vercel.sh/leerob"/></button></div></div></div><div class="-mr-2 flex items-center sm:hidden"><button class="inline-flex items-center justify-center rounded-md bg-white p-2 text-gray-400 hover:bg-gray-100 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2" id="headlessui-disclosure-button-:Rdda:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open main menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><!--/$--><div style="height:calc(100vh - 64px)" class="p-4 md:p-10 mx-auto max-w-7xl"><div style="font-family:system-ui,&quot;Segoe UI&quot;,Roboto,Helvetica,Arial,sans-serif,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;;height:100vh;text-align:center;display:flex;flex-direction:column;align-items:center;justify-content:center"><div><style>body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}</style><h1 class="next-error-h1" style="display:inline-block;margin:0 20px 0 0;padding:0 23px 0 0;font-size:24px;font-weight:500;vertical-align:top;line-height:49px">404</h1><div style="display:inline-block"><h2 style="font-size:14px;font-weight:400;line-height:49px;margin:0">This page could not be found.</h2></div></div></div></div><script src="/_next/static/chunks/webpack-3ee5c5b04e946251.js" crossorigin="" async=""></script><script>(self.__next_f=self.__next_f||[]).push([0]);self.__next_f.push([2,null])</script><script>self.__next_f.push([1,"1:HL[\"/_next/static/css/f8b9b54072e82183.css\",\"style\",{\"crossOrigin\":\"\"}]\n0:\"$L2\"\n"])</script><script>self.__next_f.push([1,"3:I[33728,[],\"\"]\n5:I[29928,[],\"\"]\n2:[[[\"$\",\"link\",\"0\",{\"rel\":\"stylesheet\",\"href\":\"/_next/static/css/f8b9b54072e82183.css\",\"precedence\":\"next\",\"crossOrigin\":\"\"}]],[\"$\",\"$L3\",null,{\"buildId\":\"Ze56HrYie2fIwKH-9UnV4\",\"assetPrefix\":\"\",\"initialCanonicalUrl\":\"/_not-found\",\"initialTree\":[\"\",{\"children\":[\"__PAGE__\",{}]},\"$undefined\",\"$undefined\",true],\"initialHead\":[false,\"$L4\"],\"globalErrorComponent\":\"$5\",\"children\":[null,\"$L6\",null]}]]\n"])</script><script>self.__next_f.push([1,"7:\"$Sreact.suspense\"\n9:I[56954,[],\"\"]\na:I[7264,[],\"\"]\n"])</script><script>self.__next_f.push([1,"6:[\"$\",\"html\",null,{\"lang\":\"en\",\"className\":\"h-full bg-gray-50 light\",\"children\":[\"$\",\"body\",null,{\"className\":\"h-full \",\"children\":[[\"$\",\"$7\",null,{\"children\":\"$L8\"}],[\"$\",\"div\",null,{\"style\":{\"height\":\"calc(100vh - 64px)\"},\"className\":\"p-4 md:p-10 mx-auto max-w-7xl\",\"children\":[\"$\",\"$L9\",null,{\"parallelRouterKey\":\"children\",\"segmentPath\":[\"children\"],\"loading\":\"$undefined\",\"loadingStyles\":\"$undefined\",\"hasLoading\":false,\"error\":\"$undefined\",\"errorStyles\":\"$undefined\",\"template\":[\"$\",\"$La\",null,{}],\"templateStyles\":\"$undefined\",\"notFound\":[[\"$\",\"title\",null,{\"children\":\"404: This page could not be found.\"}],[\"$\",\"div\",null,{\"style\":{\"fontFamily\":\"system-ui,\\\"Segoe UI\\\",Roboto,Helvetica,Arial,sans-serif,\\\"Apple Color Emoji\\\",\\\"Segoe UI Emoji\\\"\",\"height\":\"100vh\",\"textAlign\":\"center\",\"display\":\"flex\",\"flexDirection\":\"column\",\"alignItems\":\"center\",\"justifyContent\":\"center\"},\"children\":[\"$\",\"div\",null,{\"children\":[[\"$\",\"style\",null,{\"dangerouslySetInnerHTML\":{\"__html\":\"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}\"}}],[\"$\",\"h1\",null,{\"className\":\"next-error-h1\",\"style\":{\"display\":\"inline-block\",\"margin\":\"0 20px 0 0\",\"padding\":\"0 23px 0 0\",\"fontSize\":24,\"fontWeight\":500,\"verticalAlign\":\"top\",\"lineHeight\":\"49px\"},\"children\":\"404\"}],[\"$\",\"div\",null,{\"style\":{\"display\":\"inline-block\"},\"children\":[\"$\",\"h2\",null,{\"style\":{\"fontSize\":14,\"fontWeight\":400,\"lineHeight\":\"49px\",\"margin\":0},\"children\":\"This page could not be found.\"}]}]]}]}]],\"notFoundStyles\":[],\"childProp\":{\"current\":[\"$Lb\",[[\"$\",\"title\",null,{\"children\":\"404: This page could not be found.\"}],[\"$\",\"div\",null,{\"style\":{\"fontFamily\":\"system-ui,\\\"Segoe UI\\\",Roboto,Helvetica,Arial,sans-serif,\\\"Apple Color Emoji\\\",\\\"Segoe UI Emoji\\\"\",\"height\":\"100vh\",\"textAlign\":\"center\",\"display\":\"flex\",\"flexDirection\":\"column\",\"alignItems\":\"center\",\"justifyContent\":\"center\"},\"children\":[\"$\",\"div\",null,{\"children\":[[\"$\",\"style\",null,{\"dangerouslySetInnerHTML\":{\"__html\":\"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}\"}}],[\"$\",\"h1\",null,{\"className\":\"next-error-h1\",\"style\":{\"display\":\"inline-block\",\"margin\":\"0 20px 0 0\",\"padding\":\"0 23px 0 0\",\"fontSize\":24,\"fontWeight\":500,\"verticalAlign\":\"top\",\"lineHeight\":\"49px\"},\"children\":\"404\"}],[\"$\",\"div\",null,{\"style\":{\"display\":\"inline-block\"},\"children\":[\"$\",\"h2\",null,{\"style\":{\"fontSize\":14,\"fontWeight\":400,\"lineHeight\":\"49px\",\"margin\":0},\"children\":\"This page could not be found.\"}]}]]}]}]],null],\"segment\":\"__PAGE__\"},\"styles\":[]}]}]]}]}]\n"])</script><script>self.__next_f.push([1,"4:[[\"$\",\"meta\",\"0\",{\"charSet\":\"utf-8\"}],[\"$\",\"title\",\"1\",{\"children\":\"AutoGen UI\"}],[\"$\",\"meta\",\"2\",{\"name\":\"description\",\"content\":\"AutoGen UI is a web-based interface for building AutoGen agents.\"}],[\"$\",\"meta\",\"3\",{\"name\":\"viewport\",\"content\":\"width=device-width, initial-scale=1\"}]]\n"])</script><script>self.__next_f.push([1,"c:I[70730,[\"300\",\"static/chunks/300-09152972163f6571.js\",\"185\",\"static/chunks/app/layout-f8ed32565ca98adb.js\"],\"\"]\n8:[\"$\",\"$Lc\",null,{\"user\":\"\"}]\nb:null\n"])</script></body></html>


================================================
FILE: autogenui/web/ui/index.html
================================================
<!DOCTYPE html><html lang="en" class="h-full bg-gray-50 light"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="/_next/static/css/f8b9b54072e82183.css" crossorigin="" data-precedence="next"/><link rel="preload" as="script" fetchPriority="low" href="/_next/static/chunks/webpack-3ee5c5b04e946251.js" crossorigin=""/><script src="/_next/static/chunks/fd9d1056-2cc008b51fd7a589.js" async="" crossorigin=""></script><script src="/_next/static/chunks/472-0b1d07499111306b.js" async="" crossorigin=""></script><script src="/_next/static/chunks/main-app-a4d1d255e5464af8.js" async="" crossorigin=""></script><script src="/_next/static/chunks/300-09152972163f6571.js" async=""></script><script src="/_next/static/chunks/app/layout-f8ed32565ca98adb.js" async=""></script><script src="/_next/static/chunks/731-ec4b86e5892baa22.js" async=""></script><script src="/_next/static/chunks/app/page-74a02b409493c61a.js" async=""></script><title>AutoGen UI</title><meta name="description" content="AutoGen UI is a web-based interface for building AutoGen agents."/><link rel="icon" href="/favicon.ico" type="image/x-icon" sizes="16x16"/><script src="/_next/static/chunks/polyfills-c67a75d1b6f99dc8.js" crossorigin="" noModule=""></script></head><body class="h-full "><!--$--><nav class="bg-white shadow-sm" data-headlessui-state=""><div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8"><div class="flex h-16 justify-between"><div class="flex"><div class="flex flex-shrink-0 items-center"><svg width="32" height="32" viewBox="0 0 32 32" fill="none" class="text-gray-100" xmlns="http://www.w3.org/2000/svg"><rect width="100%" height="100%" rx="16" fill="currentColor"></rect><path fill-rule="evenodd" clip-rule="evenodd" d="M17.6482 10.1305L15.8785 7.02583L7.02979 22.5499H10.5278L17.6482 10.1305ZM19.8798 14.0457L18.11 17.1983L19.394 19.4511H16.8453L15.1056 22.5499H24.7272L19.8798 14.0457Z" fill="black"></path></svg></div><div class="hidden sm:-my-px sm:ml-6 sm:flex sm:space-x-8"><a href="/" class="border-slate-500 text-gray-900 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium" aria-current="page">Chat</a></div></div><div class="hidden sm:ml-6 sm:flex sm:items-center"><div class="relative ml-3" data-headlessui-state=""><div><button class="flex rounded-full bg-white text-sm focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2" id="headlessui-menu-button-:Rpda:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open user menu</span><img alt="placeholder avatar" loading="lazy" width="32" height="32" decoding="async" data-nimg="1" class="h-8 w-8 rounded-full" style="color:transparent" src="https://avatar.vercel.sh/leerob"/></button></div></div></div><div class="-mr-2 flex items-center sm:hidden"><button class="inline-flex items-center justify-center rounded-md bg-white p-2 text-gray-400 hover:bg-gray-100 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2" id="headlessui-disclosure-button-:Rdda:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open main menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><!--/$--><div style="height:calc(100vh - 64px)" class="p-4 md:p-10 mx-auto max-w-7xl"><main class=" h-full"><div class="p-2 border mb-2 text-xs rounded text-secondary"> <!-- -->Sample app to show streaming logs in<!-- --> <a href="https://github.com/microsoft/autogen/tree/main/python/packages/autogen-agentchat" class="text-primary font-semibold">AutoGen AgentChat</a> <!-- -->to a UI</div><div style="height:calc(100% - 20px)" class="text-primary overflow-auto bg-primary relative scroll rounded flex-1"><div style="height:calc(100% - 100px)" class="flex overflow-auto flex-col rounded scroll pr-2"><div class="flex-1   mt-4"></div><div class="ml-2"></div><div class="ml-2 h-6 mb-4 mt-2"></div></div><div class="mt-2 p-2 w-full"><div class="mt-2 rounded p-2 shadow-lg flex mb-1 "><form class="flex-1"><input id="queryInput" class="w-full text-gray-600 rounded rounded-r-none border border-accent bg-white p-2" placeholder="Type your message here..." name="queryInput"/></form><div role="button" class="bg-accent hover:brightness-75 transition duration-300 rounded pt-2 rounded-l-none px-5"><div class="inline-block"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 text-white inline-block"><path stroke-linecap="round" stroke-linejoin="round" d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5"></path></svg></div></div></div></div></div></main></div><script src="/_next/static/chunks/webpack-3ee5c5b04e946251.js" crossorigin="" async=""></script><script>(self.__next_f=self.__next_f||[]).push([0]);self.__next_f.push([2,null])</script><script>self.__next_f.push([1,"1:HL[\"/_next/static/css/f8b9b54072e82183.css\",\"style\",{\"crossOrigin\":\"\"}]\n0:\"$L2\"\n"])</script><script>self.__next_f.push([1,"3:I[33728,[],\"\"]\n5:I[29928,[],\"\"]\n2:[[[\"$\",\"link\",\"0\",{\"rel\":\"stylesheet\",\"href\":\"/_next/static/css/f8b9b54072e82183.css\",\"precedence\":\"next\",\"crossOrigin\":\"\"}]],[\"$\",\"$L3\",null,{\"buildId\":\"Ze56HrYie2fIwKH-9UnV4\",\"assetPrefix\":\"\",\"initialCanonicalUrl\":\"/\",\"initialTree\":[\"\",{\"children\":[\"__PAGE__\",{}]},\"$undefined\",\"$undefined\",true],\"initialHead\":[false,\"$L4\"],\"globalErrorComponent\":\"$5\",\"children\":[null,\"$L6\",null]}]]\n"])</script><script>self.__next_f.push([1,"7:\"$Sreact.suspense\"\n9:I[56954,[],\"\"]\na:I[7264,[],\"\"]\n"])</script><script>self.__next_f.push([1,"6:[\"$\",\"html\",null,{\"lang\":\"en\",\"className\":\"h-full bg-gray-50 light\",\"children\":[\"$\",\"body\",null,{\"className\":\"h-full \",\"children\":[[\"$\",\"$7\",null,{\"children\":\"$L8\"}],[\"$\",\"div\",null,{\"style\":{\"height\":\"calc(100vh - 64px)\"},\"className\":\"p-4 md:p-10 mx-auto max-w-7xl\",\"children\":[\"$\",\"$L9\",null,{\"parallelRouterKey\":\"children\",\"segmentPath\":[\"children\"],\"loading\":\"$undefined\",\"loadingStyles\":\"$undefined\",\"hasLoading\":false,\"error\":\"$undefined\",\"errorStyles\":\"$undefined\",\"template\":[\"$\",\"$La\",null,{}],\"templateStyles\":\"$undefined\",\"notFound\":[[\"$\",\"title\",null,{\"children\":\"404: This page could not be found.\"}],[\"$\",\"div\",null,{\"style\":{\"fontFamily\":\"system-ui,\\\"Segoe UI\\\",Roboto,Helvetica,Arial,sans-serif,\\\"Apple Color Emoji\\\",\\\"Segoe UI Emoji\\\"\",\"height\":\"100vh\",\"textAlign\":\"center\",\"display\":\"flex\",\"flexDirection\":\"column\",\"alignItems\":\"center\",\"justifyContent\":\"center\"},\"children\":[\"$\",\"div\",null,{\"children\":[[\"$\",\"style\",null,{\"dangerouslySetInnerHTML\":{\"__html\":\"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}\"}}],[\"$\",\"h1\",null,{\"className\":\"next-error-h1\",\"style\":{\"display\":\"inline-block\",\"margin\":\"0 20px 0 0\",\"padding\":\"0 23px 0 0\",\"fontSize\":24,\"fontWeight\":500,\"verticalAlign\":\"top\",\"lineHeight\":\"49px\"},\"children\":\"404\"}],[\"$\",\"div\",null,{\"style\":{\"display\":\"inline-block\"},\"children\":[\"$\",\"h2\",null,{\"style\":{\"fontSize\":14,\"fontWeight\":400,\"lineHeight\":\"49px\",\"margin\":0},\"children\":\"This page could not be found.\"}]}]]}]}]],\"notFoundStyles\":[],\"childProp\":{\"current\":[\"$Lb\",\"$Lc\",null],\"segment\":\"__PAGE__\"},\"styles\":[]}]}]]}]}]\n"])</script><script>self.__next_f.push([1,"4:[[\"$\",\"meta\",\"0\",{\"charSet\":\"utf-8\"}],[\"$\",\"title\",\"1\",{\"children\":\"AutoGen UI\"}],[\"$\",\"meta\",\"2\",{\"name\":\"description\",\"content\":\"AutoGen UI is a web-based interface for building AutoGen agents.\"}],[\"$\",\"meta\",\"3\",{\"name\":\"viewport\",\"content\":\"width=device-width, initial-scale=1\"}],[\"$\",\"link\",\"4\",{\"rel\":\"icon\",\"href\":\"/favicon.ico\",\"type\":\"image/x-icon\",\"sizes\":\"16x16\"}]]\n"])</script><script>self.__next_f.push([1,"d:I[70730,[\"300\",\"static/chunks/300-09152972163f6571.js\",\"185\",\"static/chunks/app/layout-f8ed32565ca98adb.js\"],\"\"]\ne:I[76222,[\"731\",\"static/chunks/731-ec4b86e5892baa22.js\",\"931\",\"static/chunks/app/page-74a02b409493c61a.js\"],\"\"]\n8:[\"$\",\"$Ld\",null,{\"user\":\"\"}]\nc:[\"$\",\"main\",null,{\"className\":\" h-full\",\"children\":[[\"$\",\"div\",null,{\"className\":\"p-2 border mb-2 text-xs rounded text-secondary\",\"children\":[\" \",\"Sample app to show streaming logs in\",\" \",[\"$\",\"a\",null,{\"href\":\"https://github.com/microsoft/autogen/tr"])</script><script>self.__next_f.push([1,"ee/main/python/packages/autogen-agentchat\",\"className\":\"text-primary font-semibold\",\"children\":\"AutoGen AgentChat\"}],\" \",\"to a UI\"]}],[\"$\",\"$Le\",null,{\"initMessages\":[]}]]}]\nb:null\n"])</script></body></html>


================================================
FILE: autogenui/web/ui/index.txt
================================================
1:HL["/_next/static/css/f8b9b54072e82183.css","style",{"crossOrigin":""}]
0:["Ze56HrYie2fIwKH-9UnV4",[[["",{"children":["__PAGE__",{}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f8b9b54072e82183.css","precedence":"next","crossOrigin":""}]],"$L3"]]]]
2:[null,"$L4",null]
3:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"AutoGen UI"}],["$","meta","2",{"name":"description","content":"AutoGen UI is a web-based interface for building AutoGen agents."}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
5:"$Sreact.suspense"
7:I[56954,[],""]
8:I[7264,[],""]
4:["$","html",null,{"lang":"en","className":"h-full bg-gray-50 light","children":["$","body",null,{"className":"h-full ","children":[["$","$5",null,{"children":"$L6"}],["$","div",null,{"style":{"height":"calc(100vh - 64px)"},"className":"p-4 md:p-10 mx-auto max-w-7xl","children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$L9","$La",null],"segment":"__PAGE__"},"styles":[]}]}]]}]}]
b:I[70730,["300","static/chunks/300-09152972163f6571.js","185","static/chunks/app/layout-f8ed32565ca98adb.js"],""]
c:I[76222,["731","static/chunks/731-ec4b86e5892baa22.js","931","static/chunks/app/page-74a02b409493c61a.js"],""]
6:["$","$Lb",null,{"user":""}]
a:["$","main",null,{"className":" h-full","children":[["$","div",null,{"className":"p-2 border mb-2 text-xs rounded text-secondary","children":[" ","Sample app to show streaming logs in"," ",["$","a",null,{"href":"https://github.com/microsoft/autogen/tree/main/python/packages/autogen-agentchat","className":"text-primary font-semibold","children":"AutoGen AgentChat"}]," ","to a UI"]}],["$","$Lc",null,{"initMessages":[]}]]}]
9:null



================================================
FILE: autogenui/web/ui/_next/static/chunks/main-app-a4d1d255e5464af8.js
================================================
(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[744],{36164:function(e,n,_){Promise.resolve().then(_.t.bind(_,33728,23)),Promise.resolve().then(_.t.bind(_,29928,23)),Promise.resolve().then(_.t.bind(_,56954,23)),Promise.resolve().then(_.t.bind(_,3170,23)),Promise.resolve().then(_.t.bind(_,7264,23)),Promise.resolve().then(_.t.bind(_,48297,23))}},function(e){var __webpack_exec__=function(n){return e(e.s=n)};e.O(0,[971,472],function(){return __webpack_exec__(62019),__webpack_exec__(36164)}),_N_E=e.O()}]);


================================================
FILE: autogenui/web/ui/_next/static/chunks/webpack-3ee5c5b04e946251.js
================================================
!function(){"use strict";var e,r,_,t,n,u,i,o,c,a={},p={};function __webpack_require__(e){var r=p[e];if(void 0!==r)return r.exports;var _=p[e]={exports:{}},t=!0;try{a[e](_,_.exports,__webpack_require__),t=!1}finally{t&&delete p[e]}return _.exports}__webpack_require__.m=a,e=[],__webpack_require__.O=function(r,_,t,n){if(_){n=n||0;for(var u=e.length;u>0&&e[u-1][2]>n;u--)e[u]=e[u-1];e[u]=[_,t,n];return}for(var i=1/0,u=0;u<e.length;u++){for(var _=e[u][0],t=e[u][1],n=e[u][2],o=!0,c=0;c<_.length;c++)i>=n&&Object.keys(__webpack_require__.O).every(function(e){return __webpack_require__.O[e](_[c])})?_.splice(c--,1):(o=!1,n<i&&(i=n));if(o){e.splice(u--,1);var a=t()}}return a},__webpack_require__.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return __webpack_require__.d(r,{a:r}),r},_=Object.getPrototypeOf?function(e){return Object.getPrototypeOf(e)}:function(e){return e.__proto__},__webpack_require__.t=function(e,t){if(1&t&&(e=this(e)),8&t||"object"==typeof e&&e&&(4&t&&e.__esModule||16&t&&"function"==typeof e.then))return e;var n=Object.create(null);__webpack_require__.r(n);var u={};r=r||[null,_({}),_([]),_(_)];for(var i=2&t&&e;"object"==typeof i&&!~r.indexOf(i);i=_(i))Object.getOwnPropertyNames(i).forEach(function(r){u[r]=function(){return e[r]}});return u.default=function(){return e},__webpack_require__.d(n,u),n},__webpack_require__.d=function(e,r){for(var _ in r)__webpack_require__.o(r,_)&&!__webpack_require__.o(e,_)&&Object.defineProperty(e,_,{enumerable:!0,get:r[_]})},__webpack_require__.f={},__webpack_require__.e=function(e){return Promise.all(Object.keys(__webpack_require__.f).reduce(function(r,_){return __webpack_require__.f[_](e,r),r},[]))},__webpack_require__.u=function(e){},__webpack_require__.miniCssF=function(e){return"static/css/f8b9b54072e82183.css"},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||Function("return this")()}catch(e){if("object"==typeof window)return window}}(),__webpack_require__.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t={},n="_N_E:",__webpack_require__.l=function(e,r,_,u){if(t[e]){t[e].push(r);return}if(void 0!==_)for(var i,o,c=document.getElementsByTagName("script"),a=0;a<c.length;a++){var p=c[a];if(p.getAttribute("src")==e||p.getAttribute("data-webpack")==n+_){i=p;break}}i||(o=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,__webpack_require__.nc&&i.setAttribute("nonce",__webpack_require__.nc),i.setAttribute("data-webpack",n+_),i.src=__webpack_require__.tu(e)),t[e]=[r];var onScriptComplete=function(r,_){i.onerror=i.onload=null,clearTimeout(f);var n=t[e];if(delete t[e],i.parentNode&&i.parentNode.removeChild(i),n&&n.forEach(function(e){return e(_)}),r)return r(_)},f=setTimeout(onScriptComplete.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=onScriptComplete.bind(null,i.onerror),i.onload=onScriptComplete.bind(null,i.onload),o&&document.head.appendChild(i)},__webpack_require__.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},__webpack_require__.tt=function(){return void 0===u&&(u={createScriptURL:function(e){return e}},"undefined"!=typeof trustedTypes&&trustedTypes.createPolicy&&(u=trustedTypes.createPolicy("nextjs#bundler",u))),u},__webpack_require__.tu=function(e){return __webpack_require__.tt().createScriptURL(e)},__webpack_require__.p="/_next/",i={272:0},__webpack_require__.f.j=function(e,r){var _=__webpack_require__.o(i,e)?i[e]:void 0;if(0!==_){if(_)r.push(_[2]);else if(272!=e){var t=new Promise(function(r,t){_=i[e]=[r,t]});r.push(_[2]=t);var n=__webpack_require__.p+__webpack_require__.u(e),u=Error();__webpack_require__.l(n,function(r){if(__webpack_require__.o(i,e)&&(0!==(_=i[e])&&(i[e]=void 0),_)){var t=r&&("load"===r.type?"missing":r.type),n=r&&r.target&&r.target.src;u.message="Loading chunk "+e+" failed.\n("+t+": "+n+")",u.name="ChunkLoadError",u.type=t,u.request=n,_[1](u)}},"chunk-"+e,e)}else i[e]=0}},__webpack_require__.O.j=function(e){return 0===i[e]},o=function(e,r){var _,t,n=r[0],u=r[1],o=r[2],c=0;if(n.some(function(e){return 0!==i[e]})){for(_ in u)__webpack_require__.o(u,_)&&(__webpack_require__.m[_]=u[_]);if(o)var a=o(__webpack_require__)}for(e&&e(r);c<n.length;c++)t=n[c],__webpack_require__.o(i,t)&&i[t]&&i[t][0](),i[t]=0;return __webpack_require__.O(a)},(c=self.webpackChunk_N_E=self.webpackChunk_N_E||[]).forEach(o.bind(null,0)),c.push=o.bind(null,c.push.bind(c))}();


================================================
FILE: autogenui/web/ui/_next/static/chunks/app/_not-found-99cda3c0f73fe5fc.js
================================================
(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[165],{83155:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/_not-found",function(){return n(31038)}])},31038:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return NotFound}});let l=n(21024),o=l._(n(2265)),r={error:{fontFamily:'system-ui,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji"',height:"100vh",textAlign:"center",display:"flex",flexDirection:"column",alignItems:"center",justifyContent:"center"},desc:{display:"inline-block"},h1:{display:"inline-block",margin:"0 20px 0 0",padding:"0 23px 0 0",fontSize:24,fontWeight:500,verticalAlign:"top",lineHeight:"49px"},h2:{fontSize:14,fontWeight:400,lineHeight:"49px",margin:0}};function NotFound(){return o.default.createElement(o.default.Fragment,null,o.default.createElement("title",null,"404: This page could not be found."),o.default.createElement("div",{style:r.error},o.default.createElement("div",null,o.default.createElement("style",{dangerouslySetInnerHTML:{__html:"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}),o.default.createElement("h1",{className:"next-error-h1",style:r.h1},"404"),o.default.createElement("div",{style:r.desc},o.default.createElement("h2",{style:r.h2},"This page could not be found.")))))}("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)}},function(e){e.O(0,[971,472,744],function(){return e(e.s=83155)}),_N_E=e.O()}]);


================================================
FILE: autogenui/web/ui/_next/static/chunks/app/layout-f8ed32565ca98adb.js
================================================
(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[185],{73853:function(e,s,a){Promise.resolve().then(a.t.bind(a,92489,23)),Promise.resolve().then(a.bind(a,70730))},70730:function(e,s,a){"use strict";a.r(s),a.d(s,{default:function(){return Navbar}});var t=a(57437),r=a(2265),n=a(24033),l=a(18743),i=a(5327),c=a(993),o=a(96689),m=a(19874),d=a(16691),h=a.n(d);let x=[{name:"Chat",href:"/"}];function classNames(){for(var e=arguments.length,s=Array(e),a=0;a<e;a++)s[a]=arguments[a];return s.filter(Boolean).join(" ")}function signIn(e){console.log("sign in")}function signOut(){console.log("sign out")}function Navbar(e){let{user:s}=e,a=(0,n.usePathname)();return(0,t.jsx)(l.p,{as:"nav",className:"bg-white shadow-sm",children:e=>{let{open:n}=e;return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("div",{className:"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8",children:(0,t.jsxs)("div",{className:"flex h-16 justify-between",children:[(0,t.jsxs)("div",{className:"flex",children:[(0,t.jsx)("div",{className:"flex flex-shrink-0 items-center",children:(0,t.jsxs)("svg",{width:"32",height:"32",viewBox:"0 0 32 32",fill:"none",className:"text-gray-100",xmlns:"http://www.w3.org/2000/svg",children:[(0,t.jsx)("rect",{width:"100%",height:"100%",rx:"16",fill:"currentColor"}),(0,t.jsx)("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M17.6482 10.1305L15.8785 7.02583L7.02979 22.5499H10.5278L17.6482 10.1305ZM19.8798 14.0457L18.11 17.1983L19.394 19.4511H16.8453L15.1056 22.5499H24.7272L19.8798 14.0457Z",fill:"black"})]})}),(0,t.jsx)("div",{className:"hidden sm:-my-px sm:ml-6 sm:flex sm:space-x-8",children:x.map(e=>(0,t.jsx)("a",{href:e.href,className:classNames(a===e.href?"border-slate-500 text-gray-900":"border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300","inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium"),"aria-current":a===e.href?"page":void 0,children:e.name},e.name))})]}),(0,t.jsx)("div",{className:"hidden sm:ml-6 sm:flex sm:items-center",children:(0,t.jsxs)(i.v,{as:"div",className:"relative ml-3",children:[(0,t.jsx)("div",{children:(0,t.jsxs)(i.v.Button,{className:"flex rounded-full bg-white text-sm focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2",children:[(0,t.jsx)("span",{className:"sr-only",children:"Open user menu"}),(0,t.jsx)(h(),{className:"h-8 w-8 rounded-full",src:(null==s?void 0:s.image)||"https://avatar.vercel.sh/leerob",height:32,width:32,alt:"".concat((null==s?void 0:s.name)||"placeholder"," avatar")})]})}),(0,t.jsx)(c.u,{as:r.Fragment,enter:"transition ease-out duration-200",enterFrom:"transform opacity-0 scale-95",enterTo:"transform opacity-100 scale-100",leave:"transition ease-in duration-75",leaveFrom:"transform opacity-100 scale-100",leaveTo:"transform opacity-0 scale-95",children:(0,t.jsx)(i.v.Items,{className:"absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none",children:s?(0,t.jsx)(i.v.Item,{children:e=>{let{active:s}=e;return(0,t.jsx)("button",{className:classNames(s?"bg-gray-100":"","flex w-full px-4 py-2 text-sm text-gray-700"),onClick:()=>signOut(),children:"Sign out"})}}):(0,t.jsx)(i.v.Item,{children:e=>{let{active:s}=e;return(0,t.jsx)("button",{className:classNames(s?"bg-gray-100":"","flex w-full px-4 py-2 text-sm text-gray-700"),onClick:()=>signIn("github"),children:"Sign in"})}})})})]})}),(0,t.jsx)("div",{className:"-mr-2 flex items-center sm:hidden",children:(0,t.jsxs)(l.p.Button,{className:"inline-flex items-center justify-center rounded-md bg-white p-2 text-gray-400 hover:bg-gray-100 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2",children:[(0,t.jsx)("span",{className:"sr-only",children:"Open main menu"}),n?(0,t.jsx)(o.Z,{className:"block h-6 w-6","aria-hidden":"true"}):(0,t.jsx)(m.Z,{className:"block h-6 w-6","aria-hidden":"true"})]})})]})}),(0,t.jsxs)(l.p.Panel,{className:"sm:hidden",children:[(0,t.jsx)("div",{className:"space-y-1 pt-2 pb-3",children:x.map(e=>(0,t.jsx)(l.p.Button,{as:"a",href:e.href,className:classNames(a===e.href?"bg-slate-50 border-slate-500 text-slate-700":"border-transparent text-gray-600 hover:bg-gray-50 hover:border-gray-300 hover:text-gray-800","block pl-3 pr-4 py-2 border-l-4 text-base font-medium"),"aria-current":a===e.href?"page":void 0,children:e.name},e.name))}),(0,t.jsx)("div",{className:"border-t border-gray-200 pt-4 pb-3",children:s?(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)("div",{className:"flex items-center px-4",children:[(0,t.jsx)("div",{className:"flex-shrink-0",children:(0,t.jsx)(h(),{className:"h-8 w-8 rounded-full",src:s.image,height:32,width:32,alt:"".concat(s.name," avatar")})}),(0,t.jsxs)("div",{className:"ml-3",children:[(0,t.jsx)("div",{className:"text-base font-medium text-gray-800",children:s.name}),(0,t.jsx)("div",{className:"text-sm font-medium text-gray-500",children:s.email})]})]}),(0,t.jsx)("div",{className:"mt-3 space-y-1",children:(0,t.jsx)("button",{onClick:()=>signOut(),className:"block px-4 py-2 text-base font-medium text-gray-500 hover:bg-gray-100 hover:text-gray-800",children:"Sign out"})})]}):(0,t.jsx)("div",{className:"mt-3 space-y-1",children:(0,t.jsx)("button",{onClick:()=>signIn("github"),className:"flex w-full px-4 py-2 text-base font-medium text-gray-500 hover:bg-gray-100 hover:text-gray-800",children:"Sign in"})})})]})]})}})}},92489:function(){}},function(e){e.O(0,[300,971,472,744],function(){return e(e.s=73853)}),_N_E=e.O()}]);


================================================
FILE: autogenui/web/ui/_next/static/chunks/app/page-74a02b409493c61a.js
================================================
(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[931],{38494:function(e,s,t){Promise.resolve().then(t.bind(t,76222))},76222:function(e,s,t){"use strict";t.r(s),t.d(s,{default:function(){return ChatView}});var n=t(57437),r=t(2265),a=t(33116),l=t(17933),o=t(31706),c=t(51809),i=t(33316),d=t(98809),u=t(43241),m=t(78583),h=t(21037);function MarkdownView(e){var s;let{data:t}=e;return(0,n.jsx)("div",{className:"   w-full chatbox prose dark:prose-invert text-primary rounded p-2 ",children:(0,n.jsx)(u.U,{remarkPlugins:[d.Z],components:{code(e){let{node:s,inline:t,className:r,children:a,...l}=e,o=/language-(\w+)/.exec(r||""),c=o?o[1]:"text";return!t&&o?(0,n.jsx)(h.Z,{...l,style:m.Z,language:c,className:"rounded",PreTag:"div",wrapLongLines:!0,children:String(a).replace(/\n$/,"")}):(0,n.jsx)("code",{...l,className:r,children:a})}},children:null==(s=(s=t).replace(/\n/g,"  \n"))?void 0:s.replace(/```markdown\s+([\s\S]*?)\s+```/g,(e,s)=>s)})})}function MessageList(e){let{messages:s,sessionLogs:t,onRetry:a,loading:d}=e,u=r.useRef(null);r.useEffect(()=>{scrollToBottom()},[s,t]);let scrollToBottom=()=>{var e;null===(e=u.current)||void 0===e||e.scroll({top:u.current.scrollHeight,behavior:"smooth"})},renderLogs=e=>{let s=t[e]||[];return s.map((s,t)=>{let r=t%2==0;return(0,n.jsxs)("div",{className:"text-sm border rounded p-2 mb-2 ".concat(r?"bg-primary":"bg-secondary"),children:[(0,n.jsxs)("div",{className:"flex justify-between items-center text-xs text-gray-500 mb-1",children:[(0,n.jsxs)("div",{children:[(0,n.jsx)("span",{className:"font-semibold",children:s.type}),s.source&&(0,n.jsxs)("span",{className:"text-accent ml-2",children:["[",s.source,"]"]})]}),(0,n.jsx)("div",{children:new Date(s.timestamp).toLocaleTimeString()})]}),(0,n.jsx)("div",{className:"mt-1",children:(0,n.jsx)(MarkdownView,{data:s.content})})]},"log-".concat(e,"-").concat(t))})};return(0,n.jsxs)("div",{ref:u,style:{height:"calc(100% - 100px)"},className:"flex overflow-auto flex-col rounded scroll pr-2",children:[(0,n.jsx)("div",{className:"flex-1   mt-4"}),(0,n.jsx)("div",{className:"ml-2",children:s.map((e,s)=>{let r="user"===e.sender;return(0,n.jsx)("div",{className:"align-right ".concat(r?"text-right":"mb-2 border-b pb-2"),children:(0,n.jsxs)("div",{className:"".concat(r?"":"w-full"," inline-flex gap-2"),children:[(0,n.jsx)("div",{children:!r&&(0,n.jsx)("span",{className:"inline-block text-accent bg-primary pb-2 ml-1",children:(0,n.jsx)(l.Z,{className:"inline-block h-6"})})}),(0,n.jsx)("div",{className:"inline-block ".concat(r?"":"w-full"," p-2 rounded"),children:r?(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("div",{className:"".concat(r?"bg-accent text-white":"bg-light"," p-2 rounded"),children:e.text}),(0,n.jsxs)("span",{role:"button",onClick:()=>a(e.text),className:"mt-1 text-sm inline-block",children:[(0,n.jsx)(o.Z,{className:"h-4 w-4 mr-1 inline-block"}),"Retry"]})]}):(0,n.jsxs)(n.Fragment,{children:[e.finalResponse&&(0,n.jsx)("div",{className:"mb-4",children:(0,n.jsx)(MarkdownView,{data:e.finalResponse})}),e.sessionId&&t[e.sessionId]&&(0,n.jsx)(i.Z,{defaultActiveKey:"processing"===e.status?["1"]:[],size:"small",className:"text-xs mt-2",items:[{key:"1",label:(0,n.jsx)("div",{children:(0,n.jsx)("span",{className:"pr-2",children:"processing"===e.status?"Processing...":"View Processing Steps"})}),children:(0,n.jsx)("div",{children:renderLogs(e.sessionId)})}]})]})}),r&&(0,n.jsx)(c.Z,{className:"inline-block h-6"})]})},"message-".concat(s))})}),(0,n.jsx)("div",{className:"ml-2 h-6 mb-4 mt-2",children:d&&(0,n.jsxs)("div",{className:"inline-flex gap-2",children:[(0,n.jsx)("span",{className:"rounded-full bg-accent h-2 w-2 inline-block"}),(0,n.jsx)("span",{className:"animate-bounce rounded-full bg-accent h-3 w-3 inline-block"}),(0,n.jsx)("span",{className:"rounded-full bg-accent h-2 w-2 inline-block"})]})})]})}var p=t(55856),x=t(85290),g=t(10887);function ChatInput(e){let{onSubmit:s,loading:t,error:a}=e,l=r.useRef(null),[o,c]=r.useState(t);r.useEffect(()=>{!o||t||a||resetInput(),c(t)},[t,a,o]);let resetInput=()=>{l.current&&(l.current.value="")},handleSubmit=()=>{var e;if((null===(e=l.current)||void 0===e?void 0:e.value)&&!t){let e=l.current.value;s(e)}};return(0,n.jsxs)("div",{className:"mt-2 p-2 w-full",children:[(0,n.jsxs)("div",{className:"mt-2 rounded p-2 shadow-lg flex mb-1 ".concat(t?"opacity-50 pointer-events-none":""),children:[(0,n.jsx)("form",{className:"flex-1",onSubmit:e=>{e.preventDefault(),handleSubmit()},children:(0,n.jsx)("input",{id:"queryInput",name:"queryInput",onKeyDown:e=>{"Enter"===e.key&&handleSubmit()},ref:l,className:"w-full text-gray-600 rounded rounded-r-none border border-accent bg-white p-2",placeholder:"Type your message here...",disabled:t})}),(0,n.jsx)("div",{role:"button",onClick:handleSubmit,className:"bg-accent hover:brightness-75 transition duration-300 rounded pt-2 rounded-l-none px-5",children:t?(0,n.jsx)("div",{className:"inline-block",children:(0,n.jsx)(x.Z,{className:"relative -pb-2 text-white animate-spin inline-flex rounded-full h-6 w-6"})}):(0,n.jsx)("div",{className:"inline-block",children:(0,n.jsx)(p.Z,{className:"h-6 text-white inline-block"})})})]}),a&&!a.status&&(0,n.jsxs)("div",{className:"p-2 border rounded mt-4 text-orange-500 text-sm",children:[(0,n.jsx)(g.Z,{className:"h-5 text-orange-500 inline-block mr-2"}),a.message]})]})}function ChatView(e){let{initMessages:s,viewHeight:t="100%"}=e,l="http://localhost:8081/api",[o,c]=r.useState(!1),[i,d]=r.useState({status:!0,message:"All good"}),[u,m]=r.useState([]),[h,p]=r.useState(null),[x,g]=r.useState({}),[b,f]=r.useState({}),getBaseUrl=e=>{try{return e.replace(/(^\w+:|^)\/\//,"").replace("/api","").replace(/\/$/,"")}catch(e){throw console.error("Error processing server URL:",e),Error("Invalid server URL configuration")}};r.useEffect(()=>{m(s)},[s]),r.useEffect(()=>()=>{Object.values(b).forEach(e=>e.close())},[b]);let connectWebSocket=async e=>{let s=getBaseUrl(l),t="ws://".concat(s,"/api/ws/logs/").concat(e),n=new WebSocket(t);return n.onopen=()=>{f(s=>({...s,[e]:n}))},n.onmessage=s=>{let t=JSON.parse(s.data);g(s=>({...s,[e]:[...s[e]||[],t]})),"GroupChatPublishEvent"===t.type&&m(s=>s.map(s=>s.sessionId===e&&"bot"===s.sender?{...s,text:t.content}:s)),"TerminationEvent"===t.type&&(n.close(),f(s=>{let t={...s};return delete t[e],t}))},n.onclose=()=>{f(s=>{let t={...s};return delete t[e],t})},n.onerror=s=>{console.error("WebSocket error:",s),a.ZP.error("WebSocket connection error"),n.close(),f(s=>{let t={...s};return delete t[e],t})},n},createSession=async()=>{let e=await fetch("".concat(l,"/create_session"),{method:"POST",headers:{"Content-Type":"application/json"}});if(!e.ok)throw Error("Failed to create session");let s=await e.json();return s.session_id},chatHistory=e=>{let s="";return e.forEach(e=>{s+="".concat(e.sender,": ").concat(e.text,"\n")}),s},getLastMessage=function(e){let s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5;for(let t=e.length-1;t>=0;t--){let n=e[t].content;if(n.length>s)return n}return null},getCompletion=async e=>{d(null),c(!0);let s=null;try{s=await createSession(),p(s),await connectWebSocket(s);let t={text:e,sender:"user",sessionId:s},n={text:"",sender:"bot",sessionId:s,status:"processing"};m(e=>[...e,t,n]);let r="".concat(l,"/generate"),o=await fetch(r,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({prompt:e,history:chatHistory(u),session_id:s})});if(!o.ok)throw Error("Generate request failed");let c=await o.json();if(c.status){let e=getLastMessage(c.data.messages);m(t=>t.map(t=>t.sessionId===s&&"bot"===t.sender?{...t,finalResponse:e,status:"complete"}:t))}else a.ZP.error(c.message)}catch(e){console.error("Error:",e),a.ZP.error("Error during request processing"),s&&b[s]&&b[s].close(),d({status:!1,message:e instanceof Error?e.message:"Unknown error occurred"})}finally{c(!1)}};return(0,n.jsxs)("div",{style:{height:"calc(100% - 20px)"},className:"text-primary overflow-auto bg-primary relative scroll rounded flex-1",children:[(0,n.jsx)(MessageList,{messages:u,sessionLogs:x,onRetry:getCompletion,loading:o}),(0,n.jsx)(ChatInput,{onSubmit:getCompletion,loading:o,error:i})]})}}},function(e){e.O(0,[731,971,472,744],function(){return e(e.s=38494)}),_N_E=e.O()}]);


================================================
FILE: autogenui/web/ui/_next/static/chunks/pages/_app-451d704a741dc8a8.js
================================================
(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[888],{41597:function(_,n,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/_app",function(){return e(28955)}])}},function(_){var __webpack_exec__=function(n){return _(_.s=n)};_.O(0,[774,179],function(){return __webpack_exec__(41597),__webpack_exec__(24751)}),_N_E=_.O()}]);


================================================
FILE: autogenui/web/ui/_next/static/chunks/pages/_error-d6885ef27f2c5e3d.js
================================================
(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[820],{81981:function(n,_,u){(window.__NEXT_P=window.__NEXT_P||[]).push(["/_error",function(){return u(34570)}])}},function(n){n.O(0,[888,774,179],function(){return n(n.s=81981)}),_N_E=n.O()}]);


================================================
FILE: autogenui/web/ui/_next/static/css/f8b9b54072e82183.css
================================================
.dark{--color-bg-primary:#111827;--color-bg-secondary:#1e293b;--color-bg-light:#27354c;--color-bg-accent:#22c55e;--color-text-primary:#f7fafc;--color-text-secondary:#e2e8f0;--color-text-accent:#22c55e;--color-border-primary:#f7fafc;--color-border-secondary:#e2e8f045;--color-border-accent:#22c55e}.light{--color-bg-primary:#fff;--color-bg-secondary:#edf2f7;--color-bg-light:#f9fafb;--color-bg-accent:#16a34a;--color-text-primary:#334155;--color-text-secondary:#64748b;--color-text-accent:#16a34a;--color-border-primary:#2d3748c1;--color-border-secondary:#edf2f7;--color-border-accent:#16a34a}
/*
! tailwindcss v3.3.3 | MIT License | https://tailwindcss.com
*/*,:after,:before{box-sizing:border-box;border:0 solid #e5e7eb}:after,:before{--tw-content:""}html{line-height:1.5;-webkit-text-size-adjust:100%;-moz-tab-size:4;-o-tab-size:4;tab-size:4;font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;font-feature-settings:normal;font-variation-settings:normal}body{margin:0;line-height:inherit}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}button,input,optgroup,select,textarea{font-family:inherit;font-feature-settings:inherit;font-variation-settings:inherit;font-size:100%;font-weight:inherit;line-height:inherit;color:inherit;margin:0;padding:0}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dd,dl,figure,h1,h2,h3,h4,h5,h6,hr,p,pre{margin:0}fieldset{margin:0}fieldset,legend{padding:0}menu,ol,ul{list-style:none;margin:0;padding:0}dialog{padding:0}textarea{resize:vertical}input::-moz-placeholder,textarea::-moz-placeholder{opacity:1;color:#9ca3af}input::placeholder,textarea::placeholder{opacity:1;color:#9ca3af}[role=button],button{cursor:pointer}:disabled{cursor:default}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{max-width:100%;height:auto}[hidden]{display:none}*,:after,:before{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border-width:0}.pointer-events-none{pointer-events:none}.absolute{position:absolute}.relative{position:relative}.right-0{right:0}.z-10{z-index:10}.mx-auto{margin-left:auto;margin-right:auto}.-mr-2{margin-right:-.5rem}.mb-1{margin-bottom:.25rem}.mb-2{margin-bottom:.5rem}.mb-4{margin-bottom:1rem}.ml-1{margin-left:.25rem}.ml-2{margin-left:.5rem}.ml-3{margin-left:.75rem}.mr-1{margin-right:.25rem}.mr-2{margin-right:.5rem}.mt-1{margin-top:.25rem}.mt-2{margin-top:.5rem}.mt-3{margin-top:.75rem}.mt-4{margin-top:1rem}.block{display:block}.inline-block{display:inline-block}.\!inline{display:inline!important}.inline{display:inline}.flex{display:flex}.inline-flex{display:inline-flex}.table{display:table}.hidden{display:none}.h-16{height:4rem}.h-2{height:.5rem}.h-3{height:.75rem}.h-4{height:1rem}.h-5{height:1.25rem}.h-6{height:1.5rem}.h-8{height:2rem}.h-full{height:100%}.w-2{width:.5rem}.w-3{width:.75rem}.w-4{width:1rem}.w-48{width:12rem}.w-6{width:1.5rem}.w-8{width:2rem}.w-full{width:100%}.max-w-7xl{max-width:80rem}.flex-1{flex:1 1 0%}.flex-shrink-0{flex-shrink:0}.origin-top-right{transform-origin:top right}.scale-100{--tw-scale-x:1;--tw-scale-y:1}.scale-100,.scale-95{transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.scale-95{--tw-scale-x:.95;--tw-scale-y:.95}.transform{transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}@keyframes bounce{0%,to{transform:translateY(-25%);animation-timing-function:cubic-bezier(.8,0,1,1)}50%{transform:none;animation-timing-function:cubic-bezier(0,0,.2,1)}}.animate-bounce{animation:bounce 1s infinite}@keyframes spin{to{transform:rotate(1turn)}}.animate-spin{animation:spin 1s linear infinite}.flex-col{flex-direction:column}.items-center{align-items:center}.justify-center{justify-content:center}.justify-between{justify-content:space-between}.gap-2{gap:.5rem}.space-y-1>:not([hidden])~:not([hidden]){--tw-space-y-reverse:0;margin-top:calc(.25rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(.25rem * var(--tw-space-y-reverse))}.overflow-auto{overflow:auto}.overflow-y-auto{overflow-y:auto}.overflow-x-hidden{overflow-x:hidden}.rounded{border-radius:.25rem}.rounded-full{border-radius:9999px}.rounded-md{border-radius:.375rem}.rounded-l-none{border-top-left-radius:0;border-bottom-left-radius:0}.rounded-r-none{border-top-right-radius:0;border-bottom-right-radius:0}.border{border-width:1px}.border-b{border-bottom-width:1px}.border-b-2{border-bottom-width:2px}.border-l-4{border-left-width:4px}.border-t{border-top-width:1px}.border-accent{border-color:var(--color-border-accent)}.border-gray-200{--tw-border-opacity:1;border-color:rgb(229 231 235/var(--tw-border-opacity))}.border-slate-500{--tw-border-opacity:1;border-color:rgb(100 116 139/var(--tw-border-opacity))}.border-transparent{border-color:transparent}.bg-accent{background-color:var(--color-bg-accent)}.bg-gray-100{--tw-bg-opacity:1;background-color:rgb(243 244 246/var(--tw-bg-opacity))}.bg-gray-50{--tw-bg-opacity:1;background-color:rgb(249 250 251/var(--tw-bg-opacity))}.bg-light{background-color:var(--color-bg-light)}.bg-primary{background-color:var(--color-bg-primary)}.bg-secondary{background-color:var(--color-bg-secondary)}.bg-slate-50{--tw-bg-opacity:1;background-color:rgb(248 250 252/var(--tw-bg-opacity))}.bg-white{--tw-bg-opacity:1;background-color:rgb(255 255 255/var(--tw-bg-opacity))}.p-2{padding:.5rem}.p-4{padding:1rem}.px-1{padding-left:.25rem;padding-right:.25rem}.px-4{padding-left:1rem;padding-right:1rem}.px-5{padding-left:1.25rem;padding-right:1.25rem}.py-1{padding-top:.25rem;padding-bottom:.25rem}.py-2{padding-top:.5rem}.pb-2,.py-2{padding-bottom:.5rem}.pb-3{padding-bottom:.75rem}.pl-3{padding-left:.75rem}.pr-2{padding-right:.5rem}.pr-4{padding-right:1rem}.pt-1{padding-top:.25rem}.pt-2{padding-top:.5rem}.pt-4{padding-top:1rem}.text-right{text-align:right}.text-base{font-size:1rem;line-height:1.5rem}.text-sm{font-size:.875rem;line-height:1.25rem}.text-xs{font-size:.75rem;line-height:1rem}.font-light{font-weight:300}.font-medium{font-weight:500}.font-semibold{font-weight:600}.capitalize{text-transform:capitalize}.text-accent{color:var(--color-text-accent)}.text-gray-100{--tw-text-opacity:1;color:rgb(243 244 246/var(--tw-text-opacity))}.text-gray-400{--tw-text-opacity:1;color:rgb(156 163 175/var(--tw-text-opacity))}.text-gray-500{--tw-text-opacity:1;color:rgb(107 114 128/var(--tw-text-opacity))}.text-gray-600{--tw-text-opacity:1;color:rgb(75 85 99/var(--tw-text-opacity))}.text-gray-700{--tw-text-opacity:1;color:rgb(55 65 81/var(--tw-text-opacity))}.text-gray-800{--tw-text-opacity:1;color:rgb(31 41 55/var(--tw-text-opacity))}.text-gray-900{--tw-text-opacity:1;color:rgb(17 24 39/var(--tw-text-opacity))}.text-orange-500{--tw-text-opacity:1;color:rgb(249 115 22/var(--tw-text-opacity))}.text-primary{color:var(--color-text-primary)}.text-secondary{color:var(--color-text-secondary)}.text-slate-700{--tw-text-opacity:1;color:rgb(51 65 85/var(--tw-text-opacity))}.text-white{--tw-text-opacity:1;color:rgb(255 255 255/var(--tw-text-opacity))}.opacity-0{opacity:0}.opacity-100{opacity:1}.opacity-50{opacity:.5}.shadow-lg{--tw-shadow:0 10px 15px -3px rgba(0,0,0,.1),0 4px 6px -4px rgba(0,0,0,.1);--tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color),0 4px 6px -4px var(--tw-shadow-color)}.shadow-lg,.shadow-sm{box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.shadow-sm{--tw-shadow:0 1px 2px 0 rgba(0,0,0,.05);--tw-shadow-colored:0 1px 2px 0 var(--tw-shadow-color)}.ring-1{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 #0000)}.ring-black{--tw-ring-opacity:1;--tw-ring-color:rgb(0 0 0/var(--tw-ring-opacity))}.ring-opacity-5{--tw-ring-opacity:0.05}.filter{filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)}.transition{transition-property:color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,-webkit-backdrop-filter;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter,-webkit-backdrop-filter;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-duration:.15s}.duration-200{transition-duration:.2s}.duration-300{transition-duration:.3s}.duration-75{transition-duration:75ms}.ease-in{transition-timing-function:cubic-bezier(.4,0,1,1)}.ease-out{transition-timing-function:cubic-bezier(0,0,.2,1)}.text-accent{color:#5e87e3!important}.bg-accent{background-color:#5e87e3!important}.border-accent{border-color:#5e87e3!important}.scroll::-webkit-scrollbar{width:8px;height:8px}.scroll::-webkit-scrollbar-track{background-color:var(--color-bg-secondary);border-radius:20px}.scroll::-webkit-scrollbar-thumb{background-color:var(--color-bg-accent);background-color:#5e87e3;border-radius:20px;border:3px solid #d6d6d6}.hover\:border-gray-300:hover{--tw-border-opacity:1;border-color:rgb(209 213 219/var(--tw-border-opacity))}.hover\:bg-gray-100:hover{--tw-bg-opacity:1;background-color:rgb(243 244 246/var(--tw-bg-opacity))}.hover\:bg-gray-50:hover{--tw-bg-opacity:1;background-color:rgb(249 250 251/var(--tw-bg-opacity))}.hover\:text-gray-500:hover{--tw-text-opacity:1;color:rgb(107 114 128/var(--tw-text-opacity))}.hover\:text-gray-700:hover{--tw-text-opacity:1;color:rgb(55 65 81/var(--tw-text-opacity))}.hover\:text-gray-800:hover{--tw-text-opacity:1;color:rgb(31 41 55/var(--tw-text-opacity))}.hover\:brightness-75:hover{--tw-brightness:brightness(.75);filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)}.focus\:outline-none:focus{outline:2px solid transparent;outline-offset:2px}.focus\:ring-2:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 #0000)}.focus\:ring-slate-500:focus{--tw-ring-opacity:1;--tw-ring-color:rgb(100 116 139/var(--tw-ring-opacity))}.focus\:ring-offset-2:focus{--tw-ring-offset-width:2px}@media (min-width:640px){.sm\:-my-px{margin-top:-1px;margin-bottom:-1px}.sm\:ml-6{margin-left:1.5rem}.sm\:flex{display:flex}.sm\:hidden{display:none}.sm\:items-center{align-items:center}.sm\:space-x-8>:not([hidden])~:not([hidden]){--tw-space-x-reverse:0;margin-right:calc(2rem * var(--tw-space-x-reverse));margin-left:calc(2rem * calc(1 - var(--tw-space-x-reverse)))}.sm\:px-6{padding-left:1.5rem;padding-right:1.5rem}}@media (min-width:768px){.md\:p-10{padding:2.5rem}}@media (min-width:1024px){.lg\:px-8{padding-left:2rem;padding-right:2rem}}


================================================
FILE: autogenui/web/ui/_next/static/Ze56HrYie2fIwKH-9UnV4/_buildManifest.js
================================================
self.__BUILD_MANIFEST={__rewrites:{afterFiles:[],beforeFiles:[],fallback:[]},"/_error":["static/chunks/pages/_error-d6885ef27f2c5e3d.js"],sortedPages:["/_app","/_error"]},self.__BUILD_MANIFEST_CB&&self.__BUILD_MANIFEST_CB();


================================================
FILE: autogenui/web/ui/_next/static/Ze56HrYie2fIwKH-9UnV4/_ssgManifest.js
================================================
self.__SSG_MANIFEST=new Set([]);self.__SSG_MANIFEST_CB&&self.__SSG_MANIFEST_CB()


================================================
FILE: frontend/README.md
================================================
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.



================================================
FILE: frontend/next.config.js
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: "export",
  images: { unoptimized: true },
};

module.exports = nextConfig;



================================================
FILE: frontend/package.json
================================================
{
  "name": "testapp",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "rm -rf ../autogenui/web/ui && next build && cp -r  out/ ../autogenui/web/ui",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "react": "^18",
    "react-dom": "^18",
    "next": "13.5.6",
    "@ant-design/icons": "^5.2.6",
    "@headlessui/react": "^1.7.17",
    "@heroicons/react": "^2.0.18",
    "@tremor/react": "^3.6.6",
    "@types/js-cookie": "^3.0.3",
    "@types/react-syntax-highlighter": "^15.5.7",
    "@vercel/analytics": "^1.0.2",
    "antd": "^5.9.4",
    "js-cookie": "^3.0.5",
    "next-auth": "^4.23.1",
    "prettier": "^3.0.2",
    "prop-types": "^15.8.1",
    "react-markdown": "^9.0.0",
    "react-syntax-highlighter": "^15.5.0",
    "reactflow": "^11.9.2",
    "remark-gfm": "^4.0.0",
    "server-only": "^0.0.1"
  },
  "devDependencies": {
    "typescript": "^5",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10",
    "postcss": "^8",
    "tailwindcss": "^3",
    "eslint": "^8",
    "eslint-config-next": "13.5.6"
  }
}



================================================
FILE: frontend/postcss.config.js
================================================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}



================================================
FILE: frontend/tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
      transitionProperty: {
        height: "height",
        spacing: "margin, padding",
      },
      backgroundColor: {
        primary: "var(--color-bg-primary)",
        secondary: "var(--color-bg-secondary)",
        accent: "var(--color-bg-accent)",
        light: "var(--color-bg-light)",
      },
      textColor: {
        accent: "var(--color-text-accent)",
        primary: "var(--color-text-primary)",
        secondary: "var(--color-text-secondary)",
      },
      borderColor: {
        accent: "var(--color-border-accent)",
        primary: "var(--color-border-primary)",
        secondary: "var(--color-border-secondary)",
      },
    },
  },
  plugins: [],
};
export default config;



================================================
FILE: frontend/tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
FILE: frontend/.eslintrc.json
================================================
{
  "extends": "next/core-web-vitals"
}



================================================
FILE: frontend/src/app/globals.css
================================================
.dark {
  --color-bg-primary: #111827;
  --color-bg-secondary: #1e293b;
  --color-bg-light: #27354c;
  --color-bg-accent: #22c55e;
  --color-text-primary: #f7fafc;
  --color-text-secondary: #e2e8f0;
  --color-text-accent: #22c55e;
  --color-border-primary: #f7fafc;
  --color-border-secondary: #e2e8f045;
  --color-border-accent: #22c55e;
}

.light {
  --color-bg-primary: #ffffff;
  --color-bg-secondary: #edf2f7;
  --color-bg-light: #f9fafb;
  --color-bg-accent: #16a34a;
  --color-text-primary: #334155;
  --color-text-secondary: #64748b;
  --color-text-accent: #16a34a;
  --color-border-primary: #2d3748c1;
  --color-border-secondary: #edf2f7;
  --color-border-accent: #16a34a;
}
@tailwind base;
@tailwind components;
@tailwind utilities;

.text-accent {
  color: #5e87e3 !important;
}
.bg-accent {
  background-color: #5e87e3 !important;
}
.border-accent {
  border-color: #5e87e3 !important;
}

.scroll::-webkit-scrollbar {
  width: 8px; /* width of the entire scrollbar */
  height: 8px;
}

.scroll::-webkit-scrollbar-track {
  @apply bg-secondary;
  border-radius: 20px;
}

.scroll::-webkit-scrollbar-thumb {
  @apply bg-accent;
  border-radius: 20px; /* roundness of the scroll thumb */
  border: 3px solid rgb(214, 214, 214); /* creates padding around scroll thumb */
}



================================================
FILE: frontend/src/app/layout.tsx
================================================
import "./globals.css";

// import { Analytics } from '@vercel/analytics/react';
import Nav from "./nav";
import { Suspense } from "react";

export const metadata = {
  title: "AutoGen UI",
  description:
    "AutoGen UI is a web-based interface for building AutoGen agents.",
};

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en" className="h-full bg-gray-50 light">
      <body className="h-full ">
        <Suspense>
          <Nav />
        </Suspense>
        <div
          style={{ height: "calc(100vh - 64px)" }}
          className="p-4 md:p-10 mx-auto max-w-7xl"
        >
          {children}
        </div>
      </body>
    </html>
  );
}



================================================
FILE: frontend/src/app/nav.tsx
================================================
import Navbar from './navbar';
// import { getServerSession } from 'next-auth/next';

export default async function Nav() {
  // const session = await getServerSession();
  return <Navbar user={''} />;
}



================================================
FILE: frontend/src/app/navbar.tsx
================================================
'use client';

import { Fragment } from 'react';
import { usePathname } from 'next/navigation';
import { Disclosure, Menu, Transition } from '@headlessui/react';
import { Bars3Icon, XMarkIcon } from '@heroicons/react/24/outline';
// import { signIn, signOut } from 'next-auth/react';
import Image from 'next/image';

const navigation = [
  { name: 'Chat', href: '/' }
  // { name: 'Playground', href: '/playground' }
];

function classNames(...classes: string[]) {
  return classes.filter(Boolean).join(' ');
}

function signIn(provider: string) {
  console.log('sign in');
}

function signOut() {
  console.log('sign out');
}

export default function Navbar({ user }: { user: any }) {
  const pathname = usePathname();

  return (
    <Disclosure as="nav" className="bg-white shadow-sm">
      {({ open }) => (
        <>
          <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
            <div className="flex h-16 justify-between">
              <div className="flex">
                <div className="flex flex-shrink-0 items-center">
                  <svg
                    width="32"
                    height="32"
                    viewBox="0 0 32 32"
                    fill="none"
                    className="text-gray-100"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <rect
                      width="100%"
                      height="100%"
                      rx="16"
                      fill="currentColor"
                    />
                    <path
                      fillRule="evenodd"
                      clipRule="evenodd"
                      d="M17.6482 10.1305L15.8785 7.02583L7.02979 22.5499H10.5278L17.6482 10.1305ZM19.8798 14.0457L18.11 17.1983L19.394 19.4511H16.8453L15.1056 22.5499H24.7272L19.8798 14.0457Z"
                      fill="black"
                    />
                  </svg>
                </div>
                <div className="hidden sm:-my-px sm:ml-6 sm:flex sm:space-x-8">
                  {navigation.map((item) => (
                    <a
                      key={item.name}
                      href={item.href}
                      className={classNames(
                        pathname === item.href
                          ? 'border-slate-500 text-gray-900'
                          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300',
                        'inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium'
                      )}
                      aria-current={pathname === item.href ? 'page' : undefined}
                    >
                      {item.name}
                    </a>
                  ))}
                </div>
              </div>
              <div className="hidden sm:ml-6 sm:flex sm:items-center">
                <Menu as="div" className="relative ml-3">
                  <div>
                    <Menu.Button className="flex rounded-full bg-white text-sm focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2">
                      <span className="sr-only">Open user menu</span>
                      <Image
                        className="h-8 w-8 rounded-full"
                        src={user?.image || 'https://avatar.vercel.sh/leerob'}
                        height={32}
                        width={32}
                        alt={`${user?.name || 'placeholder'} avatar`}
                      />
                    </Menu.Button>
                  </div>
                  <Transition
                    as={Fragment}
                    enter="transition ease-out duration-200"
                    enterFrom="transform opacity-0 scale-95"
                    enterTo="transform opacity-100 scale-100"
                    leave="transition ease-in duration-75"
                    leaveFrom="transform opacity-100 scale-100"
                    leaveTo="transform opacity-0 scale-95"
                  >
                    <Menu.Items className="absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none">
                      {user ? (
                        <Menu.Item>
                          {({ active }) => (
                            <button
                              className={classNames(
                                active ? 'bg-gray-100' : '',
                                'flex w-full px-4 py-2 text-sm text-gray-700'
                              )}
                              onClick={() => signOut()}
                            >
                              Sign out
                            </button>
                          )}
                        </Menu.Item>
                      ) : (
                        <Menu.Item>
                          {({ active }) => (
                            <button
                              className={classNames(
                                active ? 'bg-gray-100' : '',
                                'flex w-full px-4 py-2 text-sm text-gray-700'
                              )}
                              onClick={() => signIn('github')}
                            >
                              Sign in
                            </button>
                          )}
                        </Menu.Item>
                      )}
                    </Menu.Items>
                  </Transition>
                </Menu>
              </div>
              <div className="-mr-2 flex items-center sm:hidden">
                <Disclosure.Button className="inline-flex items-center justify-center rounded-md bg-white p-2 text-gray-400 hover:bg-gray-100 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2">
                  <span className="sr-only">Open main menu</span>
                  {open ? (
                    <XMarkIcon className="block h-6 w-6" aria-hidden="true" />
                  ) : (
                    <Bars3Icon className="block h-6 w-6" aria-hidden="true" />
                  )}
                </Disclosure.Button>
              </div>
            </div>
          </div>

          <Disclosure.Panel className="sm:hidden">
            <div className="space-y-1 pt-2 pb-3">
              {navigation.map((item) => (
                <Disclosure.Button
                  key={item.name}
                  as="a"
                  href={item.href}
                  className={classNames(
                    pathname === item.href
                      ? 'bg-slate-50 border-slate-500 text-slate-700'
                      : 'border-transparent text-gray-600 hover:bg-gray-50 hover:border-gray-300 hover:text-gray-800',
                    'block pl-3 pr-4 py-2 border-l-4 text-base font-medium'
                  )}
                  aria-current={pathname === item.href ? 'page' : undefined}
                >
                  {item.name}
                </Disclosure.Button>
              ))}
            </div>
            <div className="border-t border-gray-200 pt-4 pb-3">
              {user ? (
                <>
                  <div className="flex items-center px-4">
                    <div className="flex-shrink-0">
                      <Image
                        className="h-8 w-8 rounded-full"
                        src={user.image}
                        height={32}
                        width={32}
                        alt={`${user.name} avatar`}
                      />
                    </div>
                    <div className="ml-3">
                      <div className="text-base font-medium text-gray-800">
                        {user.name}
                      </div>
                      <div className="text-sm font-medium text-gray-500">
                        {user.email}
                      </div>
                    </div>
                  </div>
                  <div className="mt-3 space-y-1">
                    <button
                      onClick={() => signOut()}
                      className="block px-4 py-2 text-base font-medium text-gray-500 hover:bg-gray-100 hover:text-gray-800"
                    >
                      Sign out
                    </button>
                  </div>
                </>
              ) : (
                <div className="mt-3 space-y-1">
                  <button
                    onClick={() => signIn('github')}
                    className="flex w-full px-4 py-2 text-base font-medium text-gray-500 hover:bg-gray-100 hover:text-gray-800"
                  >
                    Sign in
                  </button>
                </div>
              )}
            </div>
          </Disclosure.Panel>
        </>
      )}
    </Disclosure>
  );
}



================================================
FILE: frontend/src/app/page.tsx
================================================
import ChatBoxView from "@/components/chat/chatview";
import { IChatMessage } from "@/components/types";
import React from "react";
// import { queryBuilder } from '../lib/planetscale';
// import Search from './search';
// import UsersTable from './table';

export const dynamic = "force-static";

export default async function IndexPage() {
  const sampleMessages: IChatMessage[] = [
    {
      text: "what is the height of the eiffel tower",
      sender: "user",
    },
    {
      text: "The Eiffel Tower is approximately 330 meters (1,083 feet) tall. \n\nTERMINATE",
      sender: "bot",
      metadata: [
        {
          content:
            "The Eiffel Tower is approximately 330 meters (1,083 feet) tall. \n\nTERMINATE",
          role: "user",
        },
      ],
    },
    {
      text: "what is the components of the atmospher",
      sender: "user",
    },
    {
      text: "The atmosphere is primarily composed of nitrogen (78%) and oxygen (21%). The remaining 1% consists of argon, carbon dioxide, and trace amounts of other gases such as neon, helium, methane, krypton, and hydrogen, as well as water vapor.\n\nTERMINATE",
      sender: "bot",
      metadata: [
        {
          content:
            "The atmosphere is primarily composed of nitrogen (78%) and oxygen (21%). The remaining 1% consists of argon, carbon dioxide, and trace amounts of other gases such as neon, helium, methane, krypton, and hydrogen, as well as water vapor.\n\nTERMINATE",
          role: "user",
        },
        {
          content:
            "The atmosphere is primarily composed of nitrogen (78%) and oxygen (21%). The remaining 1% consists of argon, carbon dioxide, and trace amounts of other gases such as neon, helium, methane, krypton, and hydrogen, as well as water vapor.\n\nTERMINATE",
          role: "user",
        },
        {
          content:
            "The atmosphere is primarily composed of nitrogen (78%) and oxygen (21%). The remaining 1% consists of argon, carbon dioxide, and trace amounts of other gases such as neon, helium, methane, krypton, and hydrogen, as well as water vapor.\n\nTERMINATE",
          role: "user",
        },
        {
          content:
            "The atmosphere is primarily composed of nitrogen (78%) and oxygen (21%). The remaining 1% consists of argon, carbon dioxide, and trace amounts of other gases such as neon, helium, methane, krypton, and hydrogen, as well as water vapor.\n\nTERMINATE",
          role: "user",
        },
      ],
    },
  ];

  return (
    <main className=" h-full">
      <div className="p-2 border mb-2 text-xs rounded text-secondary">
        {" "}
        Sample app to show streaming logs in{" "}
        <a
          href="https://github.com/microsoft/autogen/tree/main/python/packages/autogen-agentchat"
          className="text-primary font-semibold"
        >
          AutoGen AgentChat
        </a>{" "}
        to a UI
      </div>
      <ChatBoxView initMessages={[]} />
    </main>
  );
}



================================================
FILE: frontend/src/components/markdown.tsx
================================================
'use client';

import remarkGfm from 'remark-gfm';
import ReactMarkdown from 'react-markdown';
import { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';

interface CodeProps {
  node?: any;
  inline?: any;
  className?: any;
  children?: React.ReactNode;
}

export default function MarkdownView({ data }: { data: string }) {
  function processString(inputString: string): string {
    inputString = inputString.replace(/\n/g, '  \n');
    const markdownPattern = /```markdown\s+([\s\S]*?)\s+```/g;
    return inputString?.replace(markdownPattern, (match, content) => content);
  }

  return (
    <div
      className={`   w-full chatbox prose dark:prose-invert text-primary rounded p-2 `}
    >
      <ReactMarkdown
        remarkPlugins={[remarkGfm]}
        components={{
          code({ node, inline, className, children, ...props }: CodeProps) {
            const match = /language-(\w+)/.exec(className || '');
            const language = match ? match[1] : 'text';
            return !inline && match ? (
              <SyntaxHighlighter
                {...props}
                style={atomDark}
                language={language}
                className="rounded"
                PreTag="div"
                wrapLongLines={true}
              >
                {String(children).replace(/\n$/, '')}
              </SyntaxHighlighter>
            ) : (
              <code {...props} className={className}>
                {children}
              </code>
            );
          }
        }}
      >
        {processString(data)}
      </ReactMarkdown>
    </div>
  );
}



================================================
FILE: frontend/src/components/types.ts
================================================
export interface INodeData {
  label: string;
  children?: any;
}

export interface IMessage {
  userId: string;
  rootMsgId: number;
  msgId?: number;
  role: string;
  content: string;
  timestamp: string;
  personalize?: boolean;
  use_cache?: boolean;
  ra?: string;
}

export interface IStatus {
  message: string;
  status: boolean;
  data?: any;
}

export interface IChatMessage {
  text: string;
  sender: "user" | "bot";
  metadata?: any;
  msgId?: number;
}

export interface ChatInputProps {
  onSubmit: (text: string) => void;
  loading: boolean;
  error: IStatus | null;
}
export interface LogEvent {
  timestamp: string;
  type: string;
  content: string;
  source?: string;
}

export interface IChatMessageWithSession extends IChatMessage {
  sessionId?: string;
  status?: "processing" | "complete";
  finalResponse?: string;
}

export interface MessageListProps {
  messages: IChatMessageWithSession[];
  sessionLogs: Record<string, LogEvent[]>;
  onRetry: (text: string) => void;
  loading: boolean;
}



================================================
FILE: frontend/src/components/utils.ts
================================================
import { IStatus } from './types';

export function fetchJSON(
  url: string | URL,
  payload: any = {},
  onSuccess: (data: any) => void,
  onError: (error: IStatus) => void
) {
  return fetch(url, payload)
    .then(function (response) {
      if (response.status !== 200) {
        console.log(
          'Looks like there was a problem. Status Code: ' + response.status,
          response
        );
        response.json().then(function (data) {
          console.log('Error data', data);
        });
        onError({
          status: false,
          message:
            'Connection error ' + response.status + ' ' + response.statusText
        });
        return;
      }
      return response.json().then(function (data) {
        onSuccess(data);
      });
    })
    .catch(function (err) {
      console.log('Fetch Error :-S', err);
      onError({
        status: false,
        message: `There was an error connecting to server. (${err}) `
      });
    });
}
export const capitalize = (s: string) => {
  if (typeof s !== 'string') return '';
  return s.charAt(0).toUpperCase() + s.slice(1);
};



================================================
FILE: frontend/src/components/chat/chatinput.tsx
================================================
"use client";

import {
  PaperAirplaneIcon,
  Cog6ToothIcon,
  ExclamationTriangleIcon,
} from "@heroicons/react/24/outline";
import * as React from "react";
import { ChatInputProps } from "../types";

export default function ChatInput({
  onSubmit,
  loading,
  error,
}: ChatInputProps) {
  const queryInputRef = React.useRef<HTMLInputElement>(null);
  const [previousLoading, setPreviousLoading] = React.useState(loading);

  // Clear input when loading changes from true to false (meaning the response is complete)
  React.useEffect(() => {
    if (previousLoading && !loading && !error) {
      resetInput();
    }
    setPreviousLoading(loading);
  }, [loading, error, previousLoading]);

  const resetInput = () => {
    if (queryInputRef.current) {
      queryInputRef.current.value = "";
    }
  };

  const handleSubmit = () => {
    if (queryInputRef.current?.value && !loading) {
      const query = queryInputRef.current.value;
      onSubmit(query);
      // Don't reset immediately - wait for response to complete
    }
  };

  return (
    <div className="mt-2 p-2 w-full">
      <div
        className={`mt-2 rounded p-2 shadow-lg flex mb-1 ${
          loading ? "opacity-50 pointer-events-none" : ""
        }`}
      >
        <form
          className="flex-1"
          onSubmit={(e) => {
            e.preventDefault();
            handleSubmit();
          }}
        >
          <input
            id="queryInput"
            name="queryInput"
            onKeyDown={(e) => {
              if (e.key === "Enter") {
                handleSubmit();
              }
            }}
            ref={queryInputRef}
            className="w-full text-gray-600 rounded rounded-r-none border border-accent bg-white p-2"
            placeholder="Type your message here..."
            disabled={loading}
          />
        </form>
        <div
          role="button"
          onClick={handleSubmit}
          className="bg-accent hover:brightness-75 transition duration-300 rounded pt-2 rounded-l-none px-5"
        >
          {!loading ? (
            <div className="inline-block">
              <PaperAirplaneIcon className="h-6 text-white inline-block" />
            </div>
          ) : (
            <div className="inline-block">
              <Cog6ToothIcon className="relative -pb-2 text-white animate-spin inline-flex rounded-full h-6 w-6" />
            </div>
          )}
        </div>
      </div>

      {error && !error.status && (
        <div className="p-2 border rounded mt-4 text-orange-500 text-sm">
          <ExclamationTriangleIcon className="h-5 text-orange-500 inline-block mr-2" />
          {error.message}
        </div>
      )}
    </div>
  );
}



================================================
FILE: frontend/src/components/chat/chatview.tsx
================================================
"use client";

import * as React from "react";
import { message } from "antd";
import { IChatMessageWithSession, IStatus, LogEvent } from "../types";
import MessageList from "./messagelist";
import ChatInput from "./chatinput";

interface ChatViewProps {
  initMessages: any[];
  viewHeight?: string;
}

// Default server URL if not provided in environment
const DEFAULT_SERVER_URL = "http://localhost:3000";

export default function ChatView({
  initMessages,
  viewHeight = "100%",
}: ChatViewProps) {
  const serverUrl = process.env.NEXT_PUBLIC_API_SERVER || DEFAULT_SERVER_URL;
  const [loading, setLoading] = React.useState(false);
  const [error, setError] = React.useState<IStatus | null>({
    status: true,
    message: "All good",
  });
  const [messages, setMessages] = React.useState<IChatMessageWithSession[]>([]);
  const [currentSessionId, setCurrentSessionId] = React.useState<string | null>(
    null
  );
  const [sessionLogs, setSessionLogs] = React.useState<
    Record<string, LogEvent[]>
  >({});
  const [activeSockets, setActiveSockets] = React.useState<
    Record<string, WebSocket>
  >({});

  const getBaseUrl = (url: string): string => {
    try {
      // Remove protocol and api path for WebSocket
      return url
        .replace(/(^\w+:|^)\/\//, "") // Remove protocol (http:// or https://)
        .replace("/api", ""); // Remove /api for base
    } catch (error) {
      console.error("Error processing server URL:", error);
      throw new Error("Invalid server URL configuration");
    }
  };

  const getApiBaseUrl = (url: string): string => {
    // Keep the /api path for HTTP requests
    return url.replace(/\/$/, ""); // Just remove trailing slash if exists
  };

  React.useEffect(() => {
    setMessages(initMessages);
  }, [initMessages]);

  // Cleanup WebSocket connections
  React.useEffect(() => {
    return () => {
      Object.values(activeSockets).forEach((socket) => socket.close());
    };
  }, [activeSockets]);

  const connectWebSocket = async (sessionId: string): Promise<WebSocket> => {
    const baseUrl = getBaseUrl(serverUrl);
    const wsUrl = `ws://${baseUrl}/api/ws/logs/${sessionId}`;

    return new Promise((resolve, reject) => {
      const socket = new WebSocket(wsUrl);

      let heartbeatInterval: NodeJS.Timeout;

      socket.onopen = () => {
        console.log("WebSocket connected for session:", sessionId);

        // Setup heartbeat every 30 seconds
        heartbeatInterval = setInterval(() => {
          if (socket.readyState === WebSocket.OPEN) {
            socket.send("ping");
          }
        }, 30000);

        setActiveSockets((prev) => ({
          ...prev,
          [sessionId]: socket,
        }));
        resolve(socket);
      };

      socket.onmessage = (event) => {
        try {
          const logEvent = JSON.parse(event.data);
          console.log("Received event:", logEvent);

          setSessionLogs((prev) => ({
            ...prev,
            [sessionId]: [...(prev[sessionId] || []), logEvent],
          }));

          if (logEvent.type === "GroupChatPublishEvent") {
            setMessages((prev) =>
              prev.map((msg) => {
                if (msg.sessionId === sessionId && msg.sender === "bot") {
                  return {
                    ...msg,
                    text: logEvent.content,
                  };
                }
                return msg;
              })
            );
          }

          if (logEvent.type === "TaskResultEvent") {
            setMessages((prev) =>
              prev.map((msg) => {
                if (msg.sessionId === sessionId && msg.sender === "bot") {
                  return {
                    ...msg,
                    finalResponse: logEvent.content,
                  };
                }
                return msg;
              })
            );
          }

          if (logEvent.type === "ErrorEvent") {
            message.error(logEvent.content);
            setError({
              status: false,
              message: logEvent.content,
            });
          }

          if (logEvent.type === "TerminationEvent") {
            console.log("Stream completed for session:", sessionId);
            clearInterval(heartbeatInterval);
            socket.close();
            setActiveSockets((prev) => {
              const newSockets = { ...prev };
              delete newSockets[sessionId];
              return newSockets;
            });
          }
        } catch (error) {
          console.error("Error processing WebSocket message:", error);
        }
      };

      socket.onerror = (error) => {
        console.error("WebSocket error:", error);
        clearInterval(heartbeatInterval);
        message.error("WebSocket connection error");
        reject(error);
      };

      socket.onclose = () => {
        console.log("WebSocket closed for session:", sessionId);
        clearInterval(heartbeatInterval);
        setActiveSockets((prev) => {
          const newSockets = { ...prev };
          delete newSockets[sessionId];
          return newSockets;
        });
      };
    });
  };

  const createSession = async (): Promise<string> => {
    const apiUrl = getApiBaseUrl(serverUrl);
    const response = await fetch(`${apiUrl}/create_session`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
    });

    if (!response.ok) {
      throw new Error("Failed to create session");
    }

    const data = await response.json();
    return data.session_id;
  };

  const chatHistory = (messages: IChatMessageWithSession[]) => {
    let history = "";
    messages.forEach((message) => {
      history += `${message.sender}: ${message.text}\n`;
    });
    return history;
  };

  const getCompletion = async (query: string) => {
    setError(null);
    setLoading(true);

    let currentSessionId: string | null = null;
    try {
      currentSessionId = await createSession();
      setCurrentSessionId(currentSessionId);

      // Wait for WebSocket to connect
      const socket = await connectWebSocket(currentSessionId);

      if (!socket) {
        throw new Error("Could not establish WebSocket connection");
      }

      const userMessage: IChatMessageWithSession = {
        text: query,
        sender: "user",
        sessionId: currentSessionId,
      };

      const botMessage: IChatMessageWithSession = {
        text: "",
        sender: "bot",
        sessionId: currentSessionId,
        status: "processing",
      };

      setMessages((prev) => [...prev, userMessage, botMessage]);

      const apiUrl = getApiBaseUrl(serverUrl);
      const response = await fetch(`${apiUrl}/generate`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          prompt: query,
          history: chatHistory(messages),
          session_id: currentSessionId,
        }),
      });

      if (!response.ok) {
        throw new Error("Generate request failed");
      }

      const data = await response.json();
      if (!data.status) {
        throw new Error(data.message || "Unknown error occurred");
      }
    } catch (err) {
      console.error("Error:", err);
      message.error(
        err instanceof Error ? err.message : "Unknown error occurred"
      );

      if (currentSessionId && activeSockets[currentSessionId]) {
        activeSockets[currentSessionId].close();
      }

      setError({
        status: false,
        message: err instanceof Error ? err.message : "Unknown error occurred",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div
      style={{ height: "calc(100% - 20px)" }}
      className="text-primary overflow-auto bg-primary relative scroll rounded flex-1"
    >
      <MessageList
        messages={messages}
        sessionLogs={sessionLogs}
        onRetry={getCompletion}
        loading={loading}
      />

      <ChatInput onSubmit={getCompletion} loading={loading} error={error} />
    </div>
  );
}



================================================
FILE: frontend/src/components/chat/messagelist.tsx
================================================
"use client";

import {
  AcademicCapIcon,
  ArrowPathIcon,
  UserIcon,
} from "@heroicons/react/24/outline";
import { Collapse } from "antd";
import * as React from "react";
import MarkdownView from "../markdown";
import { LogEvent, MessageListProps } from "../types";

export default function MessageList({
  messages,
  sessionLogs,
  onRetry,
  loading,
}: MessageListProps) {
  const messageBoxRef = React.useRef<HTMLDivElement>(null);

  React.useEffect(() => {
    scrollToBottom();
  }, [messages, sessionLogs]);

  const scrollToBottom = () => {
    messageBoxRef.current?.scroll({
      top: messageBoxRef.current.scrollHeight,
      behavior: "smooth",
    });
  };

  const renderLogs = (sessionId: string) => {
    const logs = sessionLogs[sessionId] || [];
    return logs.map((log: LogEvent, index: number) => {
      const isEven = index % 2 === 0;
      return (
        <div
          key={`log-${sessionId}-${index}`}
          className={`text-sm border rounded p-2 mb-2 ${
            isEven ? "bg-primary" : "bg-secondary"
          }`}
        >
          <div className="flex justify-between items-center text-xs text-gray-500 mb-1">
            <div>
              <span className="font-semibold">{log.type}</span>
              {log.source && (
                <span className="text-accent ml-2">[{log.source}]</span>
              )}
            </div>
            <div>{new Date(log.timestamp).toLocaleTimeString()}</div>
          </div>
          <div className="mt-1">
            <MarkdownView data={log.content} />
          </div>
        </div>
      );
    });
  };

  return (
    <div
      ref={messageBoxRef}
      style={{ height: "calc(100% - 100px)" }}
      className="flex overflow-auto flex-col rounded scroll pr-2"
    >
      <div className="flex-1   mt-4"></div>
      <div className="ml-2">
        {messages.map((message, i) => {
          const isUser = message.sender === "user";
          const css = isUser ? "bg-accent text-white" : "bg-light";

          return (
            <div
              key={`message-${i}`}
              className={`align-right ${
                isUser ? "text-right" : "mb-2 border-b pb-2"
              }`}
            >
              <div className={`${isUser ? "" : "w-full"} inline-flex gap-2`}>
                <div>
                  {!isUser && (
                    <span className="inline-block text-accent bg-primary pb-2 ml-1">
                      <AcademicCapIcon className="inline-block h-6" />
                    </span>
                  )}
                </div>
                <div
                  className={`inline-block ${
                    isUser ? "" : "w-full"
                  } p-2 rounded`}
                >
                  {isUser ? (
                    <>
                      <div className={`${css} p-2 rounded`}>{message.text}</div>
                      <span
                        role="button"
                        onClick={() => onRetry(message.text)}
                        className="mt-1 text-sm inline-block"
                      >
                        <ArrowPathIcon className="h-4 w-4 mr-1 inline-block" />
                        Retry
                      </span>
                    </>
                  ) : (
                    <>
                      {message.finalResponse && (
                        <div className="mb-4">
                          <MarkdownView data={message.finalResponse} />
                        </div>
                      )}

                      {message.sessionId && sessionLogs[message.sessionId] && (
                        <Collapse
                          defaultActiveKey={
                            message.status === "processing" ? ["1"] : []
                          }
                          size="small"
                          className="text-xs mt-2"
                          items={[
                            {
                              key: "1",
                              label: (
                                <div>
                                  <span className="pr-2">
                                    {message.status === "processing"
                                      ? "Processing..."
                                      : "View Processing Steps"}
                                  </span>
                                </div>
                              ),
                              children: (
                                <div>{renderLogs(message.sessionId)}</div>
                              ),
                            },
                          ]}
                        />
                      )}
                    </>
                  )}
                </div>
                {isUser && <UserIcon className="inline-block h-6" />}
              </div>
            </div>
          );
        })}
      </div>

      <div className="ml-2 h-6 mb-4 mt-2">
        {loading && (
          <div className="inline-flex gap-2">
            <span className="rounded-full bg-accent h-2 w-2 inline-block"></span>
            <span className="animate-bounce rounded-full bg-accent h-3 w-3 inline-block"></span>
            <span className="rounded-full bg-accent h-2 w-2 inline-block"></span>
          </div>
        )}
      </div>
    </div>
  );
}



================================================
FILE: frontend/src/components/chat/messagesview.tsx
================================================
"use client";
import MarkdownView from "../markdown";

function isString(content: any) {
  return typeof content === "string" || content instanceof String;
}

export default function AgentMessagesView({ messages }: { messages: any }) {
  // console.log('metadata', metadata);
  const messagesView = (messages || []).map((message: any, i: number) => {
    const bg = i % 2 === 0 ? "bg-primary" : "bg-secondary";
    const contentIsString = isString(message.content);
    return (
      <div key={"messagerow" + i}>
        <div className={`text-xs border rounded p-2 mb-2 ${bg}`}>
          <div>{message?.source}</div>
          {contentIsString && <MarkdownView data={message.content} />}
          {/* {!contentIsString && <AgentMessagesView messages={message.content} />} */}
        </div>
      </div>
    );
  });
  return (
    <div className=" overflow-x-hidden overflow-y-auto h-full scroll">
      {" "}
      <div className="mb-2 text-xs">
        The agent workflow generated {messagesView.length} message
        {messagesView.length > 1 ? "s" : ""}{" "}
      </div>
      <div>{messagesView}</div>
    </div>
  );
}



================================================
FILE: frontend/src/components/nodes/agent.tsx
================================================
import { useCallback } from 'react';
import { Handle, Position } from 'reactflow';
import { INodeData } from '../types';
import { Input } from 'antd';

const handleStyle = { left: 10 };

export default function AgentNode({
  data,
  isConnectable
}: {
  data: INodeData;
  isConnectable: boolean;
}) {
  const onChange = useCallback((evt: any) => {
    console.log(evt.target.value);
  }, []);

  return (
    <div className="font-light border-green    text-md border  rounded bg-white">
      <Handle
        type="target"
        position={Position.Top}
        isConnectable={isConnectable}
      />
      <div className="p-2 capitalize   border-b">
        <span className="capitalize"> {data.label || 'Agent'}</span>
      </div>
      <div className="p-2 ">
        <div className="flex">
          <label className="mr-2" htmlFor="name">
            Name
          </label>
          <Input className="inline-block nodrag" placeholder="Basic usage" />
        </div>
      </div>

      <Handle
        type="source"
        position={Position.Bottom}
        id="b"
        isConnectable={isConnectable}
      />
    </div>
  );
}



================================================
FILE: frontend/src/components/nodes/chat.tsx
================================================
import { useCallback } from 'react';
import { Handle, Position } from 'reactflow';
import { INodeData } from '../types';
import { Input } from 'antd';

const handleStyle = { left: 10 };

export default function ChatNode({
  data,
  isConnectable
}: {
  data: INodeData;
  isConnectable: boolean;
}) {
  const onChange = useCallback((evt: any) => {
    console.log(evt.target.value);
  }, []);

  return (
    <div
      style={{ minHeight: '300px' }}
      className="font-light border-green    text-md border  rounded bg-white"
    >
      <Handle
        type="target"
        position={Position.Left}
        isConnectable={isConnectable}
      />
      <Handle
        type="target"
        position={Position.Top}
        isConnectable={isConnectable}
      />

      <div className="p-2 capitalize   border-b">
        <span className="capitalize"> {data.label || 'Agent'}</span>
      </div>
      <div className="p-2 ">
        <div className="flex">
          <label className="mr-2" htmlFor="name">
            Name
          </label>
          <Input className="inline-block nodrag" placeholder="Basic usage" />
        </div>
      </div>

      <Handle
        type="source"
        position={Position.Bottom}
        id="b"
        isConnectable={isConnectable}
      />
    </div>
  );
}



================================================
FILE: notebooks/default_team.json
================================================
{
  "name": "weather_team",
  "participants": [
    {
      "name": "writing_agent",
      "model_client": {
        "model": "gpt-4o-2024-08-06",
        "model_type": "OpenAIChatCompletionClient"
      },
      "tools": [
        {
          "name": "get_weather",
          "description": "Get the weather for a city",
          "content": "async def get_weather(city: str) -> str:\n    return f\"The weather in {city} is 73 degrees and Sunny.\""
        }
      ],
      "agent_type": "AssistantAgent"
    }
  ],
  "termination_condition": {
    "termination_type": "MaxMessageTermination",
    "max_messages": 5
  },
  "team_type": "RoundRobinGroupChat",
  "model_client": null
}



================================================
FILE: notebooks/tutorial.ipynb
================================================
# Jupyter notebook converted to Python script.

 

from autogenui.provider import Provider
import json 

team_json_spec = json.load(open("default_team.json")) 
provider = Provider()  
team = provider.load_team(team_json_spec) 

result = await team.run(task="What is the weather in New York?");

result.messages
# Output:
#   [TextMessage(source='user', models_usage=None, content='What is the weather in New York?'),

#    ToolCallMessage(source='writing_agent', models_usage=RequestUsage(prompt_tokens=86, completion_tokens=15), content=[FunctionCall(id='call_1P3Dyudqa3qSwxvUqAsmswbH', arguments='{"city":"New York"}', name='get_weather')]),

#    ToolCallResultMessage(source='writing_agent', models_usage=None, content=[FunctionExecutionResult(content='The weather in New York is 73 degrees and Sunny.', call_id='call_1P3Dyudqa3qSwxvUqAsmswbH')]),

#    TextMessage(source='writing_agent', models_usage=RequestUsage(prompt_tokens=97, completion_tokens=14), content='The weather in New York is currently 73 degrees and sunny.'),

#    TextMessage(source='writing_agent', models_usage=RequestUsage(prompt_tokens=144, completion_tokens=4), content='TERMINATE')]

result_stream = team.run_stream(task="What is the weather in New York?")
async for result in result_stream:
    print(result)
# Output:
#   source='user' models_usage=None content='What is the weather in New York?'

#   source='writing_agent' models_usage=RequestUsage(prompt_tokens=167, completion_tokens=15) content=[FunctionCall(id='call_dhQsL9a2ARr737arLpqP3HUe', arguments='{"city":"New York"}', name='get_weather')]

#   source='writing_agent' models_usage=None content=[FunctionExecutionResult(content='The weather in New York is 73 degrees and Sunny.', call_id='call_dhQsL9a2ARr737arLpqP3HUe')]

#   source='writing_agent' models_usage=RequestUsage(prompt_tokens=178, completion_tokens=14) content='The weather in New York is currently 73 degrees and sunny.'

#   source='writing_agent' models_usage=RequestUsage(prompt_tokens=225, completion_tokens=4) content='TERMINATE'

#   TaskResult(messages=[TextMessage(source='user', models_usage=None, content='What is the weather in New York?'), ToolCallMessage(source='writing_agent', models_usage=RequestUsage(prompt_tokens=167, completion_tokens=15), content=[FunctionCall(id='call_dhQsL9a2ARr737arLpqP3HUe', arguments='{"city":"New York"}', name='get_weather')]), ToolCallResultMessage(source='writing_agent', models_usage=None, content=[FunctionExecutionResult(content='The weather in New York is 73 degrees and Sunny.', call_id='call_dhQsL9a2ARr737arLpqP3HUe')]), TextMessage(source='writing_agent', models_usage=RequestUsage(prompt_tokens=178, completion_tokens=14), content='The weather in New York is currently 73 degrees and sunny.'), TextMessage(source='writing_agent', models_usage=RequestUsage(prompt_tokens=225, completion_tokens=4), content='TERMINATE')], stop_reason='Maximum number of messages 5 reached, current message count: 5')



