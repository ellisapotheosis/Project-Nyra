# MetaMCP Configuration - Multi-Port Setup for Project Nyra
# Port 1: Core Services (Low Context Usage)
# Port 2: Desktop Commander & Heavy Services
# Port 3: Development Tools

version: '1.0'

ports:
  # Port 1: Core MCP Services (Always Active)
  core-services:
    port: 3000
    name: "Nyra Core MCP"
    description: "Essential lightweight services"
    servers:
      # Meta MCP itself (for orchestration)
      metamcp:
        type: stdio
        command: docker
        args: ["run", "--rm", "-i", "metatool-ai/metamcp:latest"]
        priority: 1
        
      # FastMCP (for quick Python tool creation)
      fastmcp:
        type: stdio
        command: python
        args: ["-m", "fastmcp"]
        priority: 2
        
      # Claude Flow (coordination)
      claude-flow:
        type: stdio
        command: npx
        args: ["-y", "claude-flow@alpha", "mcp", "start"]
        priority: 3
        
      # Filesystem (lightweight)
      filesystem:
        type: stdio
        command: npx
        args: [
          "-y",
          "@modelcontextprotocol/server-filesystem",
          "C:/Users/edane/OneDrive/Documents/DevProjects/Project-Nyra"
        ]
        priority: 4
        
      # Memory
      memory:
        type: stdio
        command: npx
        args: ["-y", "@modelcontextprotocol/server-memory"]
        priority: 5
        
      # Archon (Python utilities)
      archon:
        type: stdio
        command: python
        args: ["-m", "archon.mcp"]
        priority: 6

  # Port 2: Heavy Services (Desktop Commander & Browser)
  heavy-services:
    port: 3001
    name: "Nyra Heavy MCP"
    description: "High context usage services (130k+ tokens)"
    servers:
      # Desktop Commander (130k context!)
      desktop-commander:
        type: stdio
        command: npx
        args: ["-y", "@wonderwhy-er/desktop-commander@latest"]
        priority: 1
        context_warning: "130,000 tokens"
        
      # Browser MCP
      browser-mcp:
        type: http
        url: "http://localhost:8080/browser-mcp"
        priority: 2
        
      # Computer Use MCP
      computer-use:
        type: stdio
        command: npx
        args: ["-y", "computer-use-mcp@latest"]
        priority: 3

  # Port 3: Development Tools
  dev-tools:
    port: 3002
    name: "Nyra Dev Tools"
    description: "Development and integration services"
    servers:
      # GitHub
      github:
        type: stdio
        command: npx
        args: ["-y", "@modelcontextprotocol/server-github"]
        env:
          GITHUB_TOKEN: "${GITHUB_TOKEN}"
        priority: 1
        
      # Docker
      docker:
        type: stdio
        command: npx
        args: ["-y", "@modelcontextprotocol/server-docker"]
        priority: 2
        
      # Git
      git:
        type: stdio
        command: npx
        args: ["-y", "@modelcontextprotocol/server-git"]
        priority: 3
        
      # Firecrawl (web scraping)
      firecrawl:
        type: stdio
        command: npx
        args: ["-y", "@mendable/mcp-server-firecrawl"]
        env:
          FIRECRAWL_API_KEY: "${FIRECRAWL_API_KEY}"
        priority: 4
        
      # Web Search
      web-search:
        type: stdio
        command: npx
        args: ["-y", "@modelcontextprotocol/server-websearch"]
        priority: 5

  # Port 4: Optional/Experimental Services
  optional-services:
    port: 3003
    name: "Nyra Optional MCP"
    description: "Experimental and optional services"
    enabled: false
    servers:
      # Notion
      notion:
        type: http
        url: "https://mcp.notion.com/mcp"
        headers:
          Authorization: "Bearer ${NOTION_TOKEN}"
          
      # Qdrant Vector DB
      qdrant:
        type: stdio
        command: npx
        args: ["-y", "@qdrant/mcp-server-qdrant@latest"]
        env:
          QDRANT_URL: "${QDRANT_URL}"
          QDRANT_API_KEY: "${QDRANT_API_KEY}"
          
      # Thoughtful Claude (DeepSeek R1)
      thoughtful-claude:
        type: stdio
        command: npx
        args: ["-y", "thoughtful-claude@latest"]

# Orchestration Rules
orchestration:
  auto_start_ports: ["core-services"]
  lazy_load_ports: ["heavy-services", "dev-tools"]
  max_concurrent_servers: 10
  health_check_interval: 30
  
  rules:
    - name: "Heavy Service Isolation"
      condition: "server.context_warning exists"
      action: "isolate_to_dedicated_port"
      
    - name: "Auto-disable on high memory"
      condition: "memory_usage > 80%"
      action: "disable_optional_services"

# Security
security:
  allowed_paths:
    - "C:/Users/edane/OneDrive/Documents/DevProjects/Project-Nyra"
    - "C:/Users/edane/Desktop/Scratch"
    - "C:/NYRA/sandbox"
  
  blocked_commands:
    - "rm -rf"
    - "del /f /s /q"
    - "format"
    
  api_keys:
    required:
      - GITHUB_TOKEN
      - FIRECRAWL_API_KEY
    optional:
      - NOTION_TOKEN
      - QDRANT_URL
      - QDRANT_API_KEY