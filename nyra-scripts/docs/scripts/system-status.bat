@echo off
REM NYRA Claude-Flow System Status Check
REM Comprehensive health check for all components

setlocal enabledelayedexpansion

set PROJECT_ROOT=C:\Dev\DevProjects\Personal-Projects\Project-Nyra
cd /d "%PROJECT_ROOT%"

echo üîç NYRA Claude-Flow System Status Check
echo =========================================
echo Project: %PROJECT_ROOT%
echo Timestamp: %DATE% %TIME%
echo.

REM ========== BASIC SYSTEM CHECKS ==========
echo üíª System Environment:
echo ========================

REM PowerShell version
echo üêö PowerShell:
pwsh --version 2>nul && echo ‚úÖ PowerShell 7+ Available || (echo ‚ùå PowerShell 7+ Missing & set HAS_ERRORS=1)
echo.

REM Node.js and npm
echo üì¶ Node.js & npm:
node --version 2>nul && echo ‚úÖ Node.js: !node --version! || (echo ‚ùå Node.js Missing & set HAS_ERRORS=1)
npm --version 2>nul && echo ‚úÖ npm: !npm --version! || (echo ‚ùå npm Missing & set HAS_ERRORS=1)
echo.

REM Python
echo üêç Python:
python --version 2>nul && echo ‚úÖ Python: !python --version! || (echo ‚ùå Python Missing & set HAS_ERRORS=1)
python -c "import sys; print(f'‚úÖ Python executable: {sys.executable}')" 2>nul || (echo ‚ùå Python not working & set HAS_ERRORS=1)
echo.

REM UV package manager
echo üìã UV Package Manager:
uv --version 2>nul && echo ‚úÖ UV: !uv --version! || echo ‚ö†Ô∏è  UV not found (optional)
echo.

REM Git
echo üîÑ Git:
git --version 2>nul && echo ‚úÖ Git: !git --version! || (echo ‚ùå Git Missing & set HAS_ERRORS=1)
echo.

REM ========== MCP SERVERS STATUS ==========
echo ü§ñ MCP Servers & Dependencies:
echo ===============================

REM Claude-Flow
echo üìä Claude-Flow:
npx claude-flow@alpha --version 2>nul && echo ‚úÖ Claude-Flow: !npx claude-flow@alpha --version! || echo ‚ùå Claude-Flow Missing

REM Flow-Nexus
echo üåê Flow-Nexus:
npm list -g flow-nexus 2>nul | findstr flow-nexus >nul && echo ‚úÖ Flow-Nexus: Installed || echo ‚ùå Flow-Nexus Missing

REM FastMCP
echo ‚ö° FastMCP:
npm list -g fastmcp 2>nul | findstr fastmcp >nul && echo ‚úÖ FastMCP: Installed || echo ‚ùå FastMCP Missing

REM Archon MCP
echo üèõÔ∏è  Archon MCP:
npm list -g archon-mcp 2>nul | findstr archon-mcp >nul && echo ‚úÖ Archon MCP: Installed || echo ‚ùå Archon MCP Missing

REM Meta-MCP
echo üîÄ Meta-MCP:
npm list -g meta-mcp 2>nul | findstr meta-mcp >nul && echo ‚úÖ Meta-MCP: Installed || echo ‚ùå Meta-MCP Missing

REM RUV Tools
echo üîß RUV Tools:
npm list -g @ruv/cli 2>nul | findstr @ruv/cli >nul && echo ‚úÖ RUV CLI: Installed || echo ‚ùå RUV CLI Missing
npm list -g ruv-swarm 2>nul | findstr ruv-swarm >nul && echo ‚úÖ RUV Swarm: Installed || echo ‚ùå RUV Swarm Missing
echo.

REM ========== PYTHON DEPENDENCIES ==========
echo üêç Python Dependencies:
echo =======================

set PYTHON_DEPS=llama_index chromadb openai anthropic pydantic jsonschema watchdog rich typer
for %%d in (%PYTHON_DEPS%) do (
    python -c "import %%d; print('‚úÖ %%d: OK')" 2>nul || echo ‚ùå %%d: Missing
)
echo.

REM ========== PROJECT STRUCTURE ==========
echo üìÅ Project Structure:
echo =====================

set KEY_DIRS=Cleaning-Setup scripts .claude-flow workflows meta-mcp-config
for %%d in (%KEY_DIRS%) do (
    if exist "%%d" (echo ‚úÖ %%d: Present) else (echo ‚ùå %%d: Missing & set HAS_ERRORS=1)
)
echo.

REM Critical files
set KEY_FILES=NYRA-Claude-Flow-Complete-Setup.ps1 CLAUDE-FLOW-WORKFLOW-GUIDE.md
for %%f in (%KEY_FILES%) do (
    if exist "%%f" (echo ‚úÖ %%f: Present) else (echo ‚ùå %%f: Missing & set HAS_ERRORS=1)
)
echo.

REM ========== CONFIGURATION STATUS ==========
echo ‚öôÔ∏è  Configuration Files:
echo =========================

REM Claude-Flow config
if exist ".claude-flow\config.json" (
    echo ‚úÖ Claude-Flow config: Present
) else (
    echo ‚ùå Claude-Flow config: Missing
    set HAS_ERRORS=1
)

REM Workflows
if exist "workflows\clean-documents.yaml" (
    echo ‚úÖ Document cleaning workflow: Present
) else (
    echo ‚ùå Document cleaning workflow: Missing
    set HAS_ERRORS=1
)

REM Meta-MCP channels
if exist "meta-mcp-config\channels" (
    echo ‚úÖ Meta-MCP channels: Present
    for %%f in (meta-mcp-config\channels\*.json) do echo   üìÑ %%~nxf
) else (
    echo ‚ùå Meta-MCP channels: Missing
    set HAS_ERRORS=1
)

REM LlamaIndex config
if exist "Cleaning-Setup\llamaindex.config.yaml" (
    echo ‚úÖ LlamaIndex config: Present
) else (
    echo ‚ùå LlamaIndex config: Missing
    set HAS_ERRORS=1
)
echo.

REM ========== ENVIRONMENT VARIABLES ==========
echo üåç Environment Variables:
echo =========================

REM API Keys (check existence, not values)
echo üîë API Keys:
if defined OPENAI_API_KEY (echo ‚úÖ OPENAI_API_KEY: Set) else (echo ‚ö†Ô∏è  OPENAI_API_KEY: Not set)
if defined ANTHROPIC_API_KEY (echo ‚úÖ ANTHROPIC_API_KEY: Set) else (echo ‚ö†Ô∏è  ANTHROPIC_API_KEY: Not set)
if defined CLAUDE_API_KEY (echo ‚úÖ CLAUDE_API_KEY: Set) else (echo ‚ö†Ô∏è  CLAUDE_API_KEY: Not set)

REM NYRA environment variables
if defined NYRA_MCP_CONFIG_PATH (echo ‚úÖ NYRA_MCP_CONFIG_PATH: Set) else (echo ‚ö†Ô∏è  NYRA_MCP_CONFIG_PATH: Not set)
if defined NYRA_MCP_SERVERS_PATH (echo ‚úÖ NYRA_MCP_SERVERS_PATH: Set) else (echo ‚ö†Ô∏è  NYRA_MCP_SERVERS_PATH: Not set)

echo.

REM ========== ACTIVE PROCESSES ==========
echo üîÑ Active Processes:
echo ====================

REM Check for running MCP servers
tasklist /FI "IMAGENAME eq node.exe" 2>nul | findstr node.exe >nul && echo ‚úÖ Node.js processes: Running || echo ‚ö†Ô∏è  No Node.js processes found
tasklist /FI "IMAGENAME eq python.exe" 2>nul | findstr python.exe >nul && echo ‚úÖ Python processes: Running || echo ‚ö†Ô∏è  No Python processes found
tasklist /FI "IMAGENAME eq pwsh.exe" 2>nul | findstr pwsh.exe >nul && echo ‚úÖ PowerShell processes: Running || echo ‚ö†Ô∏è  No PowerShell processes found

echo.

REM ========== FINAL ASSESSMENT ==========
echo üìä System Assessment:
echo ======================

if defined HAS_ERRORS (
    echo ‚ùå System Status: ISSUES DETECTED
    echo üîß Action Required: Run setup script or fix missing dependencies
    echo   Command: .\NYRA-Claude-Flow-Complete-Setup.ps1 -Mode install
) else (
    echo ‚úÖ System Status: HEALTHY
    echo üéØ Ready for: Document processing, workflow execution, MCP orchestration
)

echo.
echo üìö Available Commands:
echo   ‚Ä¢ Setup/Repair: .\NYRA-Claude-Flow-Complete-Setup.ps1
echo   ‚Ä¢ Clean Documents: .\scripts\mcp-wrappers\claude-flow-clean.bat
echo   ‚Ä¢ Start Claude-Flow: .\scripts\mcp-wrappers\claude-flow-start.bat
echo   ‚Ä¢ Run Workflow: .\scripts\mcp-wrappers\claude-flow-workflow.bat
echo   ‚Ä¢ View Guide: notepad CLAUDE-FLOW-WORKFLOW-GUIDE.md

echo.
echo üí° Quick Fixes:
if defined HAS_ERRORS (
    echo   1. Install missing dependencies with setup script
    echo   2. Check API keys in environment or .env file
    echo   3. Run: npm install -g claude-flow@alpha
    echo   4. Run: uv pip install llama_index chromadb
)
echo   ‚Ä¢ For API keys: Set in PowerShell profile or use secret manager
echo   ‚Ä¢ For MCP issues: Check port conflicts and configuration files
echo   ‚Ä¢ For Python issues: Verify virtual environment activation

echo.
echo üîç Detailed Logs:
echo   ‚Ä¢ Setup log: NYRA-Claude-Flow-Setup-Report.md
echo   ‚Ä¢ Processing logs: Cleaning-Setup\logs\
echo   ‚Ä¢ Claude-Flow logs: .claude-flow\logs\

pause
endlocal